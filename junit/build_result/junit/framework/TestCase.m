//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/framework/TestCase.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/IllegalAccessException.h"
#import "java/lang/NoSuchMethodException.h"
#import "java/lang/Throwable.h"
#import "java/lang/reflect/InvocationTargetException.h"
#import "java/lang/reflect/Method.h"
#import "java/lang/reflect/Modifier.h"
#import "junit/framework/Assert.h"
#import "junit/framework/TestCase.h"
#import "junit/framework/TestResult.h"

@implementation JunitFrameworkTestCase

- (NSString *)fName {
  return fName_;
}
- (void)setFName:(NSString *)fName {
  JreOperatorRetainedAssign(&fName_, fName);
}
@synthesize fName = fName_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fName_, nil);
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fName_, name);
  }
  return self;
}

- (int)countTestCases {
  return 1;
}

- (JunitFrameworkTestResult *)createResult {
  return [[[JunitFrameworkTestResult alloc] init] autorelease];
}

- (JunitFrameworkTestResult *)run {
  JunitFrameworkTestResult *result = [self createResult];
  [self runWithJunitFrameworkTestResult:result];
  return result;
}

- (void)runWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  [((JunitFrameworkTestResult *) NIL_CHK(result)) runWithJunitFrameworkTestCase:self];
}

- (void)runBare {
  JavaLangThrowable *exception = nil;
  [self setUp];
  @try {
    [self runTest];
  }
  @catch (JavaLangThrowable *running) {
    exception = running;
  }
  @finally {
    @try {
      [self tearDown];
    }
    @catch (JavaLangThrowable *tearingDown) {
      if (exception == nil) exception = tearingDown;
    }
  }
  if (exception != nil) @throw exception;
}

- (void)runTest {
  [JunitFrameworkAssert assertNotNullWithNSString:@"TestCase.fName cannot be null" withId:fName_];
  JavaLangReflectMethod *runMethod = nil;
  @try {
    runMethod = [[self getClass] getMethod:fName_ parameterTypes:(IOSObjectArray *) nil];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    [JunitFrameworkAssert failWithNSString:[NSString stringWithFormat:@"Method \"%@\" not found", fName_]];
  }
  if (![JavaLangReflectModifier isPublicWithInt:[((JavaLangReflectMethod *) NIL_CHK(runMethod)) getModifiers]]) {
    [JunitFrameworkAssert failWithNSString:[NSString stringWithFormat:@"Method \"%@\" should be public", fName_]];
  }
  @try {
    [((JavaLangReflectMethod *) NIL_CHK(runMethod)) invokeWithId:self withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:0 ]];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    [((JavaLangReflectInvocationTargetException *) NIL_CHK(e)) fillInStackTrace];
    @throw [((JavaLangReflectInvocationTargetException *) NIL_CHK(e)) getTargetException];
  }
  @catch (JavaLangIllegalAccessException *e) {
    [((JavaLangIllegalAccessException *) NIL_CHK(e)) fillInStackTrace];
    @throw e;
  }
}

- (void)setUp {
}

- (void)tearDown {
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@(%@)", [self getName], [[self getClass] getName]];
}

- (NSString *)getName {
  return fName_;
}

- (void)setNameWithNSString:(NSString *)name {
  JreOperatorRetainedAssign(&fName_, name);
}

- (void)dealloc {
  JreOperatorRetainedAssign(&fName_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JunitFrameworkTestCase *typedCopy = (JunitFrameworkTestCase *) copy;
  typedCopy.fName = fName_;
}

@end
