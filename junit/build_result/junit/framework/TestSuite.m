//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/junit/build_result/java/junit/framework/TestSuite.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/io/PrintWriter.h"
#import "java/io/StringWriter.h"
#import "java/lang/IllegalAccessException.h"
#import "java/lang/InstantiationException.h"
#import "java/lang/NoSuchMethodException.h"
#import "java/lang/Throwable.h"
#import "java/lang/Void.h"
#import "java/lang/reflect/Constructor.h"
#import "java/lang/reflect/InvocationTargetException.h"
#import "java/lang/reflect/Method.h"
#import "java/lang/reflect/Modifier.h"
#import "java/util/ArrayList.h"
#import "java/util/Enumeration.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Vector.h"
#import "junit/framework/Assert.h"
#import "junit/framework/Test.h"
#import "junit/framework/TestCase.h"
#import "junit/framework/TestResult.h"
#import "junit/framework/TestSuite.h"

@implementation JunitFrameworkTestSuite

- (NSString *)fName {
  return fName_;
}
- (void)setFName:(NSString *)fName {
  JreOperatorRetainedAssign(&fName_, fName);
}
@synthesize fName = fName_;
- (JavaUtilVector *)fTests {
  return fTests_;
}
- (void)setFTests:(JavaUtilVector *)fTests {
  JreOperatorRetainedAssign(&fTests_, fTests);
}
@synthesize fTests = fTests_;

+ (id<JunitFrameworkTest>)createTestWithIOSClass:(IOSClass *)theClass
                                    withNSString:(NSString *)name {
  JavaLangReflectConstructor *constructor;
  @try {
    constructor = [JunitFrameworkTestSuite getTestConstructorWithIOSClass:theClass];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return [JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ has no public constructor TestCase(String name) or TestCase()", [NIL_CHK(theClass) getName]]];
  }
  id test;
  @try {
    if ((int) [[((JavaLangReflectConstructor *) NIL_CHK(constructor)) getParameterTypes] count] == 0) {
      test = [((JavaLangReflectConstructor *) NIL_CHK(constructor)) newInstanceWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:0 type:[IOSClass classWithClass:[NSObject class]]] autorelease]];
      if ([test isKindOfClass:[JunitFrameworkTestCase class]]) [((JunitFrameworkTestCase *) test) setNameWithNSString:name];
    }
    else {
      test = [((JavaLangReflectConstructor *) NIL_CHK(constructor)) newInstanceWithNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:[IOSClass classWithClass:[NSObject class]]]];
    }
  }
  @catch (JavaLangInstantiationException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Cannot instantiate test case: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:e]]]);
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Exception in constructor: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:[((JavaLangReflectInvocationTargetException *) NIL_CHK(e)) getTargetException]]]]);
  }
  @catch (JavaLangIllegalAccessException *e) {
    return ([JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Cannot access test case: %@ (%@)", name, [JunitFrameworkTestSuite exceptionToStringWithJavaLangThrowable:e]]]);
  }
  return (id<JunitFrameworkTest>) test;
}

+ (JavaLangReflectConstructor *)getTestConstructorWithIOSClass:(IOSClass *)theClass {
  @try {
    return [NIL_CHK(theClass) getConstructor:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[IOSClass class]] count:1, [IOSClass classWithClass:[NSString class]] ]];
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  return [NIL_CHK(theClass) getConstructor:[[[IOSObjectArray alloc] initWithLength:0 type:[IOSClass classWithClass:[IOSClass class]]] autorelease]];
}

+ (id<JunitFrameworkTest>)warningWithNSString:(NSString *)message {
  return [[[JunitFrameworkTestSuite_$1 alloc] initWithNSString:@"warning" withNSString:message] autorelease];
}

+ (NSString *)exceptionToStringWithJavaLangThrowable:(JavaLangThrowable *)t {
  JavaIoStringWriter *stringWriter = [[[JavaIoStringWriter alloc] init] autorelease];
  JavaIoPrintWriter *writer = [[[JavaIoPrintWriter alloc] initWithJavaIoWriter:stringWriter] autorelease];
  [((JavaLangThrowable *) NIL_CHK(t)) printStackTraceWithJavaIoPrintWriter:writer];
  return [((JavaIoStringWriter *) NIL_CHK(stringWriter)) description];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fTests_, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
  }
  return self;
}

- (id)initJunitFrameworkTestSuiteWithIOSClass:(IOSClass *)theClass {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fTests_, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    [self addTestsFromTestCaseWithIOSClass:theClass];
  }
  return self;
}

- (id)initWithIOSClass:(IOSClass *)theClass {
  return [self initJunitFrameworkTestSuiteWithIOSClass:theClass];
}

- (void)addTestsFromTestCaseWithIOSClass:(IOSClass *)theClass {
  JreOperatorRetainedAssign(&fName_, [NIL_CHK(theClass) getName]);
  @try {
    [JunitFrameworkTestSuite getTestConstructorWithIOSClass:theClass];
  }
  @catch (JavaLangNoSuchMethodException *e) {
    [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ has no public constructor TestCase(String name) or TestCase()", [NIL_CHK(theClass) getName]]]];
    return;
  }
  if (![JavaLangReflectModifier isPublicWithInt:[NIL_CHK(theClass) getModifiers]]) {
    [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Class %@ is not public", [NIL_CHK(theClass) getName]]]];
    return;
  }
  IOSClass *superClass = theClass;
  id<JavaUtilList> names = [[[JavaUtilArrayList alloc] init] autorelease];
  while ([[IOSClass classWithProtocol:@protocol(JunitFrameworkTest)] isAssignableFrom:superClass]) {
    {
      IOSObjectArray *a__ = [NIL_CHK(superClass) getDeclaredMethods];
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        JavaLangReflectMethod *each = ((JavaLangReflectMethod *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [self addTestMethodWithJavaLangReflectMethod:each withJavaUtilList:names withIOSClass:theClass];
      }
    }
    superClass = [NIL_CHK(superClass) getSuperclass];
  }
  if ([((JavaUtilVector *) NIL_CHK(fTests_)) size] == 0) [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"No tests found in %@", [NIL_CHK(theClass) getName]]]];
}

- (id)initWithIOSClass:(IOSClass *)theClass
          withNSString:(NSString *)name {
  if ((self = [self initJunitFrameworkTestSuiteWithIOSClass:theClass])) {
    [self setNameWithNSString:name];
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fTests_, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    [self setNameWithNSString:name];
  }
  return self;
}

- (id)initJunitFrameworkTestSuiteWithIOSClassArray:(IOSObjectArray *)classes {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&fTests_, [[[JavaUtilVector alloc] initWithInt:10] autorelease]);
    {
      IOSObjectArray *a__ = classes;
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        IOSClass *each = ((IOSClass *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
        [self addTestWithJunitFrameworkTest:[self testCaseForClassWithIOSClass:each]];
      }
    }
  }
  return self;
}

- (id)initWithIOSClassArray:(IOSObjectArray *)classes {
  return [self initJunitFrameworkTestSuiteWithIOSClassArray:classes];
}

- (id<JunitFrameworkTest>)testCaseForClassWithIOSClass:(IOSClass *)each {
  if ([[IOSClass classWithClass:[JunitFrameworkTestCase class]] isAssignableFrom:each]) return [[[JunitFrameworkTestSuite alloc] initWithIOSClass:[NIL_CHK(each) asSubclass:[IOSClass classWithClass:[JunitFrameworkTestCase class]]]] autorelease];
  else return [JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"%@ does not extend TestCase", [NIL_CHK(each) getCanonicalName]]];
}

- (id)initWithIOSClassArray:(IOSObjectArray *)classes
               withNSString:(NSString *)name {
  if ((self = [self initJunitFrameworkTestSuiteWithIOSClassArray:classes])) {
    [self setNameWithNSString:name];
  }
  return self;
}

- (void)addTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test {
  [((JavaUtilVector *) NIL_CHK(fTests_)) addWithId:test];
}

- (void)addTestSuiteWithIOSClass:(IOSClass *)testClass {
  [self addTestWithJunitFrameworkTest:[[[JunitFrameworkTestSuite alloc] initWithIOSClass:testClass] autorelease]];
}

- (int)countTestCases {
  int count = 0;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilVector *) NIL_CHK(fTests_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JunitFrameworkTest> each = ((id<JunitFrameworkTest>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      count += [((id<JunitFrameworkTest>) NIL_CHK(each)) countTestCases];
    }
  }
  return count;
}

- (NSString *)getName {
  return fName_;
}

- (void)runWithJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilVector *) NIL_CHK(fTests_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id<JunitFrameworkTest> each = ((id<JunitFrameworkTest>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((JunitFrameworkTestResult *) NIL_CHK(result)) shouldStop]) break;
      [self runTestWithJunitFrameworkTest:each withJunitFrameworkTestResult:result];
    }
  }
}

- (void)runTestWithJunitFrameworkTest:(id<JunitFrameworkTest>)test
         withJunitFrameworkTestResult:(JunitFrameworkTestResult *)result {
  [((id<JunitFrameworkTest>) NIL_CHK(test)) runWithJunitFrameworkTestResult:result];
}

- (void)setNameWithNSString:(NSString *)name {
  JreOperatorRetainedAssign(&fName_, name);
}

- (id<JunitFrameworkTest>)testAtWithInt:(int)index {
  return ((id<JunitFrameworkTest>) [((JavaUtilVector *) NIL_CHK(fTests_)) getWithInt:index]);
}

- (int)testCount {
  return [((JavaUtilVector *) NIL_CHK(fTests_)) size];
}

- (id<JavaUtilEnumeration>)tests {
  return ((id<JavaUtilEnumeration>) [((JavaUtilVector *) NIL_CHK(fTests_)) elements]);
}

- (NSString *)description {
  if ([self getName] != nil) return [self getName];
  return (NSString *) [super description];
}

- (void)addTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m
                              withJavaUtilList:(id<JavaUtilList>)names
                                  withIOSClass:(IOSClass *)theClass {
  NSString *name = [((JavaLangReflectMethod *) NIL_CHK(m)) getName];
  if ([((id<JavaUtilList>) NIL_CHK(names)) containsWithId:name]) return;
  if (![self isPublicTestMethodWithJavaLangReflectMethod:m]) {
    if ([self isTestMethodWithJavaLangReflectMethod:m]) [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite warningWithNSString:[NSString stringWithFormat:@"Test method isn't public: %@(%@)", [((JavaLangReflectMethod *) NIL_CHK(m)) getName], [NIL_CHK(theClass) getCanonicalName]]]];
    return;
  }
  [((id<JavaUtilList>) NIL_CHK(names)) addWithId:name];
  [self addTestWithJunitFrameworkTest:[JunitFrameworkTestSuite createTestWithIOSClass:theClass withNSString:name]];
}

- (BOOL)isPublicTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m {
  return [self isTestMethodWithJavaLangReflectMethod:m] && [JavaLangReflectModifier isPublicWithInt:[((JavaLangReflectMethod *) NIL_CHK(m)) getModifiers]];
}

- (BOOL)isTestMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)m {
  return (int) [[((JavaLangReflectMethod *) NIL_CHK(m)) getParameterTypes] count] == 0 && [[((JavaLangReflectMethod *) NIL_CHK(m)) getName] hasPrefix:@"test"] && [[((JavaLangReflectMethod *) NIL_CHK(m)) getReturnType] isEqual:[JavaLangVoid TYPE]];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&fTests_, nil);
  JreOperatorRetainedAssign(&fName_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JunitFrameworkTestSuite *typedCopy = (JunitFrameworkTestSuite *) copy;
  typedCopy.fName = fName_;
  typedCopy.fTests = fTests_;
}

@end
@implementation JunitFrameworkTestSuite_$1

- (NSString *)val$message {
  return val$message_;
}
- (void)setVal$message:(NSString *)val$message {
  JreOperatorRetainedAssign(&val$message_, val$message);
}
@synthesize val$message = val$message_;

- (void)runTest {
  [JunitFrameworkAssert failWithNSString:val$message_];
}

- (id)initWithNSString:(NSString *)arg$0
          withNSString:(NSString *)capture$0 {
  if ((self = [super initWithNSString:arg$0])) {
    JreOperatorRetainedAssign(&val$message_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$message_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JunitFrameworkTestSuite_$1 *typedCopy = (JunitFrameworkTestSuite_$1 *) copy;
  typedCopy.val$message = val$message_;
}

@end
