//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/util/BasicLruCache.java
//
//  Created by retechretech on 13-4-24.
//

#import "java/lang/IllegalArgumentException.h"
#import "java/lang/NullPointerException.h"
#import "java/util/Iterator.h"
#import "java/util/LinkedHashMap.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "libcore/util/BasicLruCache.h"

@implementation LibcoreUtilBasicLruCache

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilLinkedHashMap *)map {
  return map_;
}
- (void)setMap:(JavaUtilLinkedHashMap *)map {
  JreOperatorRetainedAssign(&map_, map);
}
@synthesize map = map_;
@synthesize maxSize = maxSize_;

- (id)initWithInt:(int)maxSize {
  if ((self = [super init])) {
    if (maxSize <= 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"maxSize <= 0"] autorelease];
    }
    self.maxSize = maxSize;
    self.map = [[[JavaUtilLinkedHashMap alloc] initWithInt:0 withFloat:0.75f withBOOL:YES] autorelease];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)getWithId:(id)key {
  @synchronized(self) {
    {
      if (key == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"key == null"] autorelease];
      }
      id result = [((JavaUtilLinkedHashMap *) NIL_CHK(map_)) getWithId:key];
      if (result != nil) {
        return result;
      }
      result = [self createWithId:key];
      if (result != nil) {
        [((JavaUtilLinkedHashMap *) NIL_CHK(map_)) putWithId:key withId:result];
        [self trimToSizeWithInt:maxSize_];
      }
      return result;
    }
  }
}

- (id)putWithId:(id)key
         withId:(id)value {
  @synchronized(self) {
    {
      if (key == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"key == null"] autorelease];
      }
      else if (value == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"value == null"] autorelease];
      }
      id previous = [((JavaUtilLinkedHashMap *) NIL_CHK(map_)) putWithId:key withId:value];
      [self trimToSizeWithInt:maxSize_];
      return previous;
    }
  }
}

- (void)trimToSizeWithInt:(int)maxSize {
  id<JavaUtilIterator> iterator = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((JavaUtilLinkedHashMap *) NIL_CHK(map_)) entrySet]) iterator]);
  while ([((JavaUtilLinkedHashMap *) NIL_CHK(map_)) size] > maxSize) {
    id<JavaUtilMap_Entry> toEvict = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iterator)) next]);
    id key = [((id<JavaUtilMap_Entry>) NIL_CHK(toEvict)) getKey];
    id value = [((id<JavaUtilMap_Entry>) NIL_CHK(toEvict)) getValue];
    [((JavaUtilLinkedHashMap *) NIL_CHK(map_)) removeWithId:key];
    [self entryEvictedWithId:key withId:value];
  }
}

- (void)entryEvictedWithId:(id)key
                    withId:(id)value {
}

- (id)createWithId:(id)key {
  return nil;
}

- (id<JavaUtilMap>)snapshot {
  @synchronized(self) {
    {
      return [[[JavaUtilLinkedHashMap alloc] initWithJavaUtilMap:map_] autorelease];
    }
  }
}

- (void)evictAll {
  @synchronized(self) {
    {
      [self trimToSizeWithInt:0];
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&map_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  LibcoreUtilBasicLruCache *typedCopy = (LibcoreUtilBasicLruCache *) copy;
  typedCopy.map = map_;
  typedCopy.maxSize = maxSize_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:map_ name:@"map"]];
  return result;
}

@end
