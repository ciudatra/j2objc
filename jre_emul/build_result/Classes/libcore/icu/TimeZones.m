//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/libcore/icu/TimeZones.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSObjectArray.h"
#import "java/util/Arrays.h"
#import "java/util/Comparator.h"
#import "java/util/HashMap.h"
#import "java/util/Locale.h"
#import "java/util/TimeZone.h"
#import "libcore/icu/TimeZones.h"
#import "TimeZonesSupport.h"

@implementation LibcoreIcuTimeZones

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZones_availableTimeZones_ name:@"LibcoreIcuTimeZones_availableTimeZones_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZones_cachedZoneStrings_ name:@"LibcoreIcuTimeZones_cachedZoneStrings_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_ name:@"LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_"]];
  return result;
}

static IOSObjectArray * LibcoreIcuTimeZones_availableTimeZones_;
static LibcoreIcuTimeZones_ZoneStringsCache * LibcoreIcuTimeZones_cachedZoneStrings_;
static id<JavaUtilComparator> LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_;

+ (IOSObjectArray *)availableTimeZones {
  return LibcoreIcuTimeZones_availableTimeZones_;
}

+ (int)OLSON_NAME {
  return LibcoreIcuTimeZones_OLSON_NAME;
}

+ (int)LONG_NAME {
  return LibcoreIcuTimeZones_LONG_NAME;
}

+ (int)SHORT_NAME {
  return LibcoreIcuTimeZones_SHORT_NAME;
}

+ (int)LONG_NAME_DST {
  return LibcoreIcuTimeZones_LONG_NAME_DST;
}

+ (int)SHORT_NAME_DST {
  return LibcoreIcuTimeZones_SHORT_NAME_DST;
}

+ (int)NAME_COUNT {
  return LibcoreIcuTimeZones_NAME_COUNT;
}

+ (LibcoreIcuTimeZones_ZoneStringsCache *)cachedZoneStrings {
  return LibcoreIcuTimeZones_cachedZoneStrings_;
}

+ (id<JavaUtilComparator>)ZONE_STRINGS_COMPARATOR {
  return LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (NSString *)getDisplayNameWithNSStringArray:(IOSObjectArray *)zoneStrings
                                 withNSString:(NSString *)id_
                                     withBOOL:(BOOL)daylight
                                      withInt:(int)style {
  IOSObjectArray *needle = [IOSObjectArray arrayWithObjects:(id[]){ id_ } count:1 type:[IOSClass classWithClass:[NSString class]]];
  int index = [JavaUtilArrays binarySearchWithNSObjectArray:zoneStrings withId:needle withJavaUtilComparator:LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_];
  if (index >= 0) {
    IOSObjectArray *row = ((IOSObjectArray *) [((IOSObjectArray *) NIL_CHK(zoneStrings)) objectAtIndex:index]);
    if (daylight) {
      return (style == JavaUtilTimeZone_LONG) ? ((NSString *) [((IOSObjectArray *) NIL_CHK(row)) objectAtIndex:LibcoreIcuTimeZones_LONG_NAME_DST]) : ((NSString *) [((IOSObjectArray *) NIL_CHK(row)) objectAtIndex:LibcoreIcuTimeZones_SHORT_NAME_DST]);
    }
    else {
      return (style == JavaUtilTimeZone_LONG) ? ((NSString *) [((IOSObjectArray *) NIL_CHK(row)) objectAtIndex:LibcoreIcuTimeZones_LONG_NAME]) : ((NSString *) [((IOSObjectArray *) NIL_CHK(row)) objectAtIndex:LibcoreIcuTimeZones_SHORT_NAME]);
    }
  }
  return nil;
}

+ (IOSObjectArray *)getZoneStringsWithJavaUtilLocale:(JavaUtilLocale *)locale {
  if (locale == nil) {
    locale = [JavaUtilLocale getDefault];
  }
  return ((IOSObjectArray *) [((LibcoreIcuTimeZones_ZoneStringsCache *) NIL_CHK(LibcoreIcuTimeZones_cachedZoneStrings_)) getWithId:locale]);
}

+ (IOSObjectArray *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return [LibcoreIcuTimeZones forCountryCodeWithNSString:[((JavaUtilLocale *) NIL_CHK(locale)) getCountry]];
}

+ (IOSObjectArray *)forCountryCodeWithNSString:(NSString *)countryCode   {
    return [TimeZonesSupport forCountryCode:countryCode];
  }

+ (IOSObjectArray *)getZoneStringsImplWithNSString:(NSString *)locale
                                 withNSStringArray:(IOSObjectArray *)timeZoneIds   {
    return [TimeZonesSupport getZoneStringsImpl:locale ids:timeZoneIds];
  }

+ (void)initialize {
  if (self == [LibcoreIcuTimeZones class]) {
    JreOperatorRetainedAssign(&LibcoreIcuTimeZones_availableTimeZones_, [JavaUtilTimeZone getAvailableIDs]);
    JreOperatorRetainedAssign(&LibcoreIcuTimeZones_cachedZoneStrings_, [[[LibcoreIcuTimeZones_ZoneStringsCache alloc] init] autorelease]);
    {
      [((LibcoreIcuTimeZones_ZoneStringsCache *) NIL_CHK(LibcoreIcuTimeZones_cachedZoneStrings_)) getWithId:[JavaUtilLocale ROOT]];
      [((LibcoreIcuTimeZones_ZoneStringsCache *) NIL_CHK(LibcoreIcuTimeZones_cachedZoneStrings_)) getWithId:[JavaUtilLocale US]];
      [((LibcoreIcuTimeZones_ZoneStringsCache *) NIL_CHK(LibcoreIcuTimeZones_cachedZoneStrings_)) getWithId:[JavaUtilLocale getDefault]];
    }
    JreOperatorRetainedAssign(&LibcoreIcuTimeZones_ZONE_STRINGS_COMPARATOR_, [[[LibcoreIcuTimeZones_$1 alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation LibcoreIcuTimeZones_ZoneStringsCache

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilHashMap *)internTable {
  return internTable_;
}
- (void)setInternTable:(JavaUtilHashMap *)internTable {
  JreOperatorRetainedAssign(&internTable_, internTable);
}
@synthesize internTable = internTable_;

- (id)init {
  if ((self = [super initWithInt:(int) [((IOSObjectArray *) NIL_CHK([LibcoreIcuTimeZones availableTimeZones])) count]])) {
    JreOperatorRetainedAssign(&internTable_, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (IOSObjectArray *)createWithId:(JavaUtilLocale *)locale {
  IOSObjectArray *result = [LibcoreIcuTimeZones getZoneStringsImplWithNSString:[((JavaUtilLocale *) NIL_CHK(locale)) description] withNSStringArray:[LibcoreIcuTimeZones availableTimeZones]];
  [self internStringsWithNSStringArray:result];
  return result;
}

- (void)internStringsWithNSStringArray:(IOSObjectArray *)result {
  @synchronized(self) {
    {
      for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(result)) count]; ++i) {
        for (int j = 1; j < LibcoreIcuTimeZones_NAME_COUNT; ++j) {
          NSString *original = ((NSString *) [((IOSObjectArray *) [((IOSObjectArray *) NIL_CHK(result)) objectAtIndex:i]) objectAtIndex:j]);
          NSString *nonDuplicate = ((NSString *) [((JavaUtilHashMap *) NIL_CHK(internTable_)) getWithId:original]);
          if (nonDuplicate == nil) {
            [((JavaUtilHashMap *) NIL_CHK(internTable_)) putWithId:original withId:original];
          }
          else {
            [((IOSObjectArray *) [((IOSObjectArray *) NIL_CHK(result)) objectAtIndex:i]) replaceObjectAtIndex:j withObject:nonDuplicate];
          }
        }
      }
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&internTable_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  LibcoreIcuTimeZones_ZoneStringsCache *typedCopy = (LibcoreIcuTimeZones_ZoneStringsCache *) copy;
  typedCopy.internTable = internTable_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:internTable_ name:@"internTable"]];
  return result;
}

@end
@implementation LibcoreIcuTimeZones_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (int)compareWithId:(IOSObjectArray *)lhs
              withId:(IOSObjectArray *)rhs {
  return [((NSString *) [((IOSObjectArray *) NIL_CHK(lhs)) objectAtIndex:LibcoreIcuTimeZones_OLSON_NAME]) compareToWithId:((NSString *) [((IOSObjectArray *) NIL_CHK(rhs)) objectAtIndex:LibcoreIcuTimeZones_OLSON_NAME])];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
