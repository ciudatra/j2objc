//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/javax/xml/parsers/SAXParser.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "java/io/File.h"
#import "java/io/InputStream.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/UnsupportedOperationException.h"
#import "javax/xml/parsers/FilePathToURI.h"
#import "javax/xml/parsers/SAXParser.h"
#import "javax/xml/validation/Schema.h"
#import "org/xml/sax/HandlerBase.h"
#import "org/xml/sax/InputSource.h"
#import "org/xml/sax/Parser.h"
#import "org/xml/sax/XMLReader.h"
#import "org/xml/sax/helpers/DefaultHandler.h"

@implementation JavaxXmlParsersSAXParser

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (void)reset {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:[NSString stringWithFormat:@"This SAXParser, \"%@\", does not support the reset functionality.", [[self getClass] getName]]] autorelease];
}

- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
          withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputStream cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:is] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHandlerBase:hb];
}

- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
          withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb
                      withNSString:(NSString *)systemId {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputStream cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:is] autorelease];
  [((OrgXmlSaxInputSource *) NIL_CHK(input)) setSystemIdWithNSString:systemId];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHandlerBase:hb];
}

- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputStream cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:is] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHelpersDefaultHandler:dh];
}

- (void)parseWithJavaIoInputStream:(JavaIoInputStream *)is
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh
                      withNSString:(NSString *)systemId {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputStream cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithJavaIoInputStream:is] autorelease];
  [((OrgXmlSaxInputSource *) NIL_CHK(input)) setSystemIdWithNSString:systemId];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHelpersDefaultHandler:dh];
}

- (void)parseWithNSString:(NSString *)uri
 withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb {
  if (uri == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"uri cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithNSString:uri] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHandlerBase:hb];
}

- (void)parseWithNSString:(NSString *)uri
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh {
  if (uri == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"uri cannot be null"] autorelease];
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithNSString:uri] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHelpersDefaultHandler:dh];
}

- (void)parseWithJavaIoFile:(JavaIoFile *)f
   withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb {
  if (f == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"File cannot be null"] autorelease];
  }
  NSString *escapedURI = [JavaxXmlParsersFilePathToURI filepath2URIWithNSString:[((JavaIoFile *) NIL_CHK(f)) getAbsolutePath]];
  if (JavaxXmlParsersSAXParser_DEBUG) {
    NSLog(@"%@", [NSString stringWithFormat:@"Escaped URI = %@", escapedURI]);
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithNSString:escapedURI] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHandlerBase:hb];
}

- (void)parseWithJavaIoFile:(JavaIoFile *)f
withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh {
  if (f == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"File cannot be null"] autorelease];
  }
  NSString *escapedURI = [JavaxXmlParsersFilePathToURI filepath2URIWithNSString:[((JavaIoFile *) NIL_CHK(f)) getAbsolutePath]];
  if (JavaxXmlParsersSAXParser_DEBUG) {
    NSLog(@"%@", [NSString stringWithFormat:@"Escaped URI = %@", escapedURI]);
  }
  OrgXmlSaxInputSource *input = [[[OrgXmlSaxInputSource alloc] initWithNSString:escapedURI] autorelease];
  [self parseWithOrgXmlSaxInputSource:input withOrgXmlSaxHelpersDefaultHandler:dh];
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is
             withOrgXmlSaxHandlerBase:(OrgXmlSaxHandlerBase *)hb {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputSource cannot be null"] autorelease];
  }
  id<OrgXmlSaxParser> parser = [self getParser];
  if (hb != nil) {
    [((id<OrgXmlSaxParser>) NIL_CHK(parser)) setDocumentHandlerWithOrgXmlSaxDocumentHandler:hb];
    [((id<OrgXmlSaxParser>) NIL_CHK(parser)) setEntityResolverWithOrgXmlSaxEntityResolver:hb];
    [((id<OrgXmlSaxParser>) NIL_CHK(parser)) setErrorHandlerWithOrgXmlSaxErrorHandler:hb];
    [((id<OrgXmlSaxParser>) NIL_CHK(parser)) setDTDHandlerWithOrgXmlSaxDTDHandler:hb];
  }
  [((id<OrgXmlSaxParser>) NIL_CHK(parser)) parseWithOrgXmlSaxInputSource:is];
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)is
   withOrgXmlSaxHelpersDefaultHandler:(OrgXmlSaxHelpersDefaultHandler *)dh {
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"InputSource cannot be null"] autorelease];
  }
  id<OrgXmlSaxXMLReader> reader = [self getXMLReader];
  if (dh != nil) {
    [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader)) setContentHandlerWithOrgXmlSaxContentHandler:dh];
    [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader)) setEntityResolverWithOrgXmlSaxEntityResolver:dh];
    [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader)) setErrorHandlerWithOrgXmlSaxErrorHandler:dh];
    [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader)) setDTDHandlerWithOrgXmlSaxDTDHandler:dh];
  }
  [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader)) parseWithOrgXmlSaxInputSource:is];
}

- (id<OrgXmlSaxParser>)getParser {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgXmlSaxXMLReader>)getXMLReader {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isNamespaceAware {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isValidating {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)getPropertyWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaxXmlValidationSchema *)getSchema {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (BOOL)isXIncludeAware {
  @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"This parser does not support specification"] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
