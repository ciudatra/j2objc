//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Logical.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSIntArray.h"
#import "java/lang/Math.h"
#import "java/math/BigInteger.h"
#import "java/math/Logical.h"

@implementation JavaMathLogical

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (JavaMathBigInteger *)not__WithJavaMathBigInteger:(JavaMathBigInteger *)val {
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return [JavaMathBigInteger MINUS_ONE];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(val)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [JavaMathBigInteger ZERO];
  }
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:((JavaMathBigInteger *) NIL_CHK(val)).numberLength + 1] autorelease];
  int i;
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    if ([((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:((JavaMathBigInteger *) NIL_CHK(val)).numberLength - 1] != -1) {
      for (i = 0; [((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] == -1; i++) {
        ;
      }
    }
    else {
      for (i = 0; (i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) && ([((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] == -1); i++) {
        ;
      }
      if (i == ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:1];
        return [[[JavaMathBigInteger alloc] initWithInt:-((JavaMathBigInteger *) NIL_CHK(val)).sign withInt:i + 1 withJavaLangIntegerArray:resDigits] autorelease];
      }
    }
  }
  else {
    for (i = 0; [((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] == 0; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
    }
  }
  [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] + ((JavaMathBigInteger *) NIL_CHK(val)).sign];
  for (i++; i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
  }
  return [[[JavaMathBigInteger alloc] initWithInt:-((JavaMathBigInteger *) NIL_CHK(val)).sign withInt:i withJavaLangIntegerArray:resDigits] autorelease];
}

+ (JavaMathBigInteger *)andWithJavaMathBigInteger:(JavaMathBigInteger *)val
                           withJavaMathBigInteger:(JavaMathBigInteger *)that {
  if (((JavaMathBigInteger *) NIL_CHK(that)).sign == 0 || ((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return [JavaMathBigInteger ZERO];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(that)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return val;
  }
  if ([((JavaMathBigInteger *) NIL_CHK(val)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return that;
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical andPositiveWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
    else {
      return [JavaMathLogical andDiffSignsWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
  else {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical andDiffSignsWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
    else if (((JavaMathBigInteger *) NIL_CHK(val)).numberLength > ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
      return [JavaMathLogical andNegativeWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
    else {
      return [JavaMathLogical andNegativeWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
  }
}

+ (JavaMathBigInteger *)andPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that {
  int resLength = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  int i = [JavaLangMath maxWithInt:[((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit] withInt:[((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit]];
  if (i >= resLength) {
    return [JavaMathBigInteger ZERO];
  }
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  for (; i < resLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)andDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative {
  int iPos = [((JavaMathBigInteger *) NIL_CHK(positive)) getFirstNonzeroDigit];
  int iNeg = [((JavaMathBigInteger *) NIL_CHK(negative)) getFirstNonzeroDigit];
  if (iNeg >= ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength) {
    return [JavaMathBigInteger ZERO];
  }
  int resLength = ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int i = [JavaLangMath maxWithInt:iPos withInt:iNeg];
  if (i == iNeg) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    i++;
  }
  int limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength];
  for (; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  if (i >= ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength) {
    for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    }
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)andNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter {
  int iLonger = [((JavaMathBigInteger *) NIL_CHK(longer)) getFirstNonzeroDigit];
  int iShorter = [((JavaMathBigInteger *) NIL_CHK(shorter)) getFirstNonzeroDigit];
  if (iLonger >= ((JavaMathBigInteger *) NIL_CHK(shorter)).numberLength) {
    return longer;
  }
  int resLength;
  IOSIntArray *resDigits;
  int i = [JavaLangMath maxWithInt:iShorter withInt:iLonger];
  int digit;
  if (iShorter > iLonger) {
    digit = -[((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i] & ~[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i];
  }
  else if (iShorter < iLonger) {
    digit = ~[((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i] & -[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i];
  }
  else {
    digit = -[((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i] & -[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i];
  }
  if (digit == 0) {
    for (i++; i < ((JavaMathBigInteger *) NIL_CHK(shorter)).numberLength && (digit = ~([((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i])) == 0; i++) ;
    if (digit == 0) {
      for (; i < ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength && (digit = ~[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i]) == 0; i++) ;
      if (digit == 0) {
        resLength = ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength + 1;
        resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:resLength - 1 withInt:1];
        JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
        return result;
      }
    }
  }
  resLength = ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength;
  resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-digit];
  for (i++; i < ((JavaMathBigInteger *) NIL_CHK(shorter)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  return result;
}

+ (JavaMathBigInteger *)andNotWithJavaMathBigInteger:(JavaMathBigInteger *)val
                              withJavaMathBigInteger:(JavaMathBigInteger *)that {
  if (((JavaMathBigInteger *) NIL_CHK(that)).sign == 0) {
    return val;
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return [JavaMathBigInteger ZERO];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(val)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [((JavaMathBigInteger *) NIL_CHK(that)) not__];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(that)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [JavaMathBigInteger ZERO];
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical andNotPositiveWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
    else {
      return [JavaMathLogical andNotPositiveNegativeWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
  else {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical andNotNegativePositiveWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
    else {
      return [JavaMathLogical andNotNegativeWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
}

+ (JavaMathBigInteger *)andNotPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that {
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:((JavaMathBigInteger *) NIL_CHK(val)).numberLength] autorelease];
  int limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  int i;
  for (i = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit]; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & ~[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)andNotPositiveNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                              withJavaMathBigInteger:(JavaMathBigInteger *)negative {
  int iNeg = [((JavaMathBigInteger *) NIL_CHK(negative)) getFirstNonzeroDigit];
  int iPos = [((JavaMathBigInteger *) NIL_CHK(positive)) getFirstNonzeroDigit];
  if (iNeg >= ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength) {
    return positive;
  }
  int resLength = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength];
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int i = iPos;
  for (; i < iNeg; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  if (i == iNeg) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i] & ([((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] - 1)];
    i++;
  }
  for (; i < resLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)andNotNegativePositiveWithJavaMathBigInteger:(JavaMathBigInteger *)negative
                                              withJavaMathBigInteger:(JavaMathBigInteger *)positive {
  int resLength;
  IOSIntArray *resDigits;
  int limit;
  int digit;
  int iNeg = [((JavaMathBigInteger *) NIL_CHK(negative)) getFirstNonzeroDigit];
  int iPos = [((JavaMathBigInteger *) NIL_CHK(positive)) getFirstNonzeroDigit];
  if (iNeg >= ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength) {
    return negative;
  }
  resLength = [JavaLangMath maxWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength];
  int i = iNeg;
  if (iPos > iNeg) {
    resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:iPos];
    for (; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
    }
    if (i == ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength) {
      for (i = iPos; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
      }
    }
  }
  else {
    digit = -[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] & ~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i];
    if (digit == 0) {
      limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength];
      for (i++; i < limit && (digit = ~([((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i])) == 0; i++) ;
      if (digit == 0) {
        for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength && (digit = ~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]) == 0; i++) ;
        for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength && (digit = ~[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]) == 0; i++) ;
        if (digit == 0) {
          resLength++;
          resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
          [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:resLength - 1 withInt:1];
          JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
          return result;
        }
      }
    }
    resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-digit];
    i++;
  }
  limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength];
  for (; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  return result;
}

+ (JavaMathBigInteger *)andNotNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                      withJavaMathBigInteger:(JavaMathBigInteger *)that {
  int iVal = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
  int iThat = [((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit];
  if (iVal >= ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
    return [JavaMathBigInteger ZERO];
  }
  int resLength = ((JavaMathBigInteger *) NIL_CHK(that)).numberLength;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int limit;
  int i = iVal;
  if (iVal < iThat) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:iThat];
    for (i++; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
    }
    if (i == ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
      for (; i < iThat; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
      }
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i] - 1];
    }
    else {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & ([((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i] - 1)];
    }
  }
  else if (iThat < iVal) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  else {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & ([((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i] - 1)];
  }
  limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  for (i++; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(that)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)orWithJavaMathBigInteger:(JavaMathBigInteger *)val
                          withJavaMathBigInteger:(JavaMathBigInteger *)that {
  if ([((JavaMathBigInteger *) NIL_CHK(that)) isEqual:[JavaMathBigInteger MINUS_ONE]] || [((JavaMathBigInteger *) NIL_CHK(val)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [JavaMathBigInteger MINUS_ONE];
  }
  if (((JavaMathBigInteger *) NIL_CHK(that)).sign == 0) {
    return val;
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return that;
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      if (((JavaMathBigInteger *) NIL_CHK(val)).numberLength > ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
        return [JavaMathLogical orPositiveWithJavaMathBigInteger:val withJavaMathBigInteger:that];
      }
      else {
        return [JavaMathLogical orPositiveWithJavaMathBigInteger:that withJavaMathBigInteger:val];
      }
    }
    else {
      return [JavaMathLogical orDiffSignsWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
  else {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical orDiffSignsWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
    else if ([((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit] > [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit]) {
      return [JavaMathLogical orNegativeWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
    else {
      return [JavaMathLogical orNegativeWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
}

+ (JavaMathBigInteger *)orPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                  withJavaMathBigInteger:(JavaMathBigInteger *)shorter {
  int resLength = ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int i = [JavaLangMath minWithInt:[((JavaMathBigInteger *) NIL_CHK(longer)) getFirstNonzeroDigit] withInt:[((JavaMathBigInteger *) NIL_CHK(shorter)) getFirstNonzeroDigit]];
  for (i = 0; i < ((JavaMathBigInteger *) NIL_CHK(shorter)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i]];
  }
  for (; i < resLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  return result;
}

+ (JavaMathBigInteger *)orNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                  withJavaMathBigInteger:(JavaMathBigInteger *)that {
  int iThat = [((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit];
  int iVal = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
  int i;
  if (iVal >= ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
    return that;
  }
  else if (iThat >= ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
    return val;
  }
  int resLength = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  if (iThat == iVal) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:iVal withInt:-(-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:iVal] | -[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:iVal])];
    i = iVal;
  }
  else {
    for (i = iThat; i < iVal; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
    }
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i] & ([((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] - 1)];
  }
  for (i++; i < resLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] & [((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)orDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                   withJavaMathBigInteger:(JavaMathBigInteger *)negative {
  int iNeg = [((JavaMathBigInteger *) NIL_CHK(negative)) getFirstNonzeroDigit];
  int iPos = [((JavaMathBigInteger *) NIL_CHK(positive)) getFirstNonzeroDigit];
  int i;
  int limit;
  if (iPos >= ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength) {
    return negative;
  }
  int resLength = ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  if (iNeg < iPos) {
    for (i = iNeg; i < iPos; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
    }
  }
  else if (iPos < iNeg) {
    i = iPos;
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:iNeg];
    for (i++; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    }
    if (i != ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~(-[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i])];
    }
    else {
      for (; i < iNeg; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
      }
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] - 1];
    }
    i++;
  }
  else {
    i = iPos;
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-(-[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] | [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i])];
    i++;
  }
  limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength];
  for (; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] & ~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)xorWithJavaMathBigInteger:(JavaMathBigInteger *)val
                           withJavaMathBigInteger:(JavaMathBigInteger *)that {
  if (((JavaMathBigInteger *) NIL_CHK(that)).sign == 0) {
    return val;
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return that;
  }
  if ([((JavaMathBigInteger *) NIL_CHK(that)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [((JavaMathBigInteger *) NIL_CHK(val)) not__];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(val)) isEqual:[JavaMathBigInteger MINUS_ONE]]) {
    return [((JavaMathBigInteger *) NIL_CHK(that)) not__];
  }
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      if (((JavaMathBigInteger *) NIL_CHK(val)).numberLength > ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
        return [JavaMathLogical xorPositiveWithJavaMathBigInteger:val withJavaMathBigInteger:that];
      }
      else {
        return [JavaMathLogical xorPositiveWithJavaMathBigInteger:that withJavaMathBigInteger:val];
      }
    }
    else {
      return [JavaMathLogical xorDiffSignsWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
  else {
    if (((JavaMathBigInteger *) NIL_CHK(that)).sign > 0) {
      return [JavaMathLogical xorDiffSignsWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
    else if ([((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit] > [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit]) {
      return [JavaMathLogical xorNegativeWithJavaMathBigInteger:that withJavaMathBigInteger:val];
    }
    else {
      return [JavaMathLogical xorNegativeWithJavaMathBigInteger:val withJavaMathBigInteger:that];
    }
  }
}

+ (JavaMathBigInteger *)xorPositiveWithJavaMathBigInteger:(JavaMathBigInteger *)longer
                                   withJavaMathBigInteger:(JavaMathBigInteger *)shorter {
  int resLength = ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int i = [JavaLangMath minWithInt:[((JavaMathBigInteger *) NIL_CHK(longer)) getFirstNonzeroDigit] withInt:[((JavaMathBigInteger *) NIL_CHK(shorter)) getFirstNonzeroDigit]];
  for (; i < ((JavaMathBigInteger *) NIL_CHK(shorter)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i] ^ [((IOSIntArray *) NIL_CHK(shorter.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(longer)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(longer.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)xorNegativeWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                   withJavaMathBigInteger:(JavaMathBigInteger *)that {
  int resLength = [JavaLangMath maxWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int iVal = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
  int iThat = [((JavaMathBigInteger *) NIL_CHK(that)) getFirstNonzeroDigit];
  int i = iThat;
  int limit;
  if (iVal == iThat) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] ^ -[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  else {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength withInt:iVal];
    for (i++; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
    }
    if (i == ((JavaMathBigInteger *) NIL_CHK(that)).numberLength) {
      for (; i < iVal; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
      }
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] - 1];
    }
    else {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] ^ ~[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
    }
  }
  limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(that)).numberLength];
  for (i++; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] ^ [((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(that)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(that.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)xorDiffSignsWithJavaMathBigInteger:(JavaMathBigInteger *)positive
                                    withJavaMathBigInteger:(JavaMathBigInteger *)negative {
  int resLength = [JavaLangMath maxWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength];
  IOSIntArray *resDigits;
  int iNeg = [((JavaMathBigInteger *) NIL_CHK(negative)) getFirstNonzeroDigit];
  int iPos = [((JavaMathBigInteger *) NIL_CHK(positive)) getFirstNonzeroDigit];
  int i;
  int limit;
  if (iNeg < iPos) {
    resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
    i = iNeg;
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:iPos];
    for (i++; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
    }
    if (i == ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength) {
      for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
      }
    }
  }
  else if (iPos < iNeg) {
    resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
    i = iPos;
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:iNeg];
    for (i++; i < limit; i++) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
    }
    if (i == iNeg) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~([((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i] ^ -[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i])];
      i++;
    }
    else {
      for (; i < iNeg; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
      }
      for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength; i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
      }
    }
  }
  else {
    int digit;
    i = iNeg;
    digit = [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i] ^ -[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i];
    if (digit == 0) {
      limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength];
      for (i++; i < limit && (digit = [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i] ^ ~[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]) == 0; i++) ;
      if (digit == 0) {
        for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength && (digit = ~[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]) == 0; i++) ;
        for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength && (digit = ~[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]) == 0; i++) ;
        if (digit == 0) {
          resLength = resLength + 1;
          resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
          [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:resLength - 1 withInt:1];
          JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
          return result;
        }
      }
    }
    resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-digit];
    i++;
  }
  limit = [JavaLangMath minWithInt:((JavaMathBigInteger *) NIL_CHK(negative)).numberLength withInt:((JavaMathBigInteger *) NIL_CHK(positive)).numberLength];
  for (; i < limit; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:~(~[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i] ^ [((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i])];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(positive)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(positive.digits)) intAtIndex:i]];
  }
  for (; i < ((JavaMathBigInteger *) NIL_CHK(negative)).numberLength; i++) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(negative.digits)) intAtIndex:i]];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
