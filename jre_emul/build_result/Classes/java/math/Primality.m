//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Primality.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSBooleanArray.h"
#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Math.h"
#import "java/lang/System.h"
#import "java/math/BigInteger.h"
#import "java/math/Division.h"
#import "java/math/Elementary.h"
#import "java/math/Primality.h"
#import "java/util/Arrays.h"
#import "java/util/Random.h"

@implementation JavaMathPrimality

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_primes_ name:@"JavaMathPrimality_primes_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_BIprimes_ name:@"JavaMathPrimality_BIprimes_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_BITS_ name:@"JavaMathPrimality_BITS_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathPrimality_offsetPrimes_ name:@"JavaMathPrimality_offsetPrimes_"]];
  return result;
}

static IOSIntArray * JavaMathPrimality_primes_;
static IOSObjectArray * JavaMathPrimality_BIprimes_;
static IOSIntArray * JavaMathPrimality_BITS_;
static IOSObjectArray * JavaMathPrimality_offsetPrimes_;

+ (IOSIntArray *)primes {
  return JavaMathPrimality_primes_;
}

+ (IOSObjectArray *)BIprimes {
  return JavaMathPrimality_BIprimes_;
}

+ (IOSIntArray *)BITS {
  return JavaMathPrimality_BITS_;
}

+ (IOSObjectArray *)offsetPrimes {
  return JavaMathPrimality_offsetPrimes_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (JavaMathBigInteger *)nextProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n {
  int i, j;
  int certainty;
  int gapSize = 1024;
  IOSIntArray *modules = [[[IOSIntArray alloc] initWithLength:(int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]] autorelease];
  IOSBooleanArray *isDivisible = [[[IOSBooleanArray alloc] initWithLength:gapSize] autorelease];
  JavaMathBigInteger *startPoint;
  JavaMathBigInteger *probPrime;
  if ((((JavaMathBigInteger *) NIL_CHK(n)).numberLength == 1) && ([((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0] >= 0) && ([((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0] < [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:(int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count] - 1])) {
    for (i = 0; [((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0] >= [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]; i++) {
      ;
    }
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathPrimality_BIprimes_)) objectAtIndex:i]);
  }
  startPoint = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:((JavaMathBigInteger *) NIL_CHK(n)).numberLength withJavaLangIntegerArray:[[[IOSIntArray alloc] initWithLength:((JavaMathBigInteger *) NIL_CHK(n)).numberLength + 1] autorelease]] autorelease];
  [JavaLangSystem arraycopyWithId:((JavaMathBigInteger *) NIL_CHK(n)).digits withInt:0 withId:((JavaMathBigInteger *) NIL_CHK(startPoint)).digits withInt:0 withInt:((JavaMathBigInteger *) NIL_CHK(n)).numberLength];
  if ([((JavaMathBigInteger *) NIL_CHK(n)) testBitWithInt:0]) {
    [JavaMathElementary inplaceAddWithJavaMathBigInteger:startPoint withInt:2];
  }
  else {
    [((IOSIntArray *) NIL_CHK(startPoint.digits)) replaceIntAtIndex:0 withInt:[((JavaMathBigInteger *) NIL_CHK(startPoint)).digits intAtIndex:0] | 1];
  }
  j = [((JavaMathBigInteger *) NIL_CHK(startPoint)) bitLength];
  for (certainty = 2; j < [((IOSIntArray *) NIL_CHK(JavaMathPrimality_BITS_)) intAtIndex:certainty]; certainty++) {
    ;
  }
  for (i = 0; i < (int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]; i++) {
    [((IOSIntArray *) NIL_CHK(modules)) replaceIntAtIndex:i withInt:[JavaMathDivision remainderWithJavaMathBigInteger:startPoint withInt:[((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]] - gapSize];
  }
  while (YES) {
    [JavaUtilArrays fillWithJavaLangBooleanArray:isDivisible withBOOL:NO];
    for (i = 0; i < (int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]; i++) {
      [((IOSIntArray *) NIL_CHK(modules)) replaceIntAtIndex:i withInt:([((IOSIntArray *) NIL_CHK(modules)) intAtIndex:i] + gapSize) % [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]];
      j = ([((IOSIntArray *) NIL_CHK(modules)) intAtIndex:i] == 0) ? 0 : ([((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i] - [((IOSIntArray *) NIL_CHK(modules)) intAtIndex:i]);
      for (; j < gapSize; j += [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]) {
        [((IOSBooleanArray *) NIL_CHK(isDivisible)) replaceBooleanAtIndex:j withBoolean:YES];
      }
    }
    for (j = 0; j < gapSize; j++) {
      if (![((IOSBooleanArray *) NIL_CHK(isDivisible)) booleanAtIndex:j]) {
        probPrime = [((JavaMathBigInteger *) NIL_CHK(startPoint)) copy__];
        [JavaMathElementary inplaceAddWithJavaMathBigInteger:probPrime withInt:j];
        if ([JavaMathPrimality millerRabinWithJavaMathBigInteger:probPrime withInt:certainty]) {
          return probPrime;
        }
      }
    }
    [JavaMathElementary inplaceAddWithJavaMathBigInteger:startPoint withInt:gapSize];
  }
}

+ (JavaMathBigInteger *)consBigIntegerWithInt:(int)bitLength
                                      withInt:(int)certainty
                           withJavaUtilRandom:(JavaUtilRandom *)rnd {
  if (bitLength <= 10) {
    IOSIntArray *rp = ((IOSIntArray *) [((IOSObjectArray *) NIL_CHK(JavaMathPrimality_offsetPrimes_)) objectAtIndex:bitLength]);
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathPrimality_BIprimes_)) objectAtIndex:[((IOSIntArray *) NIL_CHK(rp)) intAtIndex:0] + [((JavaUtilRandom *) NIL_CHK(rnd)) nextIntWithInt:[((IOSIntArray *) NIL_CHK(rp)) intAtIndex:1]]]);
  }
  int shiftCount = (-bitLength) & 31;
  int last = (bitLength + 31) >> 5;
  JavaMathBigInteger *n = [[[JavaMathBigInteger alloc] initWithInt:1 withInt:last withJavaLangIntegerArray:[[[IOSIntArray alloc] initWithLength:last] autorelease]] autorelease];
  last--;
  do {
    for (int i = 0; i < ((JavaMathBigInteger *) NIL_CHK(n)).numberLength; i++) {
      [((IOSIntArray *) NIL_CHK(n.digits)) replaceIntAtIndex:i withInt:[((JavaUtilRandom *) NIL_CHK(rnd)) nextInt]];
    }
    [((IOSIntArray *) NIL_CHK(n.digits)) replaceIntAtIndex:last withInt:[((JavaMathBigInteger *) NIL_CHK(n)).digits intAtIndex:last] | (int) -0x7fffffff - 1];
    [((IOSIntArray *) NIL_CHK(n.digits)) replaceIntAtIndex:last withInt:(int) (((unsigned int) [((JavaMathBigInteger *) NIL_CHK(n)).digits intAtIndex:last]) >> shiftCount)];
    [((IOSIntArray *) NIL_CHK(n.digits)) replaceIntAtIndex:0 withInt:[((JavaMathBigInteger *) NIL_CHK(n)).digits intAtIndex:0] | 1];
  }
  while (![JavaMathPrimality isProbablePrimeWithJavaMathBigInteger:n withInt:certainty]);
  return n;
}

+ (BOOL)isProbablePrimeWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                      withInt:(int)certainty {
  if ((certainty <= 0) || ((((JavaMathBigInteger *) NIL_CHK(n)).numberLength == 1) && ([((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0] == 2))) {
    return YES;
  }
  if (![((JavaMathBigInteger *) NIL_CHK(n)) testBitWithInt:0]) {
    return NO;
  }
  if ((((JavaMathBigInteger *) NIL_CHK(n)).numberLength == 1) && (([((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0] & 0XFFFFFC00) == 0)) {
    return ([JavaUtilArrays binarySearchWithJavaLangIntegerArray:JavaMathPrimality_primes_ withInt:[((IOSIntArray *) NIL_CHK(n.digits)) intAtIndex:0]] >= 0);
  }
  for (int i = 1; i < (int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]; i++) {
    if ([JavaMathDivision remainderArrayByIntWithJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(n)).digits withInt:((JavaMathBigInteger *) NIL_CHK(n)).numberLength withInt:[((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]] == 0) {
      return NO;
    }
  }
  int i;
  int bitLength = [((JavaMathBigInteger *) NIL_CHK(n)) bitLength];
  for (i = 2; bitLength < [((IOSIntArray *) NIL_CHK(JavaMathPrimality_BITS_)) intAtIndex:i]; i++) {
    ;
  }
  certainty = [JavaLangMath minWithInt:i withInt:1 + ((certainty - 1) >> 1)];
  return [JavaMathPrimality millerRabinWithJavaMathBigInteger:n withInt:certainty];
}

+ (BOOL)millerRabinWithJavaMathBigInteger:(JavaMathBigInteger *)n
                                  withInt:(int)t {
  JavaMathBigInteger *x;
  JavaMathBigInteger *y;
  JavaMathBigInteger *n_minus_1 = [((JavaMathBigInteger *) NIL_CHK(n)) subtractWithJavaMathBigInteger:[JavaMathBigInteger ONE]];
  int bitLength = [((JavaMathBigInteger *) NIL_CHK(n_minus_1)) bitLength];
  int k = [((JavaMathBigInteger *) NIL_CHK(n_minus_1)) getLowestSetBit];
  JavaMathBigInteger *q = [((JavaMathBigInteger *) NIL_CHK(n_minus_1)) shiftRightWithInt:k];
  JavaUtilRandom *rnd = [[[JavaUtilRandom alloc] init] autorelease];
  for (int i = 0; i < t; i++) {
    if (i < (int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]) {
      x = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathPrimality_BIprimes_)) objectAtIndex:i]);
    }
    else {
      do {
        x = [[[JavaMathBigInteger alloc] initWithInt:bitLength withJavaUtilRandom:rnd] autorelease];
      }
      while (([((JavaMathBigInteger *) NIL_CHK(x)) compareToWithId:n] >= JavaMathBigInteger_EQUALS) || (((JavaMathBigInteger *) NIL_CHK(x)).sign == 0) || [((JavaMathBigInteger *) NIL_CHK(x)) isOne]);
    }
    y = [((JavaMathBigInteger *) NIL_CHK(x)) modPowWithJavaMathBigInteger:q withJavaMathBigInteger:n];
    if ([((JavaMathBigInteger *) NIL_CHK(y)) isOne] || [((JavaMathBigInteger *) NIL_CHK(y)) isEqual:n_minus_1]) {
      continue;
    }
    for (int j = 1; j < k; j++) {
      if ([((JavaMathBigInteger *) NIL_CHK(y)) isEqual:n_minus_1]) {
        continue;
      }
      y = [[((JavaMathBigInteger *) NIL_CHK(y)) multiplyWithJavaMathBigInteger:y] modWithJavaMathBigInteger:n];
      if ([((JavaMathBigInteger *) NIL_CHK(y)) isOne]) {
        return NO;
      }
    }
    if (![((JavaMathBigInteger *) NIL_CHK(y)) isEqual:n_minus_1]) {
      return NO;
    }
  }
  return YES;
}

+ (void)initialize {
  if (self == [JavaMathPrimality class]) {
    JreOperatorRetainedAssign(&JavaMathPrimality_primes_, [IOSIntArray arrayWithInts:(int[]){ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021 } count:172]);
    JreOperatorRetainedAssign(&JavaMathPrimality_BIprimes_, [[[IOSObjectArray alloc] initWithLength:(int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count] type:[IOSClass classWithClass:[JavaMathBigInteger class]]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathPrimality_BITS_, [IOSIntArray arrayWithInts:(int[]){ 0, 0, 1854, 1233, 927, 747, 627, 543, 480, 431, 393, 361, 335, 314, 295, 279, 265, 253, 242, 232, 223, 216, 181, 169, 158, 150, 145, 140, 136, 132, 127, 123, 119, 114, 110, 105, 101, 96, 92, 87, 83, 78, 73, 69, 64, 59, 54, 49, 44, 38, 32, 26, 1 } count:53]);
    JreOperatorRetainedAssign(&JavaMathPrimality_offsetPrimes_, [IOSObjectArray arrayWithObjects:(id[]){ nil, nil, [IOSIntArray arrayWithInts:(int[]){ 0, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 2, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 4, 2 } count:2], [IOSIntArray arrayWithInts:(int[]){ 6, 5 } count:2], [IOSIntArray arrayWithInts:(int[]){ 11, 7 } count:2], [IOSIntArray arrayWithInts:(int[]){ 18, 13 } count:2], [IOSIntArray arrayWithInts:(int[]){ 31, 23 } count:2], [IOSIntArray arrayWithInts:(int[]){ 54, 43 } count:2], [IOSIntArray arrayWithInts:(int[]){ 97, 75 } count:2] } count:11 type:[IOSClass classWithClass:[IOSIntArray class]]]);
    {
      for (int i = 0; i < (int) [((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) count]; i++) {
        [((IOSObjectArray *) NIL_CHK(JavaMathPrimality_BIprimes_)) replaceObjectAtIndex:i withObject:[JavaMathBigInteger valueOfWithLongInt:[((IOSIntArray *) NIL_CHK(JavaMathPrimality_primes_)) intAtIndex:i]]];
      }
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
