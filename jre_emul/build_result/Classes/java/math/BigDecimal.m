//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BigDecimal.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSCharArray.h"
#import "IOSIntArray.h"
#import "IOSLongArray.h"
#import "IOSObjectArray.h"
#import "java/lang/ArithmeticException.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Double.h"
#import "java/lang/Float.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/Math.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/NumberFormatException.h"
#import "java/lang/StringBuilder.h"
#import "java/math/BigDecimal.h"
#import "java/math/BigInteger.h"
#import "java/math/Conversion.h"
#import "java/math/MathContext.h"
#import "java/math/Multiplication.h"
#import "java/math/RoundingMode.h"

@implementation JavaMathBigDecimal

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ZERO_ name:@"JavaMathBigDecimal_ZERO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ONE_ name:@"JavaMathBigDecimal_ONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_TEN_ name:@"JavaMathBigDecimal_TEN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_FIVE_POW_ name:@"JavaMathBigDecimal_FIVE_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_TEN_POW_ name:@"JavaMathBigDecimal_TEN_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_TEN_POW_ name:@"JavaMathBigDecimal_LONG_TEN_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_FIVE_POW_ name:@"JavaMathBigDecimal_LONG_FIVE_POW_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_ name:@"JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_ name:@"JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_BI_SCALED_BY_ZERO_ name:@"JavaMathBigDecimal_BI_SCALED_BY_ZERO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_ZERO_SCALED_BY_ name:@"JavaMathBigDecimal_ZERO_SCALED_BY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigDecimal_CH_ZEROS_ name:@"JavaMathBigDecimal_CH_ZEROS_"]];
  return result;
}

static JavaMathBigDecimal * JavaMathBigDecimal_ZERO_;
static JavaMathBigDecimal * JavaMathBigDecimal_ONE_;
static JavaMathBigDecimal * JavaMathBigDecimal_TEN_;
static IOSObjectArray * JavaMathBigDecimal_FIVE_POW_;
static IOSObjectArray * JavaMathBigDecimal_TEN_POW_;
static IOSLongArray * JavaMathBigDecimal_LONG_TEN_POW_;
static IOSLongArray * JavaMathBigDecimal_LONG_FIVE_POW_;
static IOSIntArray * JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_;
static IOSIntArray * JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_;
static IOSObjectArray * JavaMathBigDecimal_BI_SCALED_BY_ZERO_;
static IOSObjectArray * JavaMathBigDecimal_ZERO_SCALED_BY_;
static IOSCharArray * JavaMathBigDecimal_CH_ZEROS_;

- (NSString *)toStringImage {
  return toStringImage_;
}
- (void)setToStringImage:(NSString *)toStringImage {
  JreOperatorRetainedAssign(&toStringImage_, toStringImage);
}
@synthesize toStringImage = toStringImage_;
@synthesize hashCode_ = hashCode__;
- (JavaMathBigInteger *)intVal {
  return intVal_;
}
- (void)setIntVal:(JavaMathBigInteger *)intVal {
  JreOperatorRetainedAssign(&intVal_, intVal);
}
@synthesize intVal = intVal_;
@synthesize bitLength_ = bitLength__;
@synthesize smallValue = smallValue_;
@synthesize scale_ = scale__;
@synthesize precision_ = precision__;

+ (JavaMathBigDecimal *)ZERO {
  return JavaMathBigDecimal_ZERO_;
}

+ (JavaMathBigDecimal *)ONE {
  return JavaMathBigDecimal_ONE_;
}

+ (JavaMathBigDecimal *)TEN {
  return JavaMathBigDecimal_TEN_;
}

+ (int)ROUND_UP {
  return JavaMathBigDecimal_ROUND_UP;
}

+ (int)ROUND_DOWN {
  return JavaMathBigDecimal_ROUND_DOWN;
}

+ (int)ROUND_CEILING {
  return JavaMathBigDecimal_ROUND_CEILING;
}

+ (int)ROUND_FLOOR {
  return JavaMathBigDecimal_ROUND_FLOOR;
}

+ (int)ROUND_HALF_UP {
  return JavaMathBigDecimal_ROUND_HALF_UP;
}

+ (int)ROUND_HALF_DOWN {
  return JavaMathBigDecimal_ROUND_HALF_DOWN;
}

+ (int)ROUND_HALF_EVEN {
  return JavaMathBigDecimal_ROUND_HALF_EVEN;
}

+ (int)ROUND_UNNECESSARY {
  return JavaMathBigDecimal_ROUND_UNNECESSARY;
}

+ (IOSObjectArray *)FIVE_POW {
  return JavaMathBigDecimal_FIVE_POW_;
}

+ (IOSObjectArray *)TEN_POW {
  return JavaMathBigDecimal_TEN_POW_;
}

+ (IOSLongArray *)LONG_TEN_POW {
  return JavaMathBigDecimal_LONG_TEN_POW_;
}

+ (IOSLongArray *)LONG_FIVE_POW {
  return JavaMathBigDecimal_LONG_FIVE_POW_;
}

+ (IOSIntArray *)LONG_FIVE_POW_BIT_LENGTH {
  return JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_;
}

+ (IOSIntArray *)LONG_TEN_POW_BIT_LENGTH {
  return JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_;
}

+ (IOSObjectArray *)BI_SCALED_BY_ZERO {
  return JavaMathBigDecimal_BI_SCALED_BY_ZERO_;
}

+ (IOSObjectArray *)ZERO_SCALED_BY {
  return JavaMathBigDecimal_ZERO_SCALED_BY_;
}

+ (IOSCharArray *)CH_ZEROS {
  return JavaMathBigDecimal_CH_ZEROS_;
}

- (id)initJavaMathBigDecimalWithLongInt:(long long int)smallValue
                                withInt:(int)scale_ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&toStringImage_, nil);
    hashCode__ = 0;
    precision__ = 0;
    self.smallValue = smallValue;
    self.scale_ = scale_;
    self.bitLength_ = [JavaMathBigDecimal bitLengthWithLongInt:smallValue];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLongInt:(long long int)smallValue
              withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithLongInt:smallValue withInt:scale_];
}

- (id)initJavaMathBigDecimalWithInt:(int)smallValue
                            withInt:(int)scale_ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&toStringImage_, nil);
    hashCode__ = 0;
    precision__ = 0;
    self.smallValue = smallValue;
    self.scale_ = scale_;
    self.bitLength_ = [JavaMathBigDecimal bitLengthWithInt:smallValue];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)smallValue
          withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithInt:smallValue withInt:scale_];
}

- (id)initJavaMathBigDecimalWithJavaLangCharacterArray:(IOSCharArray *)inArg
                                               withInt:(int)offset
                                               withInt:(int)len {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&toStringImage_, nil);
    hashCode__ = 0;
    precision__ = 0;
    int begin = offset;
    int last = offset + (len - 1);
    NSString *scaleString = nil;
    JavaLangStringBuilder *unscaledBuffer;
    long long int newScale;
    if (inArg == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    if ((last >= (int) [((IOSCharArray *) NIL_CHK(inArg)) count]) || (offset < 0) || (len <= 0) || (last < 0)) {
      @throw [[[JavaLangNumberFormatException alloc] init] autorelease];
    }
    unscaledBuffer = [[[JavaLangStringBuilder alloc] initWithInt:len] autorelease];
    int bufLength = 0;
    if ((offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == '+')) {
      offset++;
      begin++;
    }
    int counter = 0;
    BOOL wasNonZero = NO;
    for (; (offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != '.') && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != 'e') && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != 'E'); offset++) {
      if (!wasNonZero) {
        if ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == '0') {
          counter++;
        }
        else {
          wasNonZero = YES;
        }
      }
    }
    [((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) appendWithJavaLangCharacterArray:inArg withInt:begin withInt:offset - begin];
    bufLength += offset - begin;
    if ((offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == '.')) {
      offset++;
      begin = offset;
      for (; (offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != 'e') && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != 'E'); offset++) {
        if (!wasNonZero) {
          if ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == '0') {
            counter++;
          }
          else {
            wasNonZero = YES;
          }
        }
      }
      scale__ = offset - begin;
      bufLength += scale__;
      [((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) appendWithJavaLangCharacterArray:inArg withInt:begin withInt:scale__];
    }
    else {
      scale__ = 0;
    }
    if ((offset <= last) && (([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == 'e') || ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == 'E'))) {
      offset++;
      begin = offset;
      if ((offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] == '+')) {
        offset++;
        if ((offset <= last) && ([((IOSCharArray *) NIL_CHK(inArg)) charAtIndex:offset] != '-')) {
          begin++;
        }
      }
      scaleString = [NSString valueOfChars:inArg offset:begin count:last + 1 - begin];
      newScale = (long long int) scale__ - [JavaLangInteger parseIntWithNSString:scaleString];
      scale__ = (int) newScale;
      if (newScale != scale__) {
        @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Scale out of range."] autorelease];
      }
    }
    if (bufLength < 19) {
      smallValue_ = [JavaLangLong parseLongWithNSString:[((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) description]];
      bitLength__ = [JavaMathBigDecimal bitLengthWithLongInt:smallValue_];
    }
    else {
      [self setUnscaledValueWithJavaMathBigInteger:[[[JavaMathBigInteger alloc] initWithNSString:[((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) description]] autorelease]];
    }
    precision__ = [((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) sequenceLength] - counter;
    if ([((JavaLangStringBuilder *) NIL_CHK(unscaledBuffer)) charAtWithInt:0] == '-') {
      precision__--;
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangCharacterArray:(IOSCharArray *)inArg
                             withInt:(int)offset
                             withInt:(int)len {
  return [self initJavaMathBigDecimalWithJavaLangCharacterArray:inArg withInt:offset withInt:len];
}

- (id)initWithJavaLangCharacterArray:(IOSCharArray *)inArg
                             withInt:(int)offset
                             withInt:(int)len
             withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithJavaLangCharacterArray:inArg withInt:offset withInt:len])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangCharacterArray:(IOSCharArray *)inArg {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithJavaLangCharacterArray:inArg withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(inArg)) count]]);
}

- (id)initWithJavaLangCharacterArray:(IOSCharArray *)inArg
             withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithJavaLangCharacterArray:inArg withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(inArg)) count]])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithJavaLangCharacterArray:[NIL_CHK(val) toCharArray] withInt:0 withInt:[NIL_CHK(val) length]]);
}

- (id)initWithNSString:(NSString *)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithJavaLangCharacterArray:[NIL_CHK(val) toCharArray] withInt:0 withInt:[NIL_CHK(val) length]])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithDouble:(double)val {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&toStringImage_, nil);
    hashCode__ = 0;
    precision__ = 0;
    if ([JavaLangDouble isInfiniteWithDouble:val] || [JavaLangDouble isNaNWithDouble:val]) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Infinite or NaN"] autorelease];
    }
    long long int bits = [JavaLangDouble doubleToLongBitsWithDouble:val];
    long long int mantisa;
    int trailingZeros;
    scale__ = 1075 - (int) ((bits >> 52) & (long long) 0x7FFLL);
    mantisa = (scale__ == 1075) ? (bits & (long long) 0xFFFFFFFFFFFFFLL) << 1 : (bits & (long long) 0xFFFFFFFFFFFFFLL) | (long long) 0x10000000000000LL;
    if (mantisa == 0) {
      scale__ = 0;
      precision__ = 1;
    }
    if (scale__ > 0) {
      trailingZeros = [JavaLangMath minWithInt:scale__ withInt:[JavaLangLong numberOfTrailingZerosWithLongInt:mantisa]];
      mantisa = (long long) (((unsigned long long) mantisa) >> trailingZeros);
      scale__ -= trailingZeros;
    }
    if ((bits >> 63) != 0) {
      mantisa = -mantisa;
    }
    int mantisaBits = [JavaMathBigDecimal bitLengthWithLongInt:mantisa];
    if (scale__ < 0) {
      bitLength__ = mantisaBits == 0 ? 0 : mantisaBits - scale__;
      if (bitLength__ < 64) {
        smallValue_ = mantisa << (-scale__);
      }
      else {
        JreOperatorRetainedAssign(&intVal_, [[JavaMathBigInteger valueOfWithLongInt:mantisa] shiftLeftWithInt:-scale__]);
      }
      scale__ = 0;
    }
    else if (scale__ > 0) {
      if (scale__ < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_)) count] && mantisaBits + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_)) intAtIndex:scale__] < 64) {
        smallValue_ = mantisa * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_)) longAtIndex:scale__];
        bitLength__ = [JavaMathBigDecimal bitLengthWithLongInt:smallValue_];
      }
      else {
        [self setUnscaledValueWithJavaMathBigInteger:[JavaMathMultiplication multiplyByFivePowWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:mantisa] withInt:scale__]];
      }
    }
    else {
      smallValue_ = mantisa;
      bitLength__ = mantisaBits;
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithDouble:(double)val {
  return [self initJavaMathBigDecimalWithDouble:val];
}

- (id)initWithDouble:(double)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithDouble:val])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithJavaMathBigInteger:val withInt:0]);
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [self initJavaMathBigDecimalWithJavaMathBigInteger:val];
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)val
         withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithJavaMathBigInteger:val])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                                           withInt:(int)scale_ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&toStringImage_, nil);
    hashCode__ = 0;
    precision__ = 0;
    if (unscaledVal == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.scale_ = scale_;
    [self setUnscaledValueWithJavaMathBigInteger:unscaledVal];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                         withInt:(int)scale_ {
  return [self initJavaMathBigDecimalWithJavaMathBigInteger:unscaledVal withInt:scale_];
}

- (id)initWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledVal
                         withInt:(int)scale_
         withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithJavaMathBigInteger:unscaledVal withInt:scale_])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithInt:val withInt:0]);
}

- (id)initWithInt:(int)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithInt:val withInt:0])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaMathBigDecimalWithLongInt:(long long int)val {
  return JreMemDebugAdd([self initJavaMathBigDecimalWithLongInt:val withInt:0]);
}

- (id)initWithLongInt:(long long int)val {
  return [self initJavaMathBigDecimalWithLongInt:val];
}

- (id)initWithLongInt:(long long int)val
withJavaMathMathContext:(JavaMathMathContext *)mc {
  if ((self = [self initJavaMathBigDecimalWithLongInt:val])) {
    [self inplaceRoundWithJavaMathMathContext:mc];
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaMathBigDecimal *)valueOfWithLongInt:(long long int)unscaledVal
                                   withInt:(int)scale_ {
  if (scale_ == 0) {
    return [JavaMathBigDecimal valueOfWithLongInt:unscaledVal];
  }
  if ((unscaledVal == 0) && (scale_ >= 0) && (scale_ < (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_ZERO_SCALED_BY_)) count])) {
    return ((JavaMathBigDecimal *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_ZERO_SCALED_BY_)) objectAtIndex:scale_]);
  }
  return [[[JavaMathBigDecimal alloc] initWithLongInt:unscaledVal withInt:scale_] autorelease];
}

+ (JavaMathBigDecimal *)valueOfWithLongInt:(long long int)unscaledVal {
  if ((unscaledVal >= 0) && (unscaledVal < JavaMathBigDecimal_BI_SCALED_BY_ZERO_LENGTH)) {
    return ((JavaMathBigDecimal *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_BI_SCALED_BY_ZERO_)) objectAtIndex:(int) unscaledVal]);
  }
  return [[[JavaMathBigDecimal alloc] initWithLongInt:unscaledVal withInt:0] autorelease];
}

+ (JavaMathBigDecimal *)valueOfWithDouble:(double)val {
  if ([JavaLangDouble isInfiniteWithDouble:val] || [JavaLangDouble isNaNWithDouble:val]) {
    @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Infinite or NaN"] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithNSString:[JavaLangDouble toStringWithDouble:val]] autorelease];
}

- (JavaMathBigDecimal *)addWithJavaMathBigDecimal:(JavaMathBigDecimal *)augend {
  int diffScale = self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(augend)).scale_;
  if ([self isZero]) {
    if (diffScale <= 0) {
      return augend;
    }
    if ([((JavaMathBigDecimal *) NIL_CHK(augend)) isZero]) {
      return self;
    }
  }
  else if ([((JavaMathBigDecimal *) NIL_CHK(augend)) isZero]) {
    if (diffScale >= 0) {
      return self;
    }
  }
  if (diffScale == 0) {
    if ([JavaLangMath maxWithInt:self.bitLength_ withInt:((JavaMathBigDecimal *) NIL_CHK(augend)).bitLength_] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue + ((JavaMathBigDecimal *) NIL_CHK(augend)).smallValue withInt:self.scale_];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] addWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(augend)) getUnscaledValue]] withInt:self.scale_] autorelease];
  }
  else if (diffScale > 0) {
    return [JavaMathBigDecimal addAndMult10WithJavaMathBigDecimal:self withJavaMathBigDecimal:augend withInt:diffScale];
  }
  else {
    return [JavaMathBigDecimal addAndMult10WithJavaMathBigDecimal:augend withJavaMathBigDecimal:self withInt:-diffScale];
  }
}

+ (JavaMathBigDecimal *)addAndMult10WithJavaMathBigDecimal:(JavaMathBigDecimal *)thisValue
                                    withJavaMathBigDecimal:(JavaMathBigDecimal *)augend
                                                   withInt:(int)diffScale {
  if (diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:((JavaMathBigDecimal *) NIL_CHK(thisValue)).bitLength_ withInt:((JavaMathBigDecimal *) NIL_CHK(augend)).bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:diffScale]] + 1 < 64) {
    return [JavaMathBigDecimal valueOfWithLongInt:((JavaMathBigDecimal *) NIL_CHK(thisValue)).smallValue + ((JavaMathBigDecimal *) NIL_CHK(augend)).smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:diffScale] withInt:((JavaMathBigDecimal *) NIL_CHK(thisValue)).scale_];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[((JavaMathBigDecimal *) NIL_CHK(thisValue)) getUnscaledValue] addWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(augend)) getUnscaledValue] withLongInt:diffScale]] withInt:((JavaMathBigDecimal *) NIL_CHK(thisValue)).scale_] autorelease];
}

- (JavaMathBigDecimal *)addWithJavaMathBigDecimal:(JavaMathBigDecimal *)augend
                          withJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *larger;
  JavaMathBigDecimal *smaller;
  JavaMathBigInteger *tempBI;
  long long int diffScale = (long long int) self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(augend)).scale_;
  int largerSignum;
  if (([((JavaMathBigDecimal *) NIL_CHK(augend)) isZero]) || ([self isZero]) || ([((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] == 0)) {
    return [[self addWithJavaMathBigDecimal:augend] roundWithJavaMathMathContext:mc];
  }
  if ([self aproxPrecision] < diffScale - 1) {
    larger = augend;
    smaller = self;
  }
  else if ([((JavaMathBigDecimal *) NIL_CHK(augend)) aproxPrecision] < -diffScale - 1) {
    larger = self;
    smaller = augend;
  }
  else {
    return [[self addWithJavaMathBigDecimal:augend] roundWithJavaMathMathContext:mc];
  }
  if ([((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] >= [((JavaMathBigDecimal *) NIL_CHK(larger)) aproxPrecision]) {
    return [[self addWithJavaMathBigDecimal:augend] roundWithJavaMathMathContext:mc];
  }
  largerSignum = [((JavaMathBigDecimal *) NIL_CHK(larger)) signum];
  if (largerSignum == [((JavaMathBigDecimal *) NIL_CHK(smaller)) signum]) {
    tempBI = [[JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(larger)) getUnscaledValue] withInt:10] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:largerSignum]];
  }
  else {
    tempBI = [[((JavaMathBigDecimal *) NIL_CHK(larger)) getUnscaledValue] subtractWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:largerSignum]];
    tempBI = [[JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:tempBI withInt:10] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:largerSignum * 9]];
  }
  larger = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:tempBI withInt:((JavaMathBigDecimal *) NIL_CHK(larger)).scale_ + 1] autorelease];
  return [((JavaMathBigDecimal *) NIL_CHK(larger)) roundWithJavaMathMathContext:mc];
}

- (JavaMathBigDecimal *)subtractWithJavaMathBigDecimal:(JavaMathBigDecimal *)subtrahend {
  int diffScale = self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(subtrahend)).scale_;
  if ([self isZero]) {
    if (diffScale <= 0) {
      return [((JavaMathBigDecimal *) NIL_CHK(subtrahend)) negate];
    }
    if ([((JavaMathBigDecimal *) NIL_CHK(subtrahend)) isZero]) {
      return self;
    }
  }
  else if ([((JavaMathBigDecimal *) NIL_CHK(subtrahend)) isZero]) {
    if (diffScale >= 0) {
      return self;
    }
  }
  if (diffScale == 0) {
    if ([JavaLangMath maxWithInt:self.bitLength_ withInt:((JavaMathBigDecimal *) NIL_CHK(subtrahend)).bitLength_] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue - ((JavaMathBigDecimal *) NIL_CHK(subtrahend)).smallValue withInt:self.scale_];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] subtractWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(subtrahend)) getUnscaledValue]] withInt:self.scale_] autorelease];
  }
  else if (diffScale > 0) {
    if (diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:self.bitLength_ withInt:((JavaMathBigDecimal *) NIL_CHK(subtrahend)).bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:diffScale]] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue - ((JavaMathBigDecimal *) NIL_CHK(subtrahend)).smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:diffScale] withInt:self.scale_];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] subtractWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(subtrahend)) getUnscaledValue] withLongInt:diffScale]] withInt:self.scale_] autorelease];
  }
  else {
    diffScale = -diffScale;
    if (diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && [JavaLangMath maxWithInt:self.bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:diffScale] withInt:((JavaMathBigDecimal *) NIL_CHK(subtrahend)).bitLength_] + 1 < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:diffScale] - ((JavaMathBigDecimal *) NIL_CHK(subtrahend)).smallValue withInt:((JavaMathBigDecimal *) NIL_CHK(subtrahend)).scale_];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLongInt:diffScale] subtractWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(subtrahend)) getUnscaledValue]] withInt:((JavaMathBigDecimal *) NIL_CHK(subtrahend)).scale_] autorelease];
  }
}

- (JavaMathBigDecimal *)subtractWithJavaMathBigDecimal:(JavaMathBigDecimal *)subtrahend
                               withJavaMathMathContext:(JavaMathMathContext *)mc {
  long long int diffScale = ((JavaMathBigDecimal *) NIL_CHK(subtrahend)).scale_ - (long long int) self.scale_;
  int thisSignum;
  JavaMathBigDecimal *leftOperand;
  JavaMathBigInteger *tempBI;
  if (([((JavaMathBigDecimal *) NIL_CHK(subtrahend)) isZero]) || ([self isZero]) || ([((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] == 0)) {
    return [[self subtractWithJavaMathBigDecimal:subtrahend] roundWithJavaMathMathContext:mc];
  }
  if ([((JavaMathBigDecimal *) NIL_CHK(subtrahend)) aproxPrecision] < diffScale - 1) {
    if ([((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] < [self aproxPrecision]) {
      thisSignum = [self signum];
      if (thisSignum != [((JavaMathBigDecimal *) NIL_CHK(subtrahend)) signum]) {
        tempBI = [[JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:[self getUnscaledValue] withInt:10] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:thisSignum]];
      }
      else {
        tempBI = [[self getUnscaledValue] subtractWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:thisSignum]];
        tempBI = [[JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:tempBI withInt:10] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:thisSignum * 9]];
      }
      leftOperand = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:tempBI withInt:self.scale_ + 1] autorelease];
      return [((JavaMathBigDecimal *) NIL_CHK(leftOperand)) roundWithJavaMathMathContext:mc];
    }
  }
  return [[self subtractWithJavaMathBigDecimal:subtrahend] roundWithJavaMathMathContext:mc];
}

- (JavaMathBigDecimal *)multiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)multiplicand {
  long long int newScale = (long long int) self.scale_ + ((JavaMathBigDecimal *) NIL_CHK(multiplicand)).scale_;
  if (([self isZero]) || ([((JavaMathBigDecimal *) NIL_CHK(multiplicand)) isZero])) {
    return [JavaMathBigDecimal zeroScaledByWithLongInt:newScale];
  }
  if (self.bitLength_ + ((JavaMathBigDecimal *) NIL_CHK(multiplicand)).bitLength_ < 64) {
    return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue * ((JavaMathBigDecimal *) NIL_CHK(multiplicand)).smallValue withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] multiplyWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(multiplicand)) getUnscaledValue]] withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease];
}

- (JavaMathBigDecimal *)multiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)multiplicand
                               withJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *result = [self multiplyWithJavaMathBigDecimal:multiplicand];
  [((JavaMathBigDecimal *) NIL_CHK(result)) inplaceRoundWithJavaMathMathContext:mc];
  return result;
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)scale_
                                             withInt:(int)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale_ withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)scale_
                        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (roundingMode == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((JavaMathBigDecimal *) NIL_CHK(divisor)) isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  long long int diffScale = ((long long int) self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(divisor)).scale_) - scale_;
  if (self.bitLength_ < 64 && ((JavaMathBigDecimal *) NIL_CHK(divisor)).bitLength_ < 64) {
    if (diffScale == 0) {
      return [JavaMathBigDecimal dividePrimitiveLongsWithLongInt:self.smallValue withLongInt:((JavaMathBigDecimal *) NIL_CHK(divisor)).smallValue withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
    }
    else if (diffScale > 0) {
      if (diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && ((JavaMathBigDecimal *) NIL_CHK(divisor)).bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:(int) diffScale] < 64) {
        return [JavaMathBigDecimal dividePrimitiveLongsWithLongInt:self.smallValue withLongInt:((JavaMathBigDecimal *) NIL_CHK(divisor)).smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:(int) diffScale] withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
      }
    }
    else {
      if (-diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && self.bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:(int) -diffScale] < 64) {
        return [JavaMathBigDecimal dividePrimitiveLongsWithLongInt:self.smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:(int) -diffScale] withLongInt:((JavaMathBigDecimal *) NIL_CHK(divisor)).smallValue withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
      }
    }
  }
  JavaMathBigInteger *scaledDividend = [self getUnscaledValue];
  JavaMathBigInteger *scaledDivisor = [((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue];
  if (diffScale > 0) {
    scaledDivisor = [JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:scaledDivisor withLongInt:(int) diffScale];
  }
  else if (diffScale < 0) {
    scaledDividend = [JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:scaledDividend withLongInt:(int) -diffScale];
  }
  return [JavaMathBigDecimal divideBigIntegersWithJavaMathBigInteger:scaledDividend withJavaMathBigInteger:scaledDivisor withInt:scale_ withJavaMathRoundingModeEnum:roundingMode];
}

+ (JavaMathBigDecimal *)divideBigIntegersWithJavaMathBigInteger:(JavaMathBigInteger *)scaledDividend
                                         withJavaMathBigInteger:(JavaMathBigInteger *)scaledDivisor
                                                        withInt:(int)scale_
                                   withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  IOSObjectArray *quotAndRem = [((JavaMathBigInteger *) NIL_CHK(scaledDividend)) divideAndRemainderWithJavaMathBigInteger:scaledDivisor];
  JavaMathBigInteger *quotient = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
  JavaMathBigInteger *remainder = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]);
  if ([((JavaMathBigInteger *) NIL_CHK(remainder)) signum] == 0) {
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
  }
  int sign = [((JavaMathBigInteger *) NIL_CHK(scaledDividend)) signum] * [((JavaMathBigInteger *) NIL_CHK(scaledDivisor)) signum];
  int compRem;
  if ([((JavaMathBigInteger *) NIL_CHK(scaledDivisor)) bitLength] < 63) {
    long long int rem = [((JavaMathBigInteger *) NIL_CHK(remainder)) longValue];
    long long int divisor = [((JavaMathBigInteger *) NIL_CHK(scaledDivisor)) longValue];
    compRem = [JavaMathBigDecimal longCompareToWithLongInt:[JavaLangMath absWithLongInt:rem] << 1 withLongInt:[JavaLangMath absWithLongInt:divisor]];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) NIL_CHK(quotient)) testBitWithInt:0] ? 1 : 0 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  else {
    compRem = [[[((JavaMathBigInteger *) NIL_CHK(remainder)) abs] shiftLeftOneBit] compareToWithId:[((JavaMathBigInteger *) NIL_CHK(scaledDivisor)) abs]];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) NIL_CHK(quotient)) testBitWithInt:0] ? 1 : 0 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  if (compRem != 0) {
    if ([((JavaMathBigInteger *) NIL_CHK(quotient)) bitLength] < 63) {
      return [JavaMathBigDecimal valueOfWithLongInt:[((JavaMathBigInteger *) NIL_CHK(quotient)) longValue] + compRem withInt:scale_];
    }
    quotient = [((JavaMathBigInteger *) NIL_CHK(quotient)) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:compRem]];
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:quotient withInt:scale_] autorelease];
}

+ (JavaMathBigDecimal *)dividePrimitiveLongsWithLongInt:(long long int)scaledDividend
                                            withLongInt:(long long int)scaledDivisor
                                                withInt:(int)scale_
                           withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  long long int quotient = scaledDividend / scaledDivisor;
  long long int remainder = scaledDividend % scaledDivisor;
  int sign = [JavaLangLong signumWithLongInt:scaledDividend] * [JavaLangLong signumWithLongInt:scaledDivisor];
  if (remainder != 0) {
    int compRem;
    compRem = [JavaMathBigDecimal longCompareToWithLongInt:[JavaLangMath absWithLongInt:remainder] << 1 withLongInt:[JavaLangMath absWithLongInt:scaledDivisor]];
    quotient += [JavaMathBigDecimal roundingBehaviorWithInt:((int) quotient) & 1 withInt:sign * (5 + compRem) withJavaMathRoundingModeEnum:roundingMode];
  }
  return [JavaMathBigDecimal valueOfWithLongInt:quotient withInt:scale_];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                             withInt:(int)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale__ withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                        withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  return [self divideWithJavaMathBigDecimal:divisor withInt:scale__ withJavaMathRoundingModeEnum:roundingMode];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  JavaMathBigInteger *p = [self getUnscaledValue];
  JavaMathBigInteger *q = [((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue];
  JavaMathBigInteger *gcd;
  IOSObjectArray *quotAndRem;
  long long int diffScale = (long long int) scale__ - ((JavaMathBigDecimal *) NIL_CHK(divisor)).scale_;
  int newScale;
  int k;
  int l = 0;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_FIVE_POW_)) count] - 1;
  if ([((JavaMathBigDecimal *) NIL_CHK(divisor)) isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(p)) signum] == 0) {
    return [JavaMathBigDecimal zeroScaledByWithLongInt:diffScale];
  }
  gcd = [((JavaMathBigInteger *) NIL_CHK(p)) gcdWithJavaMathBigInteger:q];
  p = [((JavaMathBigInteger *) NIL_CHK(p)) divideWithJavaMathBigInteger:gcd];
  q = [((JavaMathBigInteger *) NIL_CHK(q)) divideWithJavaMathBigInteger:gcd];
  k = [((JavaMathBigInteger *) NIL_CHK(q)) getLowestSetBit];
  q = [((JavaMathBigInteger *) NIL_CHK(q)) shiftRightWithInt:k];
  do {
    quotAndRem = [((JavaMathBigInteger *) NIL_CHK(q)) divideAndRemainderWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_FIVE_POW_)) objectAtIndex:i])];
    if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] == 0) {
      l += i;
      if (i < lastPow) {
        i++;
      }
      q = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  while (YES);
  if (![[((JavaMathBigInteger *) NIL_CHK(q)) abs] isEqual:[JavaMathBigInteger ONE]]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Non-terminating decimal expansion; no exact representable decimal result."] autorelease];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(q)) signum] < 0) {
    p = [((JavaMathBigInteger *) NIL_CHK(p)) negate];
  }
  newScale = [JavaMathBigDecimal toIntScaleWithLongInt:diffScale + [JavaLangMath maxWithInt:k withInt:l]];
  i = k - l;
  p = (i > 0) ? [JavaMathMultiplication multiplyByFivePowWithJavaMathBigInteger:p withInt:i] : [((JavaMathBigInteger *) NIL_CHK(p)) shiftLeftWithInt:-i];
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:p withInt:newScale] autorelease];
}

- (JavaMathBigDecimal *)divideWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                             withJavaMathMathContext:(JavaMathMathContext *)mc {
  long long int traillingZeros = [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] + 2LL + [((JavaMathBigDecimal *) NIL_CHK(divisor)) aproxPrecision] - [self aproxPrecision];
  long long int diffScale = (long long int) scale__ - ((JavaMathBigDecimal *) NIL_CHK(divisor)).scale_;
  long long int newScale = diffScale;
  int compRem;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  JavaMathBigInteger *integerQuot;
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithObjects:(id[]){ [self getUnscaledValue] } count:1 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  if (([((JavaMathMathContext *) NIL_CHK(mc)) getPrecision] == 0) || ([self isZero]) || ([((JavaMathBigDecimal *) NIL_CHK(divisor)) isZero])) {
    return [self divideWithJavaMathBigDecimal:divisor];
  }
  if (traillingZeros > 0) {
    [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[[self getUnscaledValue] multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:traillingZeros]]];
    newScale += traillingZeros;
  }
  quotAndRem = [((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) divideAndRemainderWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]];
  integerQuot = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
  if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] != 0) {
    compRem = [[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) shiftLeftOneBit] compareToWithId:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]];
    integerQuot = [[((JavaMathBigInteger *) NIL_CHK(integerQuot)) multiplyWithJavaMathBigInteger:[JavaMathBigInteger TEN]] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) signum] * (5 + compRem)]];
    newScale++;
  }
  else {
    while (![((JavaMathBigInteger *) NIL_CHK(integerQuot)) testBitWithInt:0]) {
      quotAndRem = [((JavaMathBigInteger *) NIL_CHK(integerQuot)) divideAndRemainderWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) objectAtIndex:i])];
      if (([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] == 0) && (newScale - i >= diffScale)) {
        newScale -= i;
        if (i < lastPow) {
          i++;
        }
        integerQuot = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
      }
      else {
        if (i == 1) {
          break;
        }
        i = 1;
      }
    }
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:integerQuot withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale] withJavaMathMathContext:mc] autorelease];
}

- (JavaMathBigDecimal *)divideToIntegralValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  JavaMathBigInteger *integralValue;
  JavaMathBigInteger *powerOfTen;
  IOSObjectArray *quotAndRem = [IOSObjectArray arrayWithObjects:(id[]){ [self getUnscaledValue] } count:1 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  long long int newScale = (long long int) self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(divisor)).scale_;
  long long int tempScale = 0;
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  if ([((JavaMathBigDecimal *) NIL_CHK(divisor)) isZero]) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division by zero"] autorelease];
  }
  if (([((JavaMathBigDecimal *) NIL_CHK(divisor)) aproxPrecision] + newScale > [self aproxPrecision] + 1LL) || ([self isZero])) {
    integralValue = [JavaMathBigInteger ZERO];
  }
  else if (newScale == 0) {
    integralValue = [[self getUnscaledValue] divideWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]];
  }
  else if (newScale > 0) {
    powerOfTen = [JavaMathMultiplication powerOf10WithLongInt:newScale];
    integralValue = [[self getUnscaledValue] divideWithJavaMathBigInteger:[[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue] multiplyWithJavaMathBigInteger:powerOfTen]];
    integralValue = [((JavaMathBigInteger *) NIL_CHK(integralValue)) multiplyWithJavaMathBigInteger:powerOfTen];
  }
  else {
    powerOfTen = [JavaMathMultiplication powerOf10WithLongInt:-newScale];
    integralValue = [[[self getUnscaledValue] multiplyWithJavaMathBigInteger:powerOfTen] divideWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]];
    while (![((JavaMathBigInteger *) NIL_CHK(integralValue)) testBitWithInt:0]) {
      quotAndRem = [((JavaMathBigInteger *) NIL_CHK(integralValue)) divideAndRemainderWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) objectAtIndex:i])];
      if (([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] == 0) && (tempScale - i >= newScale)) {
        tempScale -= i;
        if (i < lastPow) {
          i++;
        }
        integralValue = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
      }
      else {
        if (i == 1) {
          break;
        }
        i = 1;
      }
    }
    newScale = tempScale;
  }
  return (([((JavaMathBigInteger *) NIL_CHK(integralValue)) signum] == 0) ? [JavaMathBigDecimal zeroScaledByWithLongInt:newScale] : [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:integralValue withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease]);
}

- (JavaMathBigDecimal *)divideToIntegralValueWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                            withJavaMathMathContext:(JavaMathMathContext *)mc {
  int mcPrecision = [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision];
  int diffPrecision = [self precision] - [((JavaMathBigDecimal *) NIL_CHK(divisor)) precision];
  int lastPow = (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  long long int diffScale = (long long int) self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(divisor)).scale_;
  long long int newScale = diffScale;
  long long int quotPrecision = diffPrecision - diffScale + 1;
  IOSObjectArray *quotAndRem = [[[IOSObjectArray alloc] initWithLength:2 type:[IOSClass classWithClass:[JavaMathBigInteger class]]] autorelease];
  if ((mcPrecision == 0) || ([self isZero]) || ([((JavaMathBigDecimal *) NIL_CHK(divisor)) isZero])) {
    return [self divideToIntegralValueWithJavaMathBigDecimal:divisor];
  }
  if (quotPrecision <= 0) {
    [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[JavaMathBigInteger ZERO]];
  }
  else if (diffScale == 0) {
    [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[[self getUnscaledValue] divideWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]]];
  }
  else if (diffScale > 0) {
    [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[[self getUnscaledValue] divideWithJavaMathBigInteger:[[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue] multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:diffScale]]]];
    newScale = [JavaLangMath minWithLongInt:diffScale withLongInt:[JavaLangMath maxWithLongInt:mcPrecision - quotPrecision + 1 withLongInt:0]];
    [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:newScale]]];
  }
  else {
    long long int exp = [JavaLangMath minWithLongInt:-diffScale withLongInt:[JavaLangMath maxWithLongInt:(long long int) mcPrecision - diffPrecision withLongInt:0]];
    long long int compRemDiv;
    quotAndRem = [[[self getUnscaledValue] multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:exp]] divideAndRemainderWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]];
    newScale += exp;
    exp = -newScale;
    if (([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] != 0) && (exp > 0)) {
      compRemDiv = [([[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1])] autorelease]) precision] + exp - [((JavaMathBigDecimal *) NIL_CHK(divisor)) precision];
      if (compRemDiv == 0) {
        [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:1 withObject:[[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:exp]] divideWithJavaMathBigInteger:[((JavaMathBigDecimal *) NIL_CHK(divisor)) getUnscaledValue]]];
        compRemDiv = [JavaLangMath absWithInt:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum]];
      }
      if (compRemDiv > 0) {
        @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division impossible"] autorelease];
      }
    }
  }
  if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) signum] == 0) {
    return [JavaMathBigDecimal zeroScaledByWithLongInt:diffScale];
  }
  JavaMathBigInteger *strippedBI = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
  JavaMathBigDecimal *integralValue = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0])] autorelease];
  long long int resultPrecision = [((JavaMathBigDecimal *) NIL_CHK(integralValue)) precision];
  int i = 1;
  while (![((JavaMathBigInteger *) NIL_CHK(strippedBI)) testBitWithInt:0]) {
    quotAndRem = [((JavaMathBigInteger *) NIL_CHK(strippedBI)) divideAndRemainderWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) objectAtIndex:i])];
    if (([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] == 0) && ((resultPrecision - i >= mcPrecision) || (newScale - i >= diffScale))) {
      resultPrecision -= i;
      newScale -= i;
      if (i < lastPow) {
        i++;
      }
      strippedBI = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  if (resultPrecision > mcPrecision) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Division impossible"] autorelease];
  }
  ((JavaMathBigDecimal *) NIL_CHK(integralValue)).scale_ = [JavaMathBigDecimal toIntScaleWithLongInt:newScale];
  [((JavaMathBigDecimal *) NIL_CHK(integralValue)) setUnscaledValueWithJavaMathBigInteger:strippedBI];
  return integralValue;
}

- (JavaMathBigDecimal *)remainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  return ((JavaMathBigDecimal *) [[self divideAndRemainderWithJavaMathBigDecimal:divisor] objectAtIndex:1]);
}

- (JavaMathBigDecimal *)remainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                withJavaMathMathContext:(JavaMathMathContext *)mc {
  return ((JavaMathBigDecimal *) [[self divideAndRemainderWithJavaMathBigDecimal:divisor withJavaMathMathContext:mc] objectAtIndex:1]);
}

- (IOSObjectArray *)divideAndRemainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor {
  IOSObjectArray *quotAndRem = [[[IOSObjectArray alloc] initWithLength:2 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]] autorelease];
  [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[self divideToIntegralValueWithJavaMathBigDecimal:divisor]];
  [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:1 withObject:[self subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) multiplyWithJavaMathBigDecimal:divisor]]];
  return quotAndRem;
}

- (IOSObjectArray *)divideAndRemainderWithJavaMathBigDecimal:(JavaMathBigDecimal *)divisor
                                     withJavaMathMathContext:(JavaMathMathContext *)mc {
  IOSObjectArray *quotAndRem = [[[IOSObjectArray alloc] initWithLength:2 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]] autorelease];
  [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:0 withObject:[self divideToIntegralValueWithJavaMathBigDecimal:divisor withJavaMathMathContext:mc]];
  [((IOSObjectArray *) NIL_CHK(quotAndRem)) replaceObjectAtIndex:1 withObject:[self subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) multiplyWithJavaMathBigDecimal:divisor]]];
  return quotAndRem;
}

- (JavaMathBigDecimal *)powWithInt:(int)n {
  if (n == 0) {
    return JavaMathBigDecimal_ONE_;
  }
  if ((n < 0) || (n > 999999999)) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Invalid Operation"] autorelease];
  }
  long long int newScale = scale__ * (long long int) n;
  return (([self isZero]) ? [JavaMathBigDecimal zeroScaledByWithLongInt:newScale] : [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] powWithInt:n] withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease]);
}

- (JavaMathBigDecimal *)powWithInt:(int)n
           withJavaMathMathContext:(JavaMathMathContext *)mc {
  int m = [JavaLangMath absWithInt:n];
  int mcPrecision = [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision];
  int elength = (int) [JavaLangMath log10WithDouble:m] + 1;
  int oneBitMask;
  JavaMathBigDecimal *accum;
  JavaMathMathContext *newPrecision = mc;
  if ((n == 0) || (([self isZero]) && (n > 0))) {
    return [self powWithInt:n];
  }
  if ((m > 999999999) || ((mcPrecision == 0) && (n < 0)) || ((mcPrecision > 0) && (elength > mcPrecision))) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Invalid Operation"] autorelease];
  }
  if (mcPrecision > 0) {
    newPrecision = [[[JavaMathMathContext alloc] initWithInt:mcPrecision + elength + 1 withJavaMathRoundingModeEnum:[((JavaMathMathContext *) NIL_CHK(mc)) getRoundingMode]] autorelease];
  }
  accum = [self roundWithJavaMathMathContext:newPrecision];
  oneBitMask = [JavaLangInteger highestOneBitWithInt:m] >> 1;
  while (oneBitMask > 0) {
    accum = [((JavaMathBigDecimal *) NIL_CHK(accum)) multiplyWithJavaMathBigDecimal:accum withJavaMathMathContext:newPrecision];
    if ((m & oneBitMask) == oneBitMask) {
      accum = [((JavaMathBigDecimal *) NIL_CHK(accum)) multiplyWithJavaMathBigDecimal:self withJavaMathMathContext:newPrecision];
    }
    oneBitMask >>= 1;
  }
  if (n < 0) {
    accum = [((JavaMathBigDecimal *) NIL_CHK(JavaMathBigDecimal_ONE_)) divideWithJavaMathBigDecimal:accum withJavaMathMathContext:newPrecision];
  }
  [((JavaMathBigDecimal *) NIL_CHK(accum)) inplaceRoundWithJavaMathMathContext:mc];
  return accum;
}

- (JavaMathBigDecimal *)abs {
  return (([self signum] < 0) ? [self negate] : self);
}

- (JavaMathBigDecimal *)absWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [[self roundWithJavaMathMathContext:mc] abs];
}

- (JavaMathBigDecimal *)negate {
  if (bitLength__ < 63 || (bitLength__ == 63 && smallValue_ != JavaLangLong_MIN_VALUE)) {
    return [JavaMathBigDecimal valueOfWithLongInt:-smallValue_ withInt:scale__];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[[self getUnscaledValue] negate] withInt:scale__] autorelease];
}

- (JavaMathBigDecimal *)negateWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [[self roundWithJavaMathMathContext:mc] negate];
}

- (JavaMathBigDecimal *)plus {
  return self;
}

- (JavaMathBigDecimal *)plusWithJavaMathMathContext:(JavaMathMathContext *)mc {
  return [self roundWithJavaMathMathContext:mc];
}

- (int)signum {
  if (bitLength__ < 64) {
    return [JavaLangLong signumWithLongInt:self.smallValue];
  }
  return [[self getUnscaledValue] signum];
}

- (BOOL)isZero {
  return bitLength__ == 0 && self.smallValue != -1;
}

- (int)scale__ {
  return scale__;
}

- (int)precision {
  if (precision__ > 0) {
    return precision__;
  }
  int bitLength = self.bitLength_;
  int decimalDigits = 1;
  double doubleUnsc = 1;
  if (bitLength < 1024) {
    if (bitLength >= 64) {
      doubleUnsc = [[self getUnscaledValue] doubleValue];
    }
    else if (bitLength >= 1) {
      doubleUnsc = smallValue_;
    }
    decimalDigits += [JavaLangMath log10WithDouble:[JavaLangMath absWithDouble:doubleUnsc]];
  }
  else {
    decimalDigits += (bitLength - 1) * JavaMathBigDecimal_LOG10_2;
    if ([[[self getUnscaledValue] divideWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:decimalDigits]] signum] != 0) {
      decimalDigits++;
    }
  }
  precision__ = decimalDigits;
  return precision__;
}

- (JavaMathBigInteger *)unscaledValue {
  return [self getUnscaledValue];
}

- (JavaMathBigDecimal *)roundWithJavaMathMathContext:(JavaMathMathContext *)mc {
  JavaMathBigDecimal *thisBD = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:scale__] autorelease];
  [((JavaMathBigDecimal *) NIL_CHK(thisBD)) inplaceRoundWithJavaMathMathContext:mc];
  return thisBD;
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale
           withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  if (roundingMode == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  long long int diffScale = newScale - (long long int) scale__;
  if (diffScale == 0) {
    return self;
  }
  if (diffScale > 0) {
    if (diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && (self.bitLength_ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:(int) diffScale]) < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:self.smallValue * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:(int) diffScale] withInt:newScale];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLongInt:(int) diffScale] withInt:newScale] autorelease];
  }
  if (self.bitLength_ < 64 && -diffScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count]) {
    return [JavaMathBigDecimal dividePrimitiveLongsWithLongInt:self.smallValue withLongInt:[((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:(int) -diffScale] withInt:newScale withJavaMathRoundingModeEnum:roundingMode];
  }
  return [JavaMathBigDecimal divideBigIntegersWithJavaMathBigInteger:[self getUnscaledValue] withJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:-diffScale] withInt:newScale withJavaMathRoundingModeEnum:roundingMode];
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale
                                withInt:(int)roundingMode {
  return [self setScaleWithInt:newScale withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum valueOfWithInt:roundingMode]];
}

- (JavaMathBigDecimal *)setScaleWithInt:(int)newScale {
  return [self setScaleWithInt:newScale withJavaMathRoundingModeEnum:[JavaMathRoundingModeEnum UNNECESSARY]];
}

- (JavaMathBigDecimal *)movePointLeftWithInt:(int)n {
  return [self movePointWithLongInt:scale__ + (long long int) n];
}

- (JavaMathBigDecimal *)movePointWithLongInt:(long long int)newScale {
  if ([self isZero]) {
    return [JavaMathBigDecimal zeroScaledByWithLongInt:[JavaLangMath maxWithLongInt:newScale withLongInt:0]];
  }
  if (newScale >= 0) {
    if (bitLength__ < 64) {
      return [JavaMathBigDecimal valueOfWithLongInt:smallValue_ withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]];
    }
    return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease];
  }
  if (-newScale < (int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count] && bitLength__ + [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) intAtIndex:(int) -newScale] < 64) {
    return [JavaMathBigDecimal valueOfWithLongInt:smallValue_ * [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:(int) -newScale] withInt:0];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[JavaMathMultiplication multiplyByTenPowWithJavaMathBigInteger:[self getUnscaledValue] withLongInt:(int) -newScale] withInt:0] autorelease];
}

- (JavaMathBigDecimal *)movePointRightWithInt:(int)n {
  return [self movePointWithLongInt:scale__ - (long long int) n];
}

- (JavaMathBigDecimal *)scaleByPowerOfTenWithInt:(int)n {
  long long int newScale = scale__ - (long long int) n;
  if (bitLength__ < 64) {
    if (smallValue_ == 0) {
      return [JavaMathBigDecimal zeroScaledByWithLongInt:newScale];
    }
    return [JavaMathBigDecimal valueOfWithLongInt:smallValue_ withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]];
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:[self getUnscaledValue] withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease];
}

- (JavaMathBigDecimal *)stripTrailingZeros {
  int i = 1;
  int lastPow = (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) count] - 1;
  long long int newScale = scale__;
  if ([self isZero]) {
    return [[[JavaMathBigDecimal alloc] initWithNSString:@"0"] autorelease];
  }
  JavaMathBigInteger *strippedBI = [self getUnscaledValue];
  IOSObjectArray *quotAndRem;
  while (![((JavaMathBigInteger *) NIL_CHK(strippedBI)) testBitWithInt:0]) {
    quotAndRem = [((JavaMathBigInteger *) NIL_CHK(strippedBI)) divideAndRemainderWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_TEN_POW_)) objectAtIndex:i])];
    if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) signum] == 0) {
      newScale -= i;
      if (i < lastPow) {
        i++;
      }
      strippedBI = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]);
    }
    else {
      if (i == 1) {
        break;
      }
      i = 1;
    }
  }
  return [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:strippedBI withInt:[JavaMathBigDecimal toIntScaleWithLongInt:newScale]] autorelease];
}

- (int)compareToWithId:(JavaMathBigDecimal *)val {
  if (val != nil && ![val isKindOfClass:[JavaMathBigDecimal class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int thisSign = [self signum];
  int valueSign = [((JavaMathBigDecimal *) NIL_CHK(val)) signum];
  if (thisSign == valueSign) {
    if (self.scale_ == ((JavaMathBigDecimal *) NIL_CHK(val)).scale_ && self.bitLength_ < 64 && ((JavaMathBigDecimal *) NIL_CHK(val)).bitLength_ < 64) {
      return (smallValue_ < ((JavaMathBigDecimal *) NIL_CHK(val)).smallValue) ? -1 : (smallValue_ > ((JavaMathBigDecimal *) NIL_CHK(val)).smallValue) ? 1 : 0;
    }
    long long int diffScale = (long long int) self.scale_ - ((JavaMathBigDecimal *) NIL_CHK(val)).scale_;
    int diffPrecision = [self aproxPrecision] - [((JavaMathBigDecimal *) NIL_CHK(val)) aproxPrecision];
    if (diffPrecision > diffScale + 1) {
      return thisSign;
    }
    else if (diffPrecision < diffScale - 1) {
      return -thisSign;
    }
    else {
      JavaMathBigInteger *thisUnscaled = [self getUnscaledValue];
      JavaMathBigInteger *valUnscaled = [((JavaMathBigDecimal *) NIL_CHK(val)) getUnscaledValue];
      if (diffScale < 0) {
        thisUnscaled = [((JavaMathBigInteger *) NIL_CHK(thisUnscaled)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:-diffScale]];
      }
      else if (diffScale > 0) {
        valUnscaled = [((JavaMathBigInteger *) NIL_CHK(valUnscaled)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:diffScale]];
      }
      return [((JavaMathBigInteger *) NIL_CHK(thisUnscaled)) compareToWithId:valUnscaled];
    }
  }
  else if (thisSign < valueSign) {
    return -1;
  }
  else {
    return 1;
  }
}

- (BOOL)isEqual:(id)x {
  if (self == x) {
    return YES;
  }
  if ([x isKindOfClass:[JavaMathBigDecimal class]]) {
    JavaMathBigDecimal *x1 = (JavaMathBigDecimal *) x;
    return ((JavaMathBigDecimal *) NIL_CHK(x1)).scale_ == scale__ && (bitLength__ < 64 ? (((JavaMathBigDecimal *) NIL_CHK(x1)).smallValue == smallValue_) : [((JavaMathBigInteger *) NIL_CHK(intVal_)) isEqual:((JavaMathBigDecimal *) NIL_CHK(x1)).intVal]);
  }
  return NO;
}

- (JavaMathBigDecimal *)minWithJavaMathBigDecimal:(JavaMathBigDecimal *)val {
  return (([self compareToWithId:val] <= 0) ? self : val);
}

- (JavaMathBigDecimal *)maxWithJavaMathBigDecimal:(JavaMathBigDecimal *)val {
  return (([self compareToWithId:val] >= 0) ? self : val);
}

- (NSUInteger)hash {
  if (hashCode__ != 0) {
    return hashCode__;
  }
  if (bitLength__ < 64) {
    hashCode__ = (int) (smallValue_ & (int) 0xffffffff);
    hashCode__ = 33 * hashCode__ + (int) ((smallValue_ >> 32) & (int) 0xffffffff);
    hashCode__ = 17 * hashCode__ + scale__;
    return hashCode__;
  }
  hashCode__ = 17 * [((JavaMathBigInteger *) NIL_CHK(intVal_)) hash] + scale__;
  return hashCode__;
}

- (NSString *)description {
  if (toStringImage_ != nil) {
    return toStringImage_;
  }
  if (bitLength__ < 32) {
    JreOperatorRetainedAssign(&toStringImage_, [JavaMathConversion toDecimalScaledStringWithLongInt:smallValue_ withInt:scale__]);
    return toStringImage_;
  }
  NSString *intString = [[self getUnscaledValue] description];
  if (scale__ == 0) {
    return intString;
  }
  int begin = ([[self getUnscaledValue] signum] < 0) ? 2 : 1;
  int end = [NIL_CHK(intString) length];
  long long int exponent = -(long long int) scale__ + end - begin;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:intString];
  if ((scale__ > 0) && (exponent >= -6)) {
    if (exponent >= 0) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:end - scale__ withUnichar:'.'];
    }
    else {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin - 1 withNSString:@"0."];
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin + 1 withJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-(int) exponent - 1];
    }
  }
  else {
    if (end - begin >= 1) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin withUnichar:'.'];
      end++;
    }
    [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:end withUnichar:'E'];
    if (exponent > 0) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:++end withUnichar:'+'];
    }
    [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:++end withNSString:[JavaLangLong toStringWithLongInt:exponent]];
  }
  JreOperatorRetainedAssign(&toStringImage_, [((JavaLangStringBuilder *) NIL_CHK(result)) description]);
  return toStringImage_;
}

- (NSString *)toEngineeringString {
  NSString *intString = [[self getUnscaledValue] description];
  if (scale__ == 0) {
    return intString;
  }
  int begin = ([[self getUnscaledValue] signum] < 0) ? 2 : 1;
  int end = [NIL_CHK(intString) length];
  long long int exponent = -(long long int) scale__ + end - begin;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithNSString:intString] autorelease];
  if ((scale__ > 0) && (exponent >= -6)) {
    if (exponent >= 0) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:end - scale__ withUnichar:'.'];
    }
    else {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin - 1 withNSString:@"0."];
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin + 1 withJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-(int) exponent - 1];
    }
  }
  else {
    int delta = end - begin;
    int rem = (int) (exponent % 3);
    if (rem != 0) {
      if ([[self getUnscaledValue] signum] == 0) {
        rem = (rem < 0) ? -rem : 3 - rem;
        exponent += rem;
      }
      else {
        rem = (rem < 0) ? rem + 3 : rem;
        exponent -= rem;
        begin += rem;
      }
      if (delta < 3) {
        for (int i = rem - delta; i > 0; i--) {
          [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:end++ withUnichar:'0'];
        }
      }
    }
    if (end - begin >= 1) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:begin withUnichar:'.'];
      end++;
    }
    if (exponent != 0) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:end withUnichar:'E'];
      if (exponent > 0) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:++end withUnichar:'+'];
      }
      [((JavaLangStringBuilder *) NIL_CHK(result)) insertWithInt:++end withNSString:[JavaLangLong toStringWithLongInt:exponent]];
    }
  }
  return [((JavaLangStringBuilder *) NIL_CHK(result)) description];
}

- (NSString *)toPlainString {
  NSString *intStr = [[self getUnscaledValue] description];
  if ((scale__ == 0) || (([self isZero]) && (scale__ < 0))) {
    return intStr;
  }
  int begin = ([self signum] < 0) ? 1 : 0;
  int delta = scale__;
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithInt:[NIL_CHK(intStr) length] + 1 + [JavaLangMath absWithInt:scale__]] autorelease];
  if (begin == 1) {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'-'];
  }
  if (scale__ > 0) {
    delta -= ([NIL_CHK(intStr) length] - begin);
    if (delta >= 0) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:@"0."];
      for (; delta > (int) [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) count]; delta -= (int) [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) count]) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_];
      }
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:delta];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NIL_CHK(intStr) substring:begin]];
    }
    else {
      delta = begin - delta;
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NIL_CHK(intStr) substring:begin endIndex:delta]];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'.'];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NIL_CHK(intStr) substring:delta]];
    }
  }
  else {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NIL_CHK(intStr) substring:begin]];
    for (; delta < -(int) [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) count]; delta += (int) [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) count]) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_];
    }
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:JavaMathBigDecimal_CH_ZEROS_ withInt:0 withInt:-delta];
  }
  return [((JavaLangStringBuilder *) NIL_CHK(result)) description];
}

- (JavaMathBigInteger *)toBigInteger {
  if ((scale__ == 0) || ([self isZero])) {
    return [self getUnscaledValue];
  }
  else if (scale__ < 0) {
    return [[self getUnscaledValue] multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:-(long long int) scale__]];
  }
  else {
    return [[self getUnscaledValue] divideWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:scale__]];
  }
}

- (JavaMathBigInteger *)toBigIntegerExact {
  if ((scale__ == 0) || ([self isZero])) {
    return [self getUnscaledValue];
  }
  else if (scale__ < 0) {
    return [[self getUnscaledValue] multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:-(long long int) scale__]];
  }
  else {
    IOSObjectArray *integerAndFraction;
    if ((scale__ > [self aproxPrecision]) || (scale__ > [[self getUnscaledValue] getLowestSetBit])) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    integerAndFraction = [[self getUnscaledValue] divideAndRemainderWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:scale__]];
    if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:1]) signum] != 0) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0]);
  }
}

- (long long int)longValue {
  return ((scale__ <= -64) || (scale__ > [self aproxPrecision]) ? 0LL : [[self toBigInteger] longValue]);
}

- (long long int)longValueExact {
  return [self valueExactWithInt:64];
}

- (int)intValue {
  return ((scale__ <= -32) || (scale__ > [self aproxPrecision]) ? 0 : [[self toBigInteger] intValue]);
}

- (int)intValueExact {
  return (int) [self valueExactWithInt:32];
}

- (short int)shortValueExact {
  return (short int) [self valueExactWithInt:16];
}

- (char)byteValueExact {
  return (char) [self valueExactWithInt:8];
}

- (float)floatValue {
  float floatResult = [self signum];
  long long int powerOfTwo = self.bitLength_ - (long long int) (scale__ / JavaMathBigDecimal_LOG10_2);
  if ((powerOfTwo < -149) || (floatResult == 0.0f)) {
    floatResult *= 0.0f;
  }
  else if (powerOfTwo > 129) {
    floatResult *= JavaLangFloat_POSITIVE_INFINITY;
  }
  else {
    floatResult = (float) [self doubleValue];
  }
  return floatResult;
}

- (double)doubleValue {
  int sign = [self signum];
  int exponent = 1076;
  int lowestSetBit;
  int discardedSize;
  long long int powerOfTwo = self.bitLength_ - (long long int) (scale__ / JavaMathBigDecimal_LOG10_2);
  long long int bits;
  long long int tempBits;
  JavaMathBigInteger *mantisa;
  if ((powerOfTwo < -1074) || (sign == 0)) {
    return (sign * 0.0);
  }
  else if (powerOfTwo > 1025) {
    return (sign * JavaLangDouble_POSITIVE_INFINITY);
  }
  mantisa = [[self getUnscaledValue] abs];
  if (scale__ <= 0) {
    mantisa = [((JavaMathBigInteger *) NIL_CHK(mantisa)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:-scale__]];
  }
  else {
    IOSObjectArray *quotAndRem;
    JavaMathBigInteger *powerOfTen = [JavaMathMultiplication powerOf10WithLongInt:scale__];
    int k = 100 - (int) powerOfTwo;
    int compRem;
    if (k > 0) {
      mantisa = [((JavaMathBigInteger *) NIL_CHK(mantisa)) shiftLeftWithInt:k];
      exponent -= k;
    }
    quotAndRem = [((JavaMathBigInteger *) NIL_CHK(mantisa)) divideAndRemainderWithJavaMathBigInteger:powerOfTen];
    compRem = [[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:1]) shiftLeftOneBit] compareToWithId:powerOfTen];
    mantisa = [[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(quotAndRem)) objectAtIndex:0]) shiftLeftWithInt:2] addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:(compRem * (compRem + 3)) / 2 + 1]];
    exponent -= 2;
  }
  lowestSetBit = [((JavaMathBigInteger *) NIL_CHK(mantisa)) getLowestSetBit];
  discardedSize = [((JavaMathBigInteger *) NIL_CHK(mantisa)) bitLength] - 54;
  if (discardedSize > 0) {
    bits = [[((JavaMathBigInteger *) NIL_CHK(mantisa)) shiftRightWithInt:discardedSize] longValue];
    tempBits = bits;
    if ((((bits & 1) == 1) && (lowestSetBit < discardedSize)) || ((bits & 3) == 3)) {
      bits += 2;
    }
  }
  else {
    bits = [((JavaMathBigInteger *) NIL_CHK(mantisa)) longValue] << -discardedSize;
    tempBits = bits;
    if ((bits & 3) == 3) {
      bits += 2;
    }
  }
  if ((bits & (long long) 0x40000000000000LL) == 0) {
    bits >>= 1;
    exponent += discardedSize;
  }
  else {
    bits >>= 2;
    exponent += discardedSize + 1;
  }
  if (exponent > 2046) {
    return (sign * JavaLangDouble_POSITIVE_INFINITY);
  }
  else if (exponent <= 0) {
    if (exponent < -53) {
      return (sign * 0.0);
    }
    bits = tempBits >> 1;
    tempBits = bits & ((long long) (((unsigned long long) -1LL) >> (63 + exponent)));
    bits >>= (-exponent);
    if (((bits & 3) == 3) || (((bits & 1) == 1) && (tempBits != 0) && (lowestSetBit < discardedSize))) {
      bits += 1;
    }
    exponent = 0;
    bits >>= 1;
  }
  bits = (sign & -0x7fffffffffffffffLL - 1) | ((long long int) exponent << 52) | (bits & (long long) 0xFFFFFFFFFFFFFLL);
  return [JavaLangDouble longBitsToDoubleWithLongInt:bits];
}

- (JavaMathBigDecimal *)ulp {
  return [JavaMathBigDecimal valueOfWithLongInt:1 withInt:scale__];
}

- (void)inplaceRoundWithJavaMathMathContext:(JavaMathMathContext *)mc {
  int mcPrecision = [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision];
  if ([self aproxPrecision] - mcPrecision <= 0 || mcPrecision == 0) {
    return;
  }
  int discardedPrecision = [self precision] - mcPrecision;
  if ((discardedPrecision <= 0)) {
    return;
  }
  if (self.bitLength_ < 64) {
    [self smallRoundWithJavaMathMathContext:mc withInt:discardedPrecision];
    return;
  }
  JavaMathBigInteger *sizeOfFraction = [JavaMathMultiplication powerOf10WithLongInt:discardedPrecision];
  IOSObjectArray *integerAndFraction = [[self getUnscaledValue] divideAndRemainderWithJavaMathBigInteger:sizeOfFraction];
  long long int newScale = (long long int) scale__ - discardedPrecision;
  int compRem;
  JavaMathBigDecimal *tempBD;
  if ([((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:1]) signum] != 0) {
    JavaMathBigInteger *fraction = ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:1]);
    compRem = [[[((JavaMathBigInteger *) NIL_CHK(fraction)) abs] shiftLeftOneBit] compareToWithId:sizeOfFraction];
    compRem = [JavaMathBigDecimal roundingBehaviorWithInt:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0]) testBitWithInt:0] ? 1 : 0 withInt:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:1]) signum] * (5 + compRem) withJavaMathRoundingModeEnum:[((JavaMathMathContext *) NIL_CHK(mc)) getRoundingMode]];
    if (compRem != 0) {
      [((IOSObjectArray *) NIL_CHK(integerAndFraction)) replaceObjectAtIndex:0 withObject:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0]) addWithJavaMathBigInteger:[JavaMathBigInteger valueOfWithLongInt:compRem]]];
    }
    tempBD = [[[JavaMathBigDecimal alloc] initWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0])] autorelease];
    if ([((JavaMathBigDecimal *) NIL_CHK(tempBD)) precision] > mcPrecision) {
      [((IOSObjectArray *) NIL_CHK(integerAndFraction)) replaceObjectAtIndex:0 withObject:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0]) divideWithJavaMathBigInteger:[JavaMathBigInteger TEN]]];
      newScale--;
    }
  }
  scale__ = [JavaMathBigDecimal toIntScaleWithLongInt:newScale];
  precision__ = mcPrecision;
  [self setUnscaledValueWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(integerAndFraction)) objectAtIndex:0])];
}

+ (int)longCompareToWithLongInt:(long long int)value1
                    withLongInt:(long long int)value2 {
  return value1 > value2 ? 1 : (value1 < value2 ? -1 : 0);
}

- (void)smallRoundWithJavaMathMathContext:(JavaMathMathContext *)mc
                                  withInt:(int)discardedPrecision {
  long long int sizeOfFraction = [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:discardedPrecision];
  long long int newScale = (long long int) scale__ - discardedPrecision;
  long long int unscaledVal = smallValue_;
  long long int integer = unscaledVal / sizeOfFraction;
  long long int fraction = unscaledVal % sizeOfFraction;
  int compRem;
  if (fraction != 0) {
    compRem = [JavaMathBigDecimal longCompareToWithLongInt:[JavaLangMath absWithLongInt:fraction] << 1 withLongInt:sizeOfFraction];
    integer += [JavaMathBigDecimal roundingBehaviorWithInt:((int) integer) & 1 withInt:[JavaLangLong signumWithLongInt:fraction] * (5 + compRem) withJavaMathRoundingModeEnum:[((JavaMathMathContext *) NIL_CHK(mc)) getRoundingMode]];
    if ([JavaLangMath log10WithDouble:[JavaLangMath absWithLongInt:integer]] >= [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision]) {
      integer /= 10;
      newScale--;
    }
  }
  scale__ = [JavaMathBigDecimal toIntScaleWithLongInt:newScale];
  precision__ = [((JavaMathMathContext *) NIL_CHK(mc)) getPrecision];
  smallValue_ = integer;
  bitLength__ = [JavaMathBigDecimal bitLengthWithLongInt:integer];
  JreOperatorRetainedAssign(&intVal_, nil);
}

+ (int)roundingBehaviorWithInt:(int)parityBit
                       withInt:(int)fraction
  withJavaMathRoundingModeEnum:(JavaMathRoundingModeEnum *)roundingMode {
  int increment = 0;
  switch ([roundingMode ordinal]) {
    case JavaMathRoundingMode_UNNECESSARY:
    if (fraction != 0) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
    }
    break;
    case JavaMathRoundingMode_UP:
    increment = [JavaLangInteger signumWithInt:fraction];
    break;
    case JavaMathRoundingMode_DOWN:
    break;
    case JavaMathRoundingMode_CEILING:
    increment = [JavaLangMath maxWithInt:[JavaLangInteger signumWithInt:fraction] withInt:0];
    break;
    case JavaMathRoundingMode_FLOOR:
    increment = [JavaLangMath minWithInt:[JavaLangInteger signumWithInt:fraction] withInt:0];
    break;
    case JavaMathRoundingMode_HALF_UP:
    if ([JavaLangMath absWithInt:fraction] >= 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
    case JavaMathRoundingMode_HALF_DOWN:
    if ([JavaLangMath absWithInt:fraction] > 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
    case JavaMathRoundingMode_HALF_EVEN:
    if ([JavaLangMath absWithInt:fraction] + parityBit > 5) {
      increment = [JavaLangInteger signumWithInt:fraction];
    }
    break;
  }
  return increment;
}

- (long long int)valueExactWithInt:(int)bitLengthOfType {
  JavaMathBigInteger *bigInteger = [self toBigIntegerExact];
  if ([((JavaMathBigInteger *) NIL_CHK(bigInteger)) bitLength] < bitLengthOfType) {
    return [((JavaMathBigInteger *) NIL_CHK(bigInteger)) longValue];
  }
  @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Rounding necessary"] autorelease];
}

- (int)aproxPrecision {
  return (precision__ > 0) ? precision__ : ((int) ((self.bitLength_ - 1) * JavaMathBigDecimal_LOG10_2)) + 1;
}

+ (int)toIntScaleWithLongInt:(long long int)longScale {
  if (longScale < JavaLangInteger_MIN_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Overflow"] autorelease];
  }
  else if (longScale > JavaLangInteger_MAX_VALUE) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Underflow"] autorelease];
  }
  else {
    return (int) longScale;
  }
}

+ (JavaMathBigDecimal *)zeroScaledByWithLongInt:(long long int)longScale {
  if (longScale == (int) longScale) {
    return [JavaMathBigDecimal valueOfWithLongInt:0 withInt:(int) longScale];
  }
  if (longScale >= 0) {
    return [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:JavaLangInteger_MAX_VALUE] autorelease];
  }
  return [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:JavaLangInteger_MIN_VALUE] autorelease];
}

- (JavaMathBigInteger *)getUnscaledValue {
  if (intVal_ == nil) {
    JreOperatorRetainedAssign(&intVal_, [JavaMathBigInteger valueOfWithLongInt:smallValue_]);
  }
  return intVal_;
}

- (void)setUnscaledValueWithJavaMathBigInteger:(JavaMathBigInteger *)unscaledValue {
  self.intVal = unscaledValue;
  self.bitLength_ = [((JavaMathBigInteger *) NIL_CHK(unscaledValue)) bitLength];
  if (self.bitLength_ < 64) {
    self.smallValue = [((JavaMathBigInteger *) NIL_CHK(unscaledValue)) longValue];
  }
}

+ (int)bitLengthWithLongInt:(long long int)smallValue {
  if (smallValue < 0) {
    smallValue = ~smallValue;
  }
  return 64 - [JavaLangLong numberOfLeadingZerosWithLongInt:smallValue];
}

+ (int)bitLengthWithInt:(int)smallValue {
  if (smallValue < 0) {
    smallValue = ~smallValue;
  }
  return 32 - [JavaLangInteger numberOfLeadingZerosWithInt:smallValue];
}

+ (void)initialize {
  if (self == [JavaMathBigDecimal class]) {
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ZERO_, [[[JavaMathBigDecimal alloc] initWithInt:0 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ONE_, [[[JavaMathBigDecimal alloc] initWithInt:1 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_TEN_, [[[JavaMathBigDecimal alloc] initWithInt:10 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_TEN_POW_, [IOSLongArray arrayWithLongs:(long long int[]){ 1LL, 10LL, 100LL, 1000LL, 10000LL, 100000LL, 1000000LL, 10000000LL, 100000000LL, 1000000000LL, 10000000000LL, 100000000000LL, 1000000000000LL, 10000000000000LL, 100000000000000LL, 1000000000000000LL, 10000000000000000LL, 100000000000000000LL, 1000000000000000000LL } count:19]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_FIVE_POW_, [IOSLongArray arrayWithLongs:(long long int[]){ 1LL, 5LL, 25LL, 125LL, 625LL, 3125LL, 15625LL, 78125LL, 390625LL, 1953125LL, 9765625LL, 48828125LL, 244140625LL, 1220703125LL, 6103515625LL, 30517578125LL, 152587890625LL, 762939453125LL, 3814697265625LL, 19073486328125LL, 95367431640625LL, 476837158203125LL, 2384185791015625LL, 11920928955078125LL, 59604644775390625LL, 298023223876953125LL, 1490116119384765625LL, 7450580596923828125LL } count:28]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_, [[[IOSIntArray alloc] initWithLength:(int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_)) count]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_, [[[IOSIntArray alloc] initWithLength:(int) [((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) count]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_BI_SCALED_BY_ZERO_, [[[IOSObjectArray alloc] initWithLength:JavaMathBigDecimal_BI_SCALED_BY_ZERO_LENGTH type:[IOSClass classWithClass:[JavaMathBigDecimal class]]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_ZERO_SCALED_BY_, [[[IOSObjectArray alloc] initWithLength:11 type:[IOSClass classWithClass:[JavaMathBigDecimal class]]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigDecimal_CH_ZEROS_, [[[IOSCharArray alloc] initWithLength:100] autorelease]);
    {
      int i = 0;
      for (; i < (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_ZERO_SCALED_BY_)) count]; i++) {
        [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_BI_SCALED_BY_ZERO_)) replaceObjectAtIndex:i withObject:[[[JavaMathBigDecimal alloc] initWithInt:i withInt:0] autorelease]];
        [((IOSObjectArray *) NIL_CHK(JavaMathBigDecimal_ZERO_SCALED_BY_)) replaceObjectAtIndex:i withObject:[[[JavaMathBigDecimal alloc] initWithInt:0 withInt:i] autorelease]];
        [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) replaceCharAtIndex:i withChar:'0'];
      }
      for (; i < (int) [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) count]; i++) {
        [((IOSCharArray *) NIL_CHK(JavaMathBigDecimal_CH_ZEROS_)) replaceCharAtIndex:i withChar:'0'];
      }
      for (int j = 0; j < (int) [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_)) count]; j++) {
        [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_BIT_LENGTH_)) replaceIntAtIndex:j withInt:[JavaMathBigDecimal bitLengthWithLongInt:[((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_FIVE_POW_)) longAtIndex:j]]];
      }
      for (int j = 0; j < (int) [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) count]; j++) {
        [((IOSIntArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_BIT_LENGTH_)) replaceIntAtIndex:j withInt:[JavaMathBigDecimal bitLengthWithLongInt:[((IOSLongArray *) NIL_CHK(JavaMathBigDecimal_LONG_TEN_POW_)) longAtIndex:j]]];
      }
      JreOperatorRetainedAssign(&JavaMathBigDecimal_TEN_POW_, [JavaMathMultiplication bigTenPows]);
      JreOperatorRetainedAssign(&JavaMathBigDecimal_FIVE_POW_, [JavaMathMultiplication bigFivePows]);
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&intVal_, nil);
  JreOperatorRetainedAssign(&toStringImage_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaMathBigDecimal *typedCopy = (JavaMathBigDecimal *) copy;
  typedCopy.toStringImage = toStringImage_;
  typedCopy.hashCode_ = hashCode__;
  typedCopy.intVal = intVal_;
  typedCopy.bitLength_ = bitLength__;
  typedCopy.smallValue = smallValue_;
  typedCopy.scale_ = scale__;
  typedCopy.precision_ = precision__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:toStringImage_ name:@"toStringImage"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:intVal_ name:@"intVal"]];
  return result;
}

@end
