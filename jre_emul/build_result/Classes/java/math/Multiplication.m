//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/Multiplication.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/math/BigInteger.h"
#import "java/math/BitLevel.h"
#import "java/math/Multiplication.h"

@implementation JavaMathMultiplication

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_tenPows_ name:@"JavaMathMultiplication_tenPows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_fivePows_ name:@"JavaMathMultiplication_fivePows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_bigTenPows_ name:@"JavaMathMultiplication_bigTenPows_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathMultiplication_bigFivePows_ name:@"JavaMathMultiplication_bigFivePows_"]];
  return result;
}

static IOSIntArray * JavaMathMultiplication_tenPows_;
static IOSIntArray * JavaMathMultiplication_fivePows_;
static IOSObjectArray * JavaMathMultiplication_bigTenPows_;
static IOSObjectArray * JavaMathMultiplication_bigFivePows_;

+ (int)whenUseKaratsuba {
  return JavaMathMultiplication_whenUseKaratsuba;
}

+ (IOSIntArray *)tenPows {
  return JavaMathMultiplication_tenPows_;
}

+ (IOSIntArray *)fivePows {
  return JavaMathMultiplication_fivePows_;
}

+ (IOSObjectArray *)bigTenPows {
  return JavaMathMultiplication_bigTenPows_;
}

+ (IOSObjectArray *)bigFivePows {
  return JavaMathMultiplication_bigFivePows_;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

+ (JavaMathBigInteger *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)x
                                withJavaMathBigInteger:(JavaMathBigInteger *)y {
  return [JavaMathMultiplication karatsubaWithJavaMathBigInteger:x withJavaMathBigInteger:y];
}

+ (JavaMathBigInteger *)karatsubaWithJavaMathBigInteger:(JavaMathBigInteger *)op1
                                 withJavaMathBigInteger:(JavaMathBigInteger *)op2 {
  JavaMathBigInteger *temp;
  if (((JavaMathBigInteger *) NIL_CHK(op2)).numberLength > ((JavaMathBigInteger *) NIL_CHK(op1)).numberLength) {
    temp = op1;
    op1 = op2;
    op2 = temp;
  }
  if (((JavaMathBigInteger *) NIL_CHK(op2)).numberLength < JavaMathMultiplication_whenUseKaratsuba) {
    return [JavaMathMultiplication multiplyPAPWithJavaMathBigInteger:op1 withJavaMathBigInteger:op2];
  }
  int ndiv2 = (((JavaMathBigInteger *) NIL_CHK(op1)).numberLength & (int) 0xFFFFFFFE) << 4;
  JavaMathBigInteger *upperOp1 = [((JavaMathBigInteger *) NIL_CHK(op1)) shiftRightWithInt:ndiv2];
  JavaMathBigInteger *upperOp2 = [((JavaMathBigInteger *) NIL_CHK(op2)) shiftRightWithInt:ndiv2];
  JavaMathBigInteger *lowerOp1 = [((JavaMathBigInteger *) NIL_CHK(op1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(upperOp1)) shiftLeftWithInt:ndiv2]];
  JavaMathBigInteger *lowerOp2 = [((JavaMathBigInteger *) NIL_CHK(op2)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(upperOp2)) shiftLeftWithInt:ndiv2]];
  JavaMathBigInteger *upper = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:upperOp1 withJavaMathBigInteger:upperOp2];
  JavaMathBigInteger *lower = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:lowerOp1 withJavaMathBigInteger:lowerOp2];
  JavaMathBigInteger *middle = [JavaMathMultiplication karatsubaWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(upperOp1)) subtractWithJavaMathBigInteger:lowerOp1] withJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(lowerOp2)) subtractWithJavaMathBigInteger:upperOp2]];
  middle = [[((JavaMathBigInteger *) NIL_CHK(middle)) addWithJavaMathBigInteger:upper] addWithJavaMathBigInteger:lower];
  middle = [((JavaMathBigInteger *) NIL_CHK(middle)) shiftLeftWithInt:ndiv2];
  upper = [((JavaMathBigInteger *) NIL_CHK(upper)) shiftLeftWithInt:ndiv2 << 1];
  return [[((JavaMathBigInteger *) NIL_CHK(upper)) addWithJavaMathBigInteger:middle] addWithJavaMathBigInteger:lower];
}

+ (JavaMathBigInteger *)multiplyPAPWithJavaMathBigInteger:(JavaMathBigInteger *)a
                                   withJavaMathBigInteger:(JavaMathBigInteger *)b {
  int aLen = ((JavaMathBigInteger *) NIL_CHK(a)).numberLength;
  int bLen = ((JavaMathBigInteger *) NIL_CHK(b)).numberLength;
  int resLength = aLen + bLen;
  int resSign = (((JavaMathBigInteger *) NIL_CHK(a)).sign != ((JavaMathBigInteger *) NIL_CHK(b)).sign) ? -1 : 1;
  if (resLength == 2) {
    long long int val = [JavaMathMultiplication unsignedMultAddAddWithInt:[((IOSIntArray *) NIL_CHK(a.digits)) intAtIndex:0] withInt:[((IOSIntArray *) NIL_CHK(b.digits)) intAtIndex:0] withInt:0 withInt:0];
    int valueLo = (int) val;
    int valueHi = (int) ((long long) (((unsigned long long) val) >> 32));
    return ((valueHi == 0) ? [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:valueLo] autorelease] : [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:2 withJavaLangIntegerArray:[IOSIntArray arrayWithInts:(int[]){ valueLo, valueHi } count:2]] autorelease]);
  }
  IOSIntArray *aDigits = ((JavaMathBigInteger *) NIL_CHK(a)).digits;
  IOSIntArray *bDigits = ((JavaMathBigInteger *) NIL_CHK(b)).digits;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  [JavaMathMultiplication multArraysPAPWithJavaLangIntegerArray:aDigits withInt:aLen withJavaLangIntegerArray:bDigits withInt:bLen withJavaLangIntegerArray:resDigits];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (void)multArraysPAPWithJavaLangIntegerArray:(IOSIntArray *)aDigits
                                      withInt:(int)aLen
                     withJavaLangIntegerArray:(IOSIntArray *)bDigits
                                      withInt:(int)bLen
                     withJavaLangIntegerArray:(IOSIntArray *)resDigits {
  if (aLen == 0 || bLen == 0) return;
  if (aLen == 1) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:bLen withInt:[JavaMathMultiplication multiplyByIntWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:bDigits withInt:bLen withInt:[((IOSIntArray *) NIL_CHK(aDigits)) intAtIndex:0]]];
  }
  else if (bLen == 1) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:aLen withInt:[JavaMathMultiplication multiplyByIntWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:aDigits withInt:aLen withInt:[((IOSIntArray *) NIL_CHK(bDigits)) intAtIndex:0]]];
  }
  else {
    [JavaMathMultiplication multPAPWithJavaLangIntegerArray:aDigits withJavaLangIntegerArray:bDigits withJavaLangIntegerArray:resDigits withInt:aLen withInt:bLen];
  }
}

+ (void)multPAPWithJavaLangIntegerArray:(IOSIntArray *)a
               withJavaLangIntegerArray:(IOSIntArray *)b
               withJavaLangIntegerArray:(IOSIntArray *)t
                                withInt:(int)aLen
                                withInt:(int)bLen {
  if (a == b && aLen == bLen) {
    [JavaMathMultiplication squareWithJavaLangIntegerArray:a withInt:aLen withJavaLangIntegerArray:t];
    return;
  }
  for (int i = 0; i < aLen; i++) {
    long long int carry = 0;
    int aI = [((IOSIntArray *) NIL_CHK(a)) intAtIndex:i];
    for (int j = 0; j < bLen; j++) {
      carry = [JavaMathMultiplication unsignedMultAddAddWithInt:aI withInt:[((IOSIntArray *) NIL_CHK(b)) intAtIndex:j] withInt:[((IOSIntArray *) NIL_CHK(t)) intAtIndex:i + j] withInt:(int) carry];
      [((IOSIntArray *) NIL_CHK(t)) replaceIntAtIndex:i + j withInt:(int) carry];
      carry = (long long) (((unsigned long long) carry) >> 32);
    }
    [((IOSIntArray *) NIL_CHK(t)) replaceIntAtIndex:i + bLen withInt:(int) carry];
  }
}

+ (int)multiplyByIntWithJavaLangIntegerArray:(IOSIntArray *)res
                    withJavaLangIntegerArray:(IOSIntArray *)a
                                     withInt:(int)aSize
                                     withInt:(int)factor {
  long long int carry = 0;
  for (int i = 0; i < aSize; i++) {
    carry = [JavaMathMultiplication unsignedMultAddAddWithInt:[((IOSIntArray *) NIL_CHK(a)) intAtIndex:i] withInt:factor withInt:(int) carry withInt:0];
    [((IOSIntArray *) NIL_CHK(res)) replaceIntAtIndex:i withInt:(int) carry];
    carry = (long long) (((unsigned long long) carry) >> 32);
  }
  return (int) carry;
}

+ (int)multiplyByIntWithJavaLangIntegerArray:(IOSIntArray *)a
                                     withInt:(int)aSize
                                     withInt:(int)factor {
  return [JavaMathMultiplication multiplyByIntWithJavaLangIntegerArray:a withJavaLangIntegerArray:a withInt:aSize withInt:factor];
}

+ (JavaMathBigInteger *)multiplyByPositiveIntWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                            withInt:(int)factor {
  int resSign = ((JavaMathBigInteger *) NIL_CHK(val)).sign;
  if (resSign == 0) {
    return [JavaMathBigInteger ZERO];
  }
  int aNumberLength = ((JavaMathBigInteger *) NIL_CHK(val)).numberLength;
  IOSIntArray *aDigits = ((JavaMathBigInteger *) NIL_CHK(val)).digits;
  if (aNumberLength == 1) {
    long long int res = [JavaMathMultiplication unsignedMultAddAddWithInt:[((IOSIntArray *) NIL_CHK(aDigits)) intAtIndex:0] withInt:factor withInt:0 withInt:0];
    int resLo = (int) res;
    int resHi = (int) ((long long) (((unsigned long long) res) >> 32));
    return ((resHi == 0) ? [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLo] autorelease] : [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:2 withJavaLangIntegerArray:[IOSIntArray arrayWithInts:(int[]){ resLo, resHi } count:2]] autorelease]);
  }
  int resLength = aNumberLength + 1;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:aNumberLength withInt:[JavaMathMultiplication multiplyByIntWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:aDigits withInt:aNumberLength withInt:factor]];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)base
                                          withInt:(int)exponent {
  JavaMathBigInteger *res = [JavaMathBigInteger ONE];
  JavaMathBigInteger *acc = base;
  for (; exponent > 1; exponent >>= 1) {
    if ((exponent & 1) != 0) {
      res = [((JavaMathBigInteger *) NIL_CHK(res)) multiplyWithJavaMathBigInteger:acc];
    }
    if (((JavaMathBigInteger *) NIL_CHK(acc)).numberLength == 1) {
      acc = [((JavaMathBigInteger *) NIL_CHK(acc)) multiplyWithJavaMathBigInteger:acc];
    }
    else {
      acc = [[[JavaMathBigInteger alloc] initWithInt:1 withJavaLangIntegerArray:[JavaMathMultiplication squareWithJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(acc)).digits withInt:((JavaMathBigInteger *) NIL_CHK(acc)).numberLength withJavaLangIntegerArray:[[[IOSIntArray alloc] initWithLength:((JavaMathBigInteger *) NIL_CHK(acc)).numberLength << 1] autorelease]]] autorelease];
    }
  }
  res = [((JavaMathBigInteger *) NIL_CHK(res)) multiplyWithJavaMathBigInteger:acc];
  return res;
}

+ (IOSIntArray *)squareWithJavaLangIntegerArray:(IOSIntArray *)a
                                        withInt:(int)aLen
                       withJavaLangIntegerArray:(IOSIntArray *)res {
  long long int carry;
  for (int i = 0; i < aLen; i++) {
    carry = 0;
    for (int j = i + 1; j < aLen; j++) {
      carry = [JavaMathMultiplication unsignedMultAddAddWithInt:[((IOSIntArray *) NIL_CHK(a)) intAtIndex:i] withInt:[((IOSIntArray *) NIL_CHK(a)) intAtIndex:j] withInt:[((IOSIntArray *) NIL_CHK(res)) intAtIndex:i + j] withInt:(int) carry];
      [((IOSIntArray *) NIL_CHK(res)) replaceIntAtIndex:i + j withInt:(int) carry];
      carry = (long long) (((unsigned long long) carry) >> 32);
    }
    [((IOSIntArray *) NIL_CHK(res)) replaceIntAtIndex:i + aLen withInt:(int) carry];
  }
  [JavaMathBitLevel shiftLeftOneBitWithJavaLangIntegerArray:res withJavaLangIntegerArray:res withInt:aLen << 1];
  carry = 0;
  for (int i = 0, index = 0; i < aLen; i++, index++) {
    carry = [JavaMathMultiplication unsignedMultAddAddWithInt:[((IOSIntArray *) NIL_CHK(a)) intAtIndex:i] withInt:[((IOSIntArray *) NIL_CHK(a)) intAtIndex:i] withInt:[((IOSIntArray *) NIL_CHK(res)) intAtIndex:index] withInt:(int) carry];
    [((IOSIntArray *) NIL_CHK(res)) replaceIntAtIndex:index withInt:(int) carry];
    carry = (long long) (((unsigned long long) carry) >> 32);
    index++;
    carry += [((IOSIntArray *) NIL_CHK(res)) intAtIndex:index] & (long long) 0xFFFFFFFFLL;
    [((IOSIntArray *) NIL_CHK(res)) replaceIntAtIndex:index withInt:(int) carry];
    carry = (long long) (((unsigned long long) carry) >> 32);
  }
  return res;
}

+ (JavaMathBigInteger *)multiplyByTenPowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                   withLongInt:(long long int)exp {
  return ((exp < (int) [((IOSIntArray *) NIL_CHK(JavaMathMultiplication_tenPows_)) count]) ? [JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:val withInt:[((IOSIntArray *) NIL_CHK(JavaMathMultiplication_tenPows_)) intAtIndex:(int) exp]] : [((JavaMathBigInteger *) NIL_CHK(val)) multiplyWithJavaMathBigInteger:[JavaMathMultiplication powerOf10WithLongInt:exp]]);
}

+ (JavaMathBigInteger *)powerOf10WithLongInt:(long long int)exp {
  int intExp = (int) exp;
  if (exp < (int) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) count]) {
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) objectAtIndex:intExp]);
  }
  else if (exp <= 50) {
    return [((JavaMathBigInteger *) NIL_CHK([JavaMathBigInteger TEN])) powWithInt:intExp];
  }
  else if (exp <= 1000) {
    return [[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1]) powWithInt:intExp] shiftLeftWithInt:intExp];
  }
  if (exp <= JavaLangInteger_MAX_VALUE) {
    return [[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1]) powWithInt:intExp] shiftLeftWithInt:intExp];
  }
  JavaMathBigInteger *powerOfFive = [((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1]) powWithInt:JavaLangInteger_MAX_VALUE];
  JavaMathBigInteger *res = powerOfFive;
  long long int longExp = exp - JavaLangInteger_MAX_VALUE;
  intExp = (int) (exp % JavaLangInteger_MAX_VALUE);
  while (longExp > JavaLangInteger_MAX_VALUE) {
    res = [((JavaMathBigInteger *) NIL_CHK(res)) multiplyWithJavaMathBigInteger:powerOfFive];
    longExp -= JavaLangInteger_MAX_VALUE;
  }
  res = [((JavaMathBigInteger *) NIL_CHK(res)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1]) powWithInt:intExp]];
  res = [((JavaMathBigInteger *) NIL_CHK(res)) shiftLeftWithInt:JavaLangInteger_MAX_VALUE];
  longExp = exp - JavaLangInteger_MAX_VALUE;
  while (longExp > JavaLangInteger_MAX_VALUE) {
    res = [((JavaMathBigInteger *) NIL_CHK(res)) shiftLeftWithInt:JavaLangInteger_MAX_VALUE];
    longExp -= JavaLangInteger_MAX_VALUE;
  }
  res = [((JavaMathBigInteger *) NIL_CHK(res)) shiftLeftWithInt:intExp];
  return res;
}

+ (JavaMathBigInteger *)multiplyByFivePowWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                                        withInt:(int)exp {
  if (exp < (int) [((IOSIntArray *) NIL_CHK(JavaMathMultiplication_fivePows_)) count]) {
    return [JavaMathMultiplication multiplyByPositiveIntWithJavaMathBigInteger:val withInt:[((IOSIntArray *) NIL_CHK(JavaMathMultiplication_fivePows_)) intAtIndex:exp]];
  }
  else if (exp < (int) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) count]) {
    return [((JavaMathBigInteger *) NIL_CHK(val)) multiplyWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:exp])];
  }
  else {
    return [((JavaMathBigInteger *) NIL_CHK(val)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1]) powWithInt:exp]];
  }
}

+ (long long int)unsignedMultAddAddWithInt:(int)a
                                   withInt:(int)b
                                   withInt:(int)c
                                   withInt:(int)d {
  return (a & (long long) 0xFFFFFFFFLL) * (b & (long long) 0xFFFFFFFFLL) + (c & (long long) 0xFFFFFFFFLL) + (d & (long long) 0xFFFFFFFFLL);
}

+ (void)initialize {
  if (self == [JavaMathMultiplication class]) {
    JreOperatorRetainedAssign(&JavaMathMultiplication_tenPows_, [IOSIntArray arrayWithInts:(int[]){ 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 } count:10]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_fivePows_, [IOSIntArray arrayWithInts:(int[]){ 1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125 } count:14]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_bigTenPows_, [[[IOSObjectArray alloc] initWithLength:32 type:[IOSClass classWithClass:[JavaMathBigInteger class]]] autorelease]);
    JreOperatorRetainedAssign(&JavaMathMultiplication_bigFivePows_, [[[IOSObjectArray alloc] initWithLength:32 type:[IOSClass classWithClass:[JavaMathBigInteger class]]] autorelease]);
    {
      int i;
      long long int fivePow = 1LL;
      for (i = 0; i <= 18; i++) {
        [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) replaceObjectAtIndex:i withObject:[JavaMathBigInteger valueOfWithLongInt:fivePow]];
        [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) replaceObjectAtIndex:i withObject:[JavaMathBigInteger valueOfWithLongInt:fivePow << i]];
        fivePow *= 5;
      }
      for (; i < (int) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) count]; i++) {
        [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) replaceObjectAtIndex:i withObject:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:i - 1]) multiplyWithJavaMathBigInteger:((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigFivePows_)) objectAtIndex:1])]];
        [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) replaceObjectAtIndex:i withObject:[((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathMultiplication_bigTenPows_)) objectAtIndex:i - 1]) multiplyWithJavaMathBigInteger:[JavaMathBigInteger TEN]]];
      }
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
