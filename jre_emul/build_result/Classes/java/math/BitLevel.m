//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BitLevel.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSIntArray.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/lang/System.h"
#import "java/math/BigInteger.h"
#import "java/math/BitLevel.h"

@implementation JavaMathBitLevel

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return (self = JreMemDebugAdd([super init]));
}

+ (int)bitLengthWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return 0;
  }
  int bLength = (((JavaMathBigInteger *) NIL_CHK(val)).numberLength << 5);
  int highDigit = [((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:((JavaMathBigInteger *) NIL_CHK(val)).numberLength - 1];
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign < 0) {
    int i = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
    if (i == ((JavaMathBigInteger *) NIL_CHK(val)).numberLength - 1) {
      highDigit--;
    }
  }
  bLength -= [JavaLangInteger numberOfLeadingZerosWithInt:highDigit];
  return bLength;
}

+ (int)bitCountWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  int bCount = 0;
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return 0;
  }
  int i = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
  ;
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign > 0) {
    for (; i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength; i++) {
      bCount += [JavaLangInteger bitCountWithInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
    }
  }
  else {
    bCount += [JavaLangInteger bitCountWithInt:-[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
    for (i++; i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength; i++) {
      bCount += [JavaLangInteger bitCountWithInt:~[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i]];
    }
    bCount = (((JavaMathBigInteger *) NIL_CHK(val)).numberLength << 5) - bCount;
  }
  return bCount;
}

+ (BOOL)testBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                              withInt:(int)n {
  return (([((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:n >> 5] & (1 << (n & 31))) != 0);
}

+ (BOOL)nonZeroDroppedBitsWithInt:(int)numberOfBits
         withJavaLangIntegerArray:(IOSIntArray *)digits {
  int intCount = numberOfBits >> 5;
  int bitCount = numberOfBits & 31;
  int i;
  for (i = 0; (i < intCount) && ([((IOSIntArray *) NIL_CHK(digits)) intAtIndex:i] == 0); i++) {
    ;
  }
  return ((i != intCount) || ([((IOSIntArray *) NIL_CHK(digits)) intAtIndex:i] << (32 - bitCount) != 0));
}

+ (JavaMathBigInteger *)shiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                withInt:(int)count {
  int intCount = count >> 5;
  count &= 31;
  int resLength = ((JavaMathBigInteger *) NIL_CHK(source)).numberLength + intCount + ((count == 0) ? 0 : 1);
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  [JavaMathBitLevel shiftLeftWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(source)).digits withInt:intCount withInt:count];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:((JavaMathBigInteger *) NIL_CHK(source)).sign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (void)inplaceShiftLeftWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                       withInt:(int)count {
  int intCount = count >> 5;
  ((JavaMathBigInteger *) NIL_CHK(val)).numberLength += intCount + ([JavaLangInteger numberOfLeadingZerosWithInt:[((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:((JavaMathBigInteger *) NIL_CHK(val)).numberLength - 1]] - (count & 31) >= 0 ? 0 : 1);
  [JavaMathBitLevel shiftLeftWithJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(val)).digits withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(val)).digits withInt:intCount withInt:count & 31];
  [((JavaMathBigInteger *) NIL_CHK(val)) cutOffLeadingZeroes];
  [((JavaMathBigInteger *) NIL_CHK(val)) unCache];
}

+ (void)shiftLeftWithJavaLangIntegerArray:(IOSIntArray *)result
                 withJavaLangIntegerArray:(IOSIntArray *)source
                                  withInt:(int)intCount
                                  withInt:(int)count {
  if (count == 0) {
    [JavaLangSystem arraycopyWithId:source withInt:0 withId:result withInt:intCount withInt:(int) [((IOSIntArray *) NIL_CHK(result)) count] - intCount];
  }
  else {
    int rightShiftCount = 32 - count;
    [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:(int) [((IOSIntArray *) NIL_CHK(result)) count] - 1 withInt:0];
    for (int i = (int) [((IOSIntArray *) NIL_CHK(result)) count] - 1; i > intCount; i--) {
      [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i withInt:[result intAtIndex:i] | (int) (((unsigned int) [((IOSIntArray *) NIL_CHK(source)) intAtIndex:i - intCount - 1]) >> rightShiftCount)];
      [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i - 1 withInt:[((IOSIntArray *) NIL_CHK(source)) intAtIndex:i - intCount - 1] << count];
    }
  }
  for (int i = 0; i < intCount; i++) {
    [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i withInt:0];
  }
}

+ (void)shiftLeftOneBitWithJavaLangIntegerArray:(IOSIntArray *)result
                       withJavaLangIntegerArray:(IOSIntArray *)source
                                        withInt:(int)srcLen {
  int carry = 0;
  for (int i = 0; i < srcLen; i++) {
    int val = [((IOSIntArray *) NIL_CHK(source)) intAtIndex:i];
    [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i withInt:(val << 1) | carry];
    carry = (int) (((unsigned int) val) >> 31);
  }
  if (carry != 0) {
    [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:srcLen withInt:carry];
  }
}

+ (JavaMathBigInteger *)shiftLeftOneBitWithJavaMathBigInteger:(JavaMathBigInteger *)source {
  int srcLen = ((JavaMathBigInteger *) NIL_CHK(source)).numberLength;
  int resLen = srcLen + 1;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLen] autorelease];
  [JavaMathBitLevel shiftLeftOneBitWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(source)).digits withInt:srcLen];
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:((JavaMathBigInteger *) NIL_CHK(source)).sign withInt:resLen withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (JavaMathBigInteger *)shiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)source
                                                 withInt:(int)count {
  int intCount = count >> 5;
  count &= 31;
  if (intCount >= ((JavaMathBigInteger *) NIL_CHK(source)).numberLength) {
    return ((((JavaMathBigInteger *) NIL_CHK(source)).sign < 0) ? [JavaMathBigInteger MINUS_ONE] : [JavaMathBigInteger ZERO]);
  }
  int i;
  int resLength = ((JavaMathBigInteger *) NIL_CHK(source)).numberLength - intCount;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength + 1] autorelease];
  [JavaMathBitLevel shiftRightWithJavaLangIntegerArray:resDigits withInt:resLength withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(source)).digits withInt:intCount withInt:count];
  if (((JavaMathBigInteger *) NIL_CHK(source)).sign < 0) {
    for (i = 0; (i < intCount) && ([((IOSIntArray *) NIL_CHK(source.digits)) intAtIndex:i] == 0); i++) {
      ;
    }
    if ((i < intCount) || ((count > 0) && (([((IOSIntArray *) NIL_CHK(source.digits)) intAtIndex:i] << (32 - count)) != 0))) {
      for (i = 0; (i < resLength) && ([((IOSIntArray *) NIL_CHK(resDigits)) intAtIndex:i] == -1); i++) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:0];
      }
      if (i == resLength) {
        resLength++;
      }
      [((IOSIntArray *) NIL_CHK(resDigits)) postIncr:i];
    }
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:((JavaMathBigInteger *) NIL_CHK(source)).sign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

+ (void)inplaceShiftRightWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                        withInt:(int)count {
  int sign = [((JavaMathBigInteger *) NIL_CHK(val)) signum];
  if (count == 0 || [((JavaMathBigInteger *) NIL_CHK(val)) signum] == 0) return;
  int intCount = count >> 5;
  ((JavaMathBigInteger *) NIL_CHK(val)).numberLength -= intCount;
  if (![JavaMathBitLevel shiftRightWithJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(val)).digits withInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(val)).digits withInt:intCount withInt:count & 31] && sign < 0) {
    int i;
    for (i = 0; (i < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) && ([((IOSIntArray *) NIL_CHK(val.digits)) intAtIndex:i] == -1); i++) {
      [((IOSIntArray *) NIL_CHK(val.digits)) replaceIntAtIndex:i withInt:0];
    }
    if (i == ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
      ((JavaMathBigInteger *) NIL_CHK(val)).numberLength++;
    }
    [((IOSIntArray *) NIL_CHK(val.digits)) postIncr:i];
  }
  [((JavaMathBigInteger *) NIL_CHK(val)) cutOffLeadingZeroes];
  [((JavaMathBigInteger *) NIL_CHK(val)) unCache];
}

+ (BOOL)shiftRightWithJavaLangIntegerArray:(IOSIntArray *)result
                                   withInt:(int)resultLen
                  withJavaLangIntegerArray:(IOSIntArray *)source
                                   withInt:(int)intCount
                                   withInt:(int)count {
  int i;
  BOOL allZero = YES;
  for (i = 0; i < intCount; i++) allZero &= [((IOSIntArray *) NIL_CHK(source)) intAtIndex:i] == 0;
  if (count == 0) {
    [JavaLangSystem arraycopyWithId:source withInt:intCount withId:result withInt:0 withInt:resultLen];
    i = resultLen;
  }
  else {
    int leftShiftCount = 32 - count;
    allZero &= ([((IOSIntArray *) NIL_CHK(source)) intAtIndex:i] << leftShiftCount) == 0;
    for (i = 0; i < resultLen - 1; i++) {
      [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i withInt:((int) (((unsigned int) [((IOSIntArray *) NIL_CHK(source)) intAtIndex:i + intCount]) >> count)) | ([((IOSIntArray *) NIL_CHK(source)) intAtIndex:i + intCount + 1] << leftShiftCount)];
    }
    [((IOSIntArray *) NIL_CHK(result)) replaceIntAtIndex:i withInt:((int) (((unsigned int) [((IOSIntArray *) NIL_CHK(source)) intAtIndex:i + intCount]) >> count))];
    i++;
  }
  return allZero;
}

+ (JavaMathBigInteger *)flipBitWithJavaMathBigInteger:(JavaMathBigInteger *)val
                                              withInt:(int)n {
  int resSign = (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) ? 1 : ((JavaMathBigInteger *) NIL_CHK(val)).sign;
  int intCount = n >> 5;
  int bitN = n & 31;
  int resLength = [JavaLangMath maxWithInt:intCount + 1 withInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength] + 1;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int i;
  int bitNumber = 1 << bitN;
  [JavaLangSystem arraycopyWithId:((JavaMathBigInteger *) NIL_CHK(val)).digits withInt:0 withId:resDigits withInt:0 withInt:((JavaMathBigInteger *) NIL_CHK(val)).numberLength];
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign < 0) {
    if (intCount >= ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
      [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:intCount withInt:bitNumber];
    }
    else {
      int firstNonZeroDigit = [((JavaMathBigInteger *) NIL_CHK(val)) getFirstNonzeroDigit];
      if (intCount > firstNonZeroDigit) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:intCount withInt:[resDigits intAtIndex:intCount] ^ bitNumber];
      }
      else if (intCount < firstNonZeroDigit) {
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:intCount withInt:-bitNumber];
        for (i = intCount + 1; i < firstNonZeroDigit; i++) {
          [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-1];
        }
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:[((IOSIntArray *) NIL_CHK(resDigits)) postDecr:i]];
      }
      else {
        i = intCount;
        [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:-((-[((IOSIntArray *) NIL_CHK(resDigits)) intAtIndex:intCount]) ^ bitNumber)];
        if ([((IOSIntArray *) NIL_CHK(resDigits)) intAtIndex:i] == 0) {
          for (i++; [((IOSIntArray *) NIL_CHK(resDigits)) intAtIndex:i] == -1; i++) {
            [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:i withInt:0];
          }
          [((IOSIntArray *) NIL_CHK(resDigits)) postIncr:i];
        }
      }
    }
  }
  else {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:intCount withInt:[resDigits intAtIndex:intCount] ^ bitNumber];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
