//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/math/src/main/java/java/math/BigInteger.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSByteArray.h"
#import "IOSClass.h"
#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/lang/ArithmeticException.h"
#import "java/lang/Character.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/NumberFormatException.h"
#import "java/lang/System.h"
#import "java/math/BigInteger.h"
#import "java/math/BitLevel.h"
#import "java/math/Conversion.h"
#import "java/math/Division.h"
#import "java/math/Elementary.h"
#import "java/math/Logical.h"
#import "java/math/Multiplication.h"
#import "java/math/Primality.h"
#import "java/util/Random.h"

@implementation JavaMathBigInteger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_ZERO_ name:@"JavaMathBigInteger_ZERO_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_ONE_ name:@"JavaMathBigInteger_ONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_TEN_ name:@"JavaMathBigInteger_TEN_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_MINUS_ONE_ name:@"JavaMathBigInteger_MINUS_ONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_SMALL_VALUES_ name:@"JavaMathBigInteger_SMALL_VALUES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaMathBigInteger_TWO_POWS_ name:@"JavaMathBigInteger_TWO_POWS_"]];
  return result;
}

static JavaMathBigInteger * JavaMathBigInteger_ZERO_;
static JavaMathBigInteger * JavaMathBigInteger_ONE_;
static JavaMathBigInteger * JavaMathBigInteger_TEN_;
static JavaMathBigInteger * JavaMathBigInteger_MINUS_ONE_;
static IOSObjectArray * JavaMathBigInteger_SMALL_VALUES_;
static IOSObjectArray * JavaMathBigInteger_TWO_POWS_;

- (IOSIntArray *)digits {
  return digits_;
}
- (void)setDigits:(IOSIntArray *)digits {
  JreOperatorRetainedAssign(&digits_, digits);
}
@synthesize digits = digits_;
@synthesize numberLength = numberLength_;
@synthesize sign = sign_;
@synthesize firstNonzeroDigit = firstNonzeroDigit_;
@synthesize signum_ = signum__;
- (IOSByteArray *)magnitude {
  return magnitude_;
}
- (void)setMagnitude:(IOSByteArray *)magnitude {
  JreOperatorRetainedAssign(&magnitude_, magnitude);
}
@synthesize magnitude = magnitude_;
@synthesize hashCode_ = hashCode__;

+ (JavaMathBigInteger *)ZERO {
  return JavaMathBigInteger_ZERO_;
}

+ (JavaMathBigInteger *)ONE {
  return JavaMathBigInteger_ONE_;
}

+ (JavaMathBigInteger *)TEN {
  return JavaMathBigInteger_TEN_;
}

+ (JavaMathBigInteger *)MINUS_ONE {
  return JavaMathBigInteger_MINUS_ONE_;
}

+ (int)EQUALS {
  return JavaMathBigInteger_EQUALS;
}

+ (int)GREATER {
  return JavaMathBigInteger_GREATER;
}

+ (int)LESS {
  return JavaMathBigInteger_LESS;
}

+ (IOSObjectArray *)SMALL_VALUES {
  return JavaMathBigInteger_SMALL_VALUES_;
}

+ (IOSObjectArray *)TWO_POWS {
  return JavaMathBigInteger_TWO_POWS_;
}

- (id)initWithInt:(int)numBits
withJavaUtilRandom:(JavaUtilRandom *)rnd {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if (numBits < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"numBits must be non-negative"] autorelease];
    }
    if (numBits == 0) {
      sign_ = 0;
      numberLength_ = 1;
      JreOperatorRetainedAssign(&digits_, [IOSIntArray arrayWithInts:(int[]){ 0 } count:1]);
    }
    else {
      sign_ = 1;
      numberLength_ = (numBits + 31) >> 5;
      JreOperatorRetainedAssign(&digits_, [[[IOSIntArray alloc] initWithLength:numberLength_] autorelease]);
      for (int i = 0; i < numberLength_; i++) {
        [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:[((JavaUtilRandom *) NIL_CHK(rnd)) nextInt]];
      }
      [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:numberLength_ - 1 withInt:(int) (((unsigned int) [digits_ intAtIndex:numberLength_ - 1]) >> (-numBits) & 31)];
      [self cutOffLeadingZeroes];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)bitLength
          withInt:(int)certainty
withJavaUtilRandom:(JavaUtilRandom *)rnd {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if (bitLength < 2) {
      @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"bitLength < 2"] autorelease];
    }
    JavaMathBigInteger *me = [JavaMathPrimality consBigIntegerWithInt:bitLength withInt:certainty withJavaUtilRandom:rnd];
    sign_ = ((JavaMathBigInteger *) NIL_CHK(me)).sign;
    numberLength_ = ((JavaMathBigInteger *) NIL_CHK(me)).numberLength;
    JreOperatorRetainedAssign(&digits_, ((JavaMathBigInteger *) NIL_CHK(me)).digits);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)val {
  return JreMemDebugAdd([self initJavaMathBigIntegerWithNSString:val withInt:10]);
}

- (id)initJavaMathBigIntegerWithNSString:(NSString *)val
                                 withInt:(int)radix {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if (val == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    if ((radix < JavaLangCharacter_MIN_RADIX) || (radix > JavaLangCharacter_MAX_RADIX)) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Radix out of range"] autorelease];
    }
    if ([NIL_CHK(val) length] == 0) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Zero length BigInteger"] autorelease];
    }
    [JavaMathBigInteger setFromStringWithJavaMathBigInteger:self withNSString:val withInt:radix];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)val
               withInt:(int)radix {
  return [self initJavaMathBigIntegerWithNSString:val withInt:radix];
}

- (id)initWithInt:(int)signum
withJavaLangByteArray:(IOSByteArray *)magnitude {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if (magnitude == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    if ((signum < -1) || (signum > 1)) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Invalid signum value"] autorelease];
    }
    if (signum == 0) {
      {
        IOSByteArray *a__ = magnitude;
        int n__ = (int) [((IOSByteArray *) NIL_CHK(a__)) count];
        for (int i__ = 0; i__ < n__; i__++) {
          char element = [((IOSByteArray *) NIL_CHK(a__)) byteAtIndex:i__];
          if (element != 0) {
            @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"signum-magnitude mismatch"] autorelease];
          }
        }
      }
    }
    if ((int) [((IOSByteArray *) NIL_CHK(magnitude)) count] == 0) {
      sign_ = 0;
      numberLength_ = 1;
      JreOperatorRetainedAssign(&digits_, [IOSIntArray arrayWithInts:(int[]){ 0 } count:1]);
    }
    else {
      sign_ = signum;
      [self putBytesPositiveToIntegersWithJavaLangByteArray:magnitude];
      [self cutOffLeadingZeroes];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangByteArray:(IOSByteArray *)val {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if ((int) [((IOSByteArray *) NIL_CHK(val)) count] == 0) {
      @throw [[[JavaLangNumberFormatException alloc] initWithNSString:@"Zero length BigInteger"] autorelease];
    }
    if ([((IOSByteArray *) NIL_CHK(val)) byteAtIndex:0] < 0) {
      sign_ = -1;
      [self putBytesNegativeToIntegersWithJavaLangByteArray:val];
    }
    else {
      sign_ = 1;
      [self putBytesPositiveToIntegersWithJavaLangByteArray:val];
    }
    [self cutOffLeadingZeroes];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)sign
          withInt:(int)value {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    self.sign = sign;
    numberLength_ = 1;
    JreOperatorRetainedAssign(&digits_, [IOSIntArray arrayWithInts:(int[]){ value } count:1]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)sign
          withInt:(int)numberLength
withJavaLangIntegerArray:(IOSIntArray *)digits {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    self.sign = sign;
    self.numberLength = numberLength;
    self.digits = digits;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)sign
      withLongInt:(long long int)val {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    self.sign = sign;
    if ((val & (long long) 0xFFFFFFFF00000000LL) == 0) {
      numberLength_ = 1;
      JreOperatorRetainedAssign(&digits_, [IOSIntArray arrayWithInts:(int[]){ (int) val } count:1]);
    }
    else {
      numberLength_ = 2;
      JreOperatorRetainedAssign(&digits_, [IOSIntArray arrayWithInts:(int[]){ (int) val, (int) (val >> 32) } count:2]);
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)signum
withJavaLangIntegerArray:(IOSIntArray *)digits {
  if ((self = [super init])) {
    firstNonzeroDigit_ = -2;
    hashCode__ = 0;
    if ((int) [((IOSIntArray *) NIL_CHK(digits)) count] == 0) {
      sign_ = 0;
      numberLength_ = 1;
      self.digits = [IOSIntArray arrayWithInts:(int[]){ 0 } count:1];
    }
    else {
      sign_ = signum;
      numberLength_ = (int) [((IOSIntArray *) NIL_CHK(digits)) count];
      self.digits = digits;
      [self cutOffLeadingZeroes];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

+ (JavaMathBigInteger *)valueOfWithLongInt:(long long int)val {
  if (val < 0) {
    if (val != -1) {
      return [[[JavaMathBigInteger alloc] initWithInt:-1 withLongInt:-val] autorelease];
    }
    return JavaMathBigInteger_MINUS_ONE_;
  }
  else if (val <= 10) {
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigInteger_SMALL_VALUES_)) objectAtIndex:(int) val]);
  }
  else {
    return [[[JavaMathBigInteger alloc] initWithInt:1 withLongInt:val] autorelease];
  }
}

- (IOSByteArray *)toByteArray {
  if (self.sign == 0) {
    return [IOSByteArray arrayWithBytes:(char[]){ 0 } count:1];
  }
  JavaMathBigInteger *temp = self;
  int bitLen = [self bitLength];
  int iThis = [self getFirstNonzeroDigit];
  int bytesLen = (bitLen >> 3) + 1;
  IOSByteArray *bytes = [[[IOSByteArray alloc] initWithLength:bytesLen] autorelease];
  int firstByteNumber = 0;
  int highBytes;
  int digitIndex = 0;
  int bytesInInteger = 4;
  int digit;
  int hB;
  if (bytesLen - (numberLength_ << 2) == 1) {
    [((IOSByteArray *) NIL_CHK(bytes)) replaceByteAtIndex:0 withByte:(char) ((sign_ < 0) ? -1 : 0)];
    highBytes = 4;
    firstByteNumber++;
  }
  else {
    hB = bytesLen & 3;
    highBytes = (hB == 0) ? 4 : hB;
  }
  digitIndex = iThis;
  bytesLen -= iThis << 2;
  if (sign_ < 0) {
    digit = -[((IOSIntArray *) NIL_CHK(temp.digits)) intAtIndex:digitIndex];
    digitIndex++;
    if (digitIndex == numberLength_) {
      bytesInInteger = highBytes;
    }
    for (int i = 0; i < bytesInInteger; i++, digit >>= 8) {
      [((IOSByteArray *) NIL_CHK(bytes)) replaceByteAtIndex:--bytesLen withByte:(char) digit];
    }
    while (bytesLen > firstByteNumber) {
      digit = ~[((IOSIntArray *) NIL_CHK(temp.digits)) intAtIndex:digitIndex];
      digitIndex++;
      if (digitIndex == numberLength_) {
        bytesInInteger = highBytes;
      }
      for (int i = 0; i < bytesInInteger; i++, digit >>= 8) {
        [((IOSByteArray *) NIL_CHK(bytes)) replaceByteAtIndex:--bytesLen withByte:(char) digit];
      }
    }
  }
  else {
    while (bytesLen > firstByteNumber) {
      digit = [((IOSIntArray *) NIL_CHK(temp.digits)) intAtIndex:digitIndex];
      digitIndex++;
      if (digitIndex == numberLength_) {
        bytesInInteger = highBytes;
      }
      for (int i = 0; i < bytesInInteger; i++, digit >>= 8) {
        [((IOSByteArray *) NIL_CHK(bytes)) replaceByteAtIndex:--bytesLen withByte:(char) digit];
      }
    }
  }
  return bytes;
}

+ (void)setFromStringWithJavaMathBigInteger:(JavaMathBigInteger *)bi
                               withNSString:(NSString *)val
                                    withInt:(int)radix {
  int sign;
  IOSIntArray *digits;
  int numberLength;
  int stringLength = [NIL_CHK(val) length];
  int startChar;
  int endChar = stringLength;
  if ([NIL_CHK(val) charAtWithInt:0] == '-') {
    sign = -1;
    startChar = 1;
    stringLength--;
  }
  else {
    sign = 1;
    startChar = 0;
  }
  int charsPerInt = [((IOSIntArray *) NIL_CHK([JavaMathConversion digitFitInInt])) intAtIndex:radix];
  int bigRadixDigitsLength = stringLength / charsPerInt;
  int topChars = stringLength % charsPerInt;
  if (topChars != 0) {
    bigRadixDigitsLength++;
  }
  digits = [[[IOSIntArray alloc] initWithLength:bigRadixDigitsLength] autorelease];
  int bigRadix = [((IOSIntArray *) NIL_CHK([JavaMathConversion bigRadices])) intAtIndex:radix - 2];
  int digitIndex = 0;
  int substrEnd = startChar + ((topChars == 0) ? charsPerInt : topChars);
  int newDigit;
  for (int substrStart = startChar; substrStart < endChar; substrStart = substrEnd, substrEnd = substrStart + charsPerInt) {
    int bigRadixDigit = [JavaLangInteger parseIntWithNSString:[NIL_CHK(val) substring:substrStart endIndex:substrEnd] withInt:radix];
    newDigit = [JavaMathMultiplication multiplyByIntWithJavaLangIntegerArray:digits withInt:digitIndex withInt:bigRadix];
    newDigit += [JavaMathElementary inplaceAddWithJavaLangIntegerArray:digits withInt:digitIndex withInt:bigRadixDigit];
    [((IOSIntArray *) NIL_CHK(digits)) replaceIntAtIndex:digitIndex++ withInt:newDigit];
  }
  numberLength = digitIndex;
  ((JavaMathBigInteger *) NIL_CHK(bi)).sign = sign;
  ((JavaMathBigInteger *) NIL_CHK(bi)).numberLength = numberLength;
  ((JavaMathBigInteger *) NIL_CHK(bi)).digits = digits;
  [((JavaMathBigInteger *) NIL_CHK(bi)) cutOffLeadingZeroes];
}

- (JavaMathBigInteger *)abs {
  return ((sign_ < 0) ? [[[JavaMathBigInteger alloc] initWithInt:1 withInt:numberLength_ withJavaLangIntegerArray:digits_] autorelease] : self);
}

- (JavaMathBigInteger *)negate {
  return ((sign_ == 0) ? self : [[[JavaMathBigInteger alloc] initWithInt:-sign_ withInt:numberLength_ withJavaLangIntegerArray:digits_] autorelease]);
}

- (JavaMathBigInteger *)addWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathElementary addWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (JavaMathBigInteger *)subtractWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathElementary subtractWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (int)signum {
  return sign_;
}

- (JavaMathBigInteger *)shiftRightWithInt:(int)n {
  if ((n == 0) || (sign_ == 0)) {
    return self;
  }
  return ((n > 0) ? [JavaMathBitLevel shiftRightWithJavaMathBigInteger:self withInt:n] : [JavaMathBitLevel shiftLeftWithJavaMathBigInteger:self withInt:-n]);
}

- (JavaMathBigInteger *)shiftLeftWithInt:(int)n {
  if ((n == 0) || (sign_ == 0)) {
    return self;
  }
  return ((n > 0) ? [JavaMathBitLevel shiftLeftWithJavaMathBigInteger:self withInt:n] : [JavaMathBitLevel shiftRightWithJavaMathBigInteger:self withInt:-n]);
}

- (JavaMathBigInteger *)shiftLeftOneBit {
  return (sign_ == 0) ? self : [JavaMathBitLevel shiftLeftOneBitWithJavaMathBigInteger:self];
}

- (int)bitLength {
  return [JavaMathBitLevel bitLengthWithJavaMathBigInteger:self];
}

- (BOOL)testBitWithInt:(int)n {
  if (n == 0) {
    return (([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0] & 1) != 0);
  }
  if (n < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Negative bit address"] autorelease];
  }
  int intCount = n >> 5;
  if (intCount >= numberLength_) {
    return (sign_ < 0);
  }
  int digit = [((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:intCount];
  n = (1 << (n & 31));
  if (sign_ < 0) {
    int firstNonZeroDigit = [self getFirstNonzeroDigit];
    if (intCount < firstNonZeroDigit) {
      return NO;
    }
    else if (firstNonZeroDigit == intCount) {
      digit = -digit;
    }
    else {
      digit = ~digit;
    }
  }
  return ((digit & n) != 0);
}

- (JavaMathBigInteger *)setBitWithInt:(int)n {
  if (![self testBitWithInt:n]) {
    return [JavaMathBitLevel flipBitWithJavaMathBigInteger:self withInt:n];
  }
  return self;
}

- (JavaMathBigInteger *)clearBitWithInt:(int)n {
  if ([self testBitWithInt:n]) {
    return [JavaMathBitLevel flipBitWithJavaMathBigInteger:self withInt:n];
  }
  return self;
}

- (JavaMathBigInteger *)flipBitWithInt:(int)n {
  if (n < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Negative bit address"] autorelease];
  }
  return [JavaMathBitLevel flipBitWithJavaMathBigInteger:self withInt:n];
}

- (int)getLowestSetBit {
  if (sign_ == 0) {
    return -1;
  }
  int i = [self getFirstNonzeroDigit];
  return ((i << 5) + [JavaLangInteger numberOfTrailingZerosWithInt:[((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i]]);
}

- (int)bitCount {
  return [JavaMathBitLevel bitCountWithJavaMathBigInteger:self];
}

- (JavaMathBigInteger *)not__ {
  return [JavaMathLogical not__WithJavaMathBigInteger:self];
}

- (JavaMathBigInteger *)andWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathLogical andWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (JavaMathBigInteger *)orWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathLogical orWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (JavaMathBigInteger *)xorWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathLogical xorWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (JavaMathBigInteger *)andNotWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return [JavaMathLogical andNotWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (int)intValue {
  return (sign_ * [((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0]);
}

- (long long int)longValue {
  long long int value = (numberLength_ > 1) ? (((long long int) [((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:1]) << 32) | ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0] & (long long) 0xFFFFFFFFLL) : ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0] & (long long) 0xFFFFFFFFLL);
  return (sign_ * value);
}

- (float)floatValue {
  return (float) [self doubleValue];
}

- (double)doubleValue {
  return [JavaMathConversion bigInteger2DoubleWithJavaMathBigInteger:self];
}

- (int)compareToWithId:(JavaMathBigInteger *)val {
  if (val != nil && ![val isKindOfClass:[JavaMathBigInteger class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (sign_ > ((JavaMathBigInteger *) NIL_CHK(val)).sign) {
    return JavaMathBigInteger_GREATER;
  }
  if (sign_ < ((JavaMathBigInteger *) NIL_CHK(val)).sign) {
    return JavaMathBigInteger_LESS;
  }
  if (numberLength_ > ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
    return sign_;
  }
  if (numberLength_ < ((JavaMathBigInteger *) NIL_CHK(val)).numberLength) {
    return -((JavaMathBigInteger *) NIL_CHK(val)).sign;
  }
  return (sign_ * [JavaMathElementary compareArraysWithJavaLangIntegerArray:digits_ withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(val)).digits withInt:numberLength_]);
}

- (JavaMathBigInteger *)minWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return (([self compareToWithId:val] == JavaMathBigInteger_LESS) ? self : val);
}

- (JavaMathBigInteger *)maxWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  return (([self compareToWithId:val] == JavaMathBigInteger_GREATER) ? self : val);
}

- (NSUInteger)hash {
  if (hashCode__ != 0) {
    return hashCode__;
  }
  for (int i = 0; i < (int) [((IOSIntArray *) NIL_CHK(digits_)) count]; i++) {
    hashCode__ = (hashCode__ * 33 + ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] & (int) 0xffffffff));
  }
  hashCode__ = hashCode__ * sign_;
  return hashCode__;
}

- (BOOL)isEqual:(id)x {
  if (self == x) {
    return YES;
  }
  if ([x isKindOfClass:[JavaMathBigInteger class]]) {
    JavaMathBigInteger *x1 = (JavaMathBigInteger *) x;
    return sign_ == ((JavaMathBigInteger *) NIL_CHK(x1)).sign && numberLength_ == ((JavaMathBigInteger *) NIL_CHK(x1)).numberLength && [self equalsArraysWithJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(x1)).digits];
  }
  return NO;
}

- (BOOL)equalsArraysWithJavaLangIntegerArray:(IOSIntArray *)b {
  int i;
  for (i = numberLength_ - 1; (i >= 0) && ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] == [((IOSIntArray *) NIL_CHK(b)) intAtIndex:i]); i--) {
  }
  return i < 0;
}

- (NSString *)description {
  return [JavaMathConversion toDecimalScaledStringWithJavaMathBigInteger:self withInt:0];
}

- (NSString *)toStringWithInt:(int)radix {
  return [JavaMathConversion bigInteger2StringWithJavaMathBigInteger:self withInt:radix];
}

- (JavaMathBigInteger *)gcdWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  JavaMathBigInteger *val1 = [self abs];
  JavaMathBigInteger *val2 = [((JavaMathBigInteger *) NIL_CHK(val)) abs];
  if ([((JavaMathBigInteger *) NIL_CHK(val1)) signum] == 0) {
    return val2;
  }
  else if ([((JavaMathBigInteger *) NIL_CHK(val2)) signum] == 0) {
    return val1;
  }
  if (((((JavaMathBigInteger *) NIL_CHK(val1)).numberLength == 1) || ((((JavaMathBigInteger *) NIL_CHK(val1)).numberLength == 2) && ([((IOSIntArray *) NIL_CHK(val1.digits)) intAtIndex:1] > 0))) && (((JavaMathBigInteger *) NIL_CHK(val2)).numberLength == 1 || (((JavaMathBigInteger *) NIL_CHK(val2)).numberLength == 2 && [((IOSIntArray *) NIL_CHK(val2.digits)) intAtIndex:1] > 0))) {
    return [JavaMathBigInteger valueOfWithLongInt:[JavaMathDivision gcdBinaryWithLongInt:[((JavaMathBigInteger *) NIL_CHK(val1)) longValue] withLongInt:[((JavaMathBigInteger *) NIL_CHK(val2)) longValue]]];
  }
  return [JavaMathDivision gcdBinaryWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(val1)) copy__] withJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(val2)) copy__]];
}

- (JavaMathBigInteger *)multiplyWithJavaMathBigInteger:(JavaMathBigInteger *)val {
  if (((JavaMathBigInteger *) NIL_CHK(val)).sign == 0) {
    return JavaMathBigInteger_ZERO_;
  }
  if (sign_ == 0) {
    return JavaMathBigInteger_ZERO_;
  }
  return [JavaMathMultiplication multiplyWithJavaMathBigInteger:self withJavaMathBigInteger:val];
}

- (JavaMathBigInteger *)powWithInt:(int)exp {
  if (exp < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"Negative exponent"] autorelease];
  }
  if (exp == 0) {
    return JavaMathBigInteger_ONE_;
  }
  else if (exp == 1 || [self isEqual:JavaMathBigInteger_ONE_] || [self isEqual:JavaMathBigInteger_ZERO_]) {
    return self;
  }
  if (![self testBitWithInt:0]) {
    int x = 1;
    while (![self testBitWithInt:x]) {
      x++;
    }
    return [[JavaMathBigInteger getPowerOfTwoWithInt:x * exp] multiplyWithJavaMathBigInteger:[[self shiftRightWithInt:x] powWithInt:exp]];
  }
  return [JavaMathMultiplication powWithJavaMathBigInteger:self withInt:exp];
}

- (IOSObjectArray *)divideAndRemainderWithJavaMathBigInteger:(JavaMathBigInteger *)divisor {
  int divisorSign = ((JavaMathBigInteger *) NIL_CHK(divisor)).sign;
  if (divisorSign == 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger divide by zero"] autorelease];
  }
  int divisorLen = ((JavaMathBigInteger *) NIL_CHK(divisor)).numberLength;
  IOSIntArray *divisorDigits = ((JavaMathBigInteger *) NIL_CHK(divisor)).digits;
  if (divisorLen == 1) {
    return [JavaMathDivision divideAndRemainderByIntegerWithJavaMathBigInteger:self withInt:[((IOSIntArray *) NIL_CHK(divisorDigits)) intAtIndex:0] withInt:divisorSign];
  }
  IOSIntArray *thisDigits = digits_;
  int thisLen = numberLength_;
  int cmp = (thisLen != divisorLen) ? ((thisLen > divisorLen) ? 1 : -1) : [JavaMathElementary compareArraysWithJavaLangIntegerArray:thisDigits withJavaLangIntegerArray:divisorDigits withInt:thisLen];
  if (cmp < 0) {
    return [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigInteger_ZERO_, self } count:2 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
  }
  int thisSign = sign_;
  int quotientLength = thisLen - divisorLen + 1;
  int remainderLength = divisorLen;
  int quotientSign = ((thisSign == divisorSign) ? 1 : -1);
  IOSIntArray *quotientDigits = [[[IOSIntArray alloc] initWithLength:quotientLength] autorelease];
  IOSIntArray *remainderDigits = [JavaMathDivision divideWithJavaLangIntegerArray:quotientDigits withInt:quotientLength withJavaLangIntegerArray:thisDigits withInt:thisLen withJavaLangIntegerArray:divisorDigits withInt:divisorLen];
  JavaMathBigInteger *result0 = [[[JavaMathBigInteger alloc] initWithInt:quotientSign withInt:quotientLength withJavaLangIntegerArray:quotientDigits] autorelease];
  JavaMathBigInteger *result1 = [[[JavaMathBigInteger alloc] initWithInt:thisSign withInt:remainderLength withJavaLangIntegerArray:remainderDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result0)) cutOffLeadingZeroes];
  [((JavaMathBigInteger *) NIL_CHK(result1)) cutOffLeadingZeroes];
  return [IOSObjectArray arrayWithObjects:(id[]){ result0, result1 } count:2 type:[IOSClass classWithClass:[JavaMathBigInteger class]]];
}

- (JavaMathBigInteger *)divideWithJavaMathBigInteger:(JavaMathBigInteger *)divisor {
  if (((JavaMathBigInteger *) NIL_CHK(divisor)).sign == 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger divide by zero"] autorelease];
  }
  int divisorSign = ((JavaMathBigInteger *) NIL_CHK(divisor)).sign;
  if ([((JavaMathBigInteger *) NIL_CHK(divisor)) isOne]) {
    return ((((JavaMathBigInteger *) NIL_CHK(divisor)).sign > 0) ? self : [self negate]);
  }
  int thisSign = sign_;
  int thisLen = numberLength_;
  int divisorLen = ((JavaMathBigInteger *) NIL_CHK(divisor)).numberLength;
  if (thisLen + divisorLen == 2) {
    long long int val = ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0] & (long long) 0xFFFFFFFFLL) / ([((IOSIntArray *) NIL_CHK(divisor.digits)) intAtIndex:0] & (long long) 0xFFFFFFFFLL);
    if (thisSign != divisorSign) {
      val = -val;
    }
    return [JavaMathBigInteger valueOfWithLongInt:val];
  }
  int cmp = ((thisLen != divisorLen) ? ((thisLen > divisorLen) ? 1 : -1) : [JavaMathElementary compareArraysWithJavaLangIntegerArray:digits_ withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(divisor)).digits withInt:thisLen]);
  if (cmp == JavaMathBigInteger_EQUALS) {
    return ((thisSign == divisorSign) ? JavaMathBigInteger_ONE_ : JavaMathBigInteger_MINUS_ONE_);
  }
  if (cmp == JavaMathBigInteger_LESS) {
    return JavaMathBigInteger_ZERO_;
  }
  int resLength = thisLen - divisorLen + 1;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  int resSign = ((thisSign == divisorSign) ? 1 : -1);
  if (divisorLen == 1) {
    [JavaMathDivision divideArrayByIntWithJavaLangIntegerArray:resDigits withJavaLangIntegerArray:digits_ withInt:thisLen withInt:[((IOSIntArray *) NIL_CHK(divisor.digits)) intAtIndex:0]];
  }
  else {
    [JavaMathDivision divideWithJavaLangIntegerArray:resDigits withInt:resLength withJavaLangIntegerArray:digits_ withInt:thisLen withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(divisor)).digits withInt:divisorLen];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:resSign withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

- (JavaMathBigInteger *)remainderWithJavaMathBigInteger:(JavaMathBigInteger *)divisor {
  if (((JavaMathBigInteger *) NIL_CHK(divisor)).sign == 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger divide by zero"] autorelease];
  }
  int thisLen = numberLength_;
  int divisorLen = ((JavaMathBigInteger *) NIL_CHK(divisor)).numberLength;
  if (((thisLen != divisorLen) ? ((thisLen > divisorLen) ? 1 : -1) : [JavaMathElementary compareArraysWithJavaLangIntegerArray:digits_ withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(divisor)).digits withInt:thisLen]) == JavaMathBigInteger_LESS) {
    return self;
  }
  int resLength = divisorLen;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:resLength] autorelease];
  if (resLength == 1) {
    [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:0 withInt:[JavaMathDivision remainderArrayByIntWithJavaLangIntegerArray:digits_ withInt:thisLen withInt:[((IOSIntArray *) NIL_CHK(divisor.digits)) intAtIndex:0]]];
  }
  else {
    int qLen = thisLen - divisorLen + 1;
    resDigits = [JavaMathDivision divideWithJavaLangIntegerArray:nil withInt:qLen withJavaLangIntegerArray:digits_ withInt:thisLen withJavaLangIntegerArray:((JavaMathBigInteger *) NIL_CHK(divisor)).digits withInt:divisorLen];
  }
  JavaMathBigInteger *result = [[[JavaMathBigInteger alloc] initWithInt:sign_ withInt:resLength withJavaLangIntegerArray:resDigits] autorelease];
  [((JavaMathBigInteger *) NIL_CHK(result)) cutOffLeadingZeroes];
  return result;
}

- (JavaMathBigInteger *)modInverseWithJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (((JavaMathBigInteger *) NIL_CHK(m)).sign <= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger: modulus not positive"] autorelease];
  }
  if (!([self testBitWithInt:0] || [((JavaMathBigInteger *) NIL_CHK(m)) testBitWithInt:0])) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger not invertible."] autorelease];
  }
  if ([((JavaMathBigInteger *) NIL_CHK(m)) isOne]) {
    return JavaMathBigInteger_ZERO_;
  }
  JavaMathBigInteger *res = [JavaMathDivision modInverseMontgomeryWithJavaMathBigInteger:[[self abs] modWithJavaMathBigInteger:m] withJavaMathBigInteger:m];
  if (((JavaMathBigInteger *) NIL_CHK(res)).sign == 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger not invertible."] autorelease];
  }
  res = ((sign_ < 0) ? [((JavaMathBigInteger *) NIL_CHK(m)) subtractWithJavaMathBigInteger:res] : res);
  return res;
}

- (JavaMathBigInteger *)modPowWithJavaMathBigInteger:(JavaMathBigInteger *)exponent
                              withJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (((JavaMathBigInteger *) NIL_CHK(m)).sign <= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger: modulus not positive"] autorelease];
  }
  JavaMathBigInteger *base = self;
  if ([((JavaMathBigInteger *) NIL_CHK(m)) isOne] | (((JavaMathBigInteger *) NIL_CHK(exponent)).sign > 0 & ((JavaMathBigInteger *) NIL_CHK(base)).sign == 0)) {
    return JavaMathBigInteger_ZERO_;
  }
  if (((JavaMathBigInteger *) NIL_CHK(exponent)).sign == 0) {
    return [((JavaMathBigInteger *) NIL_CHK(JavaMathBigInteger_ONE_)) modWithJavaMathBigInteger:m];
  }
  if (((JavaMathBigInteger *) NIL_CHK(exponent)).sign < 0) {
    base = [self modInverseWithJavaMathBigInteger:m];
    exponent = [((JavaMathBigInteger *) NIL_CHK(exponent)) negate];
  }
  JavaMathBigInteger *res = ([((JavaMathBigInteger *) NIL_CHK(m)) testBitWithInt:0]) ? [JavaMathDivision oddModPowWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(base)) abs] withJavaMathBigInteger:exponent withJavaMathBigInteger:m] : [JavaMathDivision evenModPowWithJavaMathBigInteger:[((JavaMathBigInteger *) NIL_CHK(base)) abs] withJavaMathBigInteger:exponent withJavaMathBigInteger:m];
  if ((((JavaMathBigInteger *) NIL_CHK(base)).sign < 0) && [((JavaMathBigInteger *) NIL_CHK(exponent)) testBitWithInt:0]) {
    res = [[[((JavaMathBigInteger *) NIL_CHK(m)) subtractWithJavaMathBigInteger:JavaMathBigInteger_ONE_] multiplyWithJavaMathBigInteger:res] modWithJavaMathBigInteger:m];
  }
  return res;
}

- (JavaMathBigInteger *)modWithJavaMathBigInteger:(JavaMathBigInteger *)m {
  if (((JavaMathBigInteger *) NIL_CHK(m)).sign <= 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:@"BigInteger: modulus not positive"] autorelease];
  }
  JavaMathBigInteger *rem = [self remainderWithJavaMathBigInteger:m];
  return ((((JavaMathBigInteger *) NIL_CHK(rem)).sign < 0) ? [((JavaMathBigInteger *) NIL_CHK(rem)) addWithJavaMathBigInteger:m] : rem);
}

- (BOOL)isProbablePrimeWithInt:(int)certainty {
  return [JavaMathPrimality isProbablePrimeWithJavaMathBigInteger:[self abs] withInt:certainty];
}

- (JavaMathBigInteger *)nextProbablePrime {
  if (sign_ < 0) {
    @throw [[[JavaLangArithmeticException alloc] initWithNSString:[NSString stringWithFormat:@"start < 0: %@", [self description]]] autorelease];
  }
  return [JavaMathPrimality nextProbablePrimeWithJavaMathBigInteger:self];
}

+ (JavaMathBigInteger *)probablePrimeWithInt:(int)bitLength
                          withJavaUtilRandom:(JavaUtilRandom *)rnd {
  return [[[JavaMathBigInteger alloc] initWithInt:bitLength withInt:100 withJavaUtilRandom:rnd] autorelease];
}

- (void)cutOffLeadingZeroes {
  while ((numberLength_ > 0) && ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:--numberLength_] == 0)) {
  }
  if ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:numberLength_++] == 0) {
    sign_ = 0;
  }
}

- (BOOL)isOne {
  return ((numberLength_ == 1) && ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:0] == 1));
}

- (void)putBytesPositiveToIntegersWithJavaLangByteArray:(IOSByteArray *)byteValues {
  int bytesLen = (int) [((IOSByteArray *) NIL_CHK(byteValues)) count];
  int highBytes = bytesLen & 3;
  numberLength_ = (bytesLen >> 2) + ((highBytes == 0) ? 0 : 1);
  JreOperatorRetainedAssign(&digits_, [[[IOSIntArray alloc] initWithLength:numberLength_] autorelease]);
  int i = 0;
  while (bytesLen > highBytes) {
    [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i++ withInt:([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 8 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 16 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 24];
  }
  for (int j = 0; j < bytesLen; j++) {
    [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] << 8) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:j] & (int) 0xFF)];
  }
}

- (void)putBytesNegativeToIntegersWithJavaLangByteArray:(IOSByteArray *)byteValues {
  int bytesLen = (int) [((IOSByteArray *) NIL_CHK(byteValues)) count];
  int highBytes = bytesLen & 3;
  numberLength_ = (bytesLen >> 2) + ((highBytes == 0) ? 0 : 1);
  JreOperatorRetainedAssign(&digits_, [[[IOSIntArray alloc] initWithLength:numberLength_] autorelease]);
  int i = 0;
  [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:numberLength_ - 1 withInt:-1];
  while (bytesLen > highBytes) {
    [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 8 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 16 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 24];
    if ([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] != 0) {
      [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i]];
      firstNonzeroDigit_ = i;
      i++;
      while (bytesLen > highBytes) {
        [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 8 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 16 | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:--bytesLen] & (int) 0xFF) << 24];
        [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i]];
        i++;
      }
      break;
    }
    i++;
  }
  if (highBytes != 0) {
    if (firstNonzeroDigit_ != -2) {
      for (int j = 0; j < bytesLen; j++) {
        [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] << 8) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:j] & (int) 0xFF)];
      }
      [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:~[((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i]];
    }
    else {
      for (int j = 0; j < bytesLen; j++) {
        [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:([((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] << 8) | ([((IOSByteArray *) NIL_CHK(byteValues)) byteAtIndex:j] & (int) 0xFF)];
      }
      [((IOSIntArray *) NIL_CHK(digits_)) replaceIntAtIndex:i withInt:-[((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i]];
    }
  }
}

- (int)getFirstNonzeroDigit {
  if (firstNonzeroDigit_ == -2) {
    int i;
    if (self.sign == 0) {
      i = -1;
    }
    else {
      for (i = 0; [((IOSIntArray *) NIL_CHK(digits_)) intAtIndex:i] == 0; i++) {
      }
    }
    firstNonzeroDigit_ = i;
  }
  return firstNonzeroDigit_;
}

- (JavaMathBigInteger *)copy__ OBJC_METHOD_FAMILY_NONE {
  IOSIntArray *copyDigits = [[[IOSIntArray alloc] initWithLength:numberLength_] autorelease];
  [JavaLangSystem arraycopyWithId:digits_ withInt:0 withId:copyDigits withInt:0 withInt:numberLength_];
  return [[[JavaMathBigInteger alloc] initWithInt:sign_ withInt:numberLength_ withJavaLangIntegerArray:copyDigits] autorelease];
}

- (void)unCache {
  firstNonzeroDigit_ = -2;
}

+ (JavaMathBigInteger *)getPowerOfTwoWithInt:(int)exp {
  if (exp < (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigInteger_TWO_POWS_)) count]) {
    return ((JavaMathBigInteger *) [((IOSObjectArray *) NIL_CHK(JavaMathBigInteger_TWO_POWS_)) objectAtIndex:exp]);
  }
  int intCount = exp >> 5;
  int bitN = exp & 31;
  IOSIntArray *resDigits = [[[IOSIntArray alloc] initWithLength:intCount + 1] autorelease];
  [((IOSIntArray *) NIL_CHK(resDigits)) replaceIntAtIndex:intCount withInt:1 << bitN];
  return [[[JavaMathBigInteger alloc] initWithInt:1 withInt:intCount + 1 withJavaLangIntegerArray:resDigits] autorelease];
}

+ (void)initialize {
  if (self == [JavaMathBigInteger class]) {
    JreOperatorRetainedAssign(&JavaMathBigInteger_ZERO_, [[[JavaMathBigInteger alloc] initWithInt:0 withInt:0] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigInteger_ONE_, [[[JavaMathBigInteger alloc] initWithInt:1 withInt:1] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigInteger_TEN_, [[[JavaMathBigInteger alloc] initWithInt:1 withInt:10] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigInteger_MINUS_ONE_, [[[JavaMathBigInteger alloc] initWithInt:-1 withInt:1] autorelease]);
    JreOperatorRetainedAssign(&JavaMathBigInteger_SMALL_VALUES_, [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigInteger_ZERO_, JavaMathBigInteger_ONE_, [[[JavaMathBigInteger alloc] initWithInt:1 withInt:2] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:3] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:4] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:5] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:6] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:7] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:8] autorelease], [[[JavaMathBigInteger alloc] initWithInt:1 withInt:9] autorelease], JavaMathBigInteger_TEN_ } count:11 type:[IOSClass classWithClass:[JavaMathBigInteger class]]]);
    {
      JreOperatorRetainedAssign(&JavaMathBigInteger_TWO_POWS_, [[[IOSObjectArray alloc] initWithLength:32 type:[IOSClass classWithClass:[JavaMathBigInteger class]]] autorelease]);
      for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(JavaMathBigInteger_TWO_POWS_)) count]; i++) {
        [((IOSObjectArray *) NIL_CHK(JavaMathBigInteger_TWO_POWS_)) replaceObjectAtIndex:i withObject:[JavaMathBigInteger valueOfWithLongInt:1LL << i]];
      }
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&magnitude_, nil);
  JreOperatorRetainedAssign(&digits_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaMathBigInteger *typedCopy = (JavaMathBigInteger *) copy;
  typedCopy.digits = digits_;
  typedCopy.numberLength = numberLength_;
  typedCopy.sign = sign_;
  typedCopy.firstNonzeroDigit = firstNonzeroDigit_;
  typedCopy.signum_ = signum__;
  typedCopy.magnitude = magnitude_;
  typedCopy.hashCode_ = hashCode__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:digits_ name:@"digits"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:magnitude_ name:@"magnitude"]];
  return result;
}

@end
