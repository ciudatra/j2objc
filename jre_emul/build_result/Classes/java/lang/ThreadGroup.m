//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni-kernel/src/main/java/java/lang/ThreadGroup.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/IllegalThreadStateException.h"
#import "java/lang/System.h"
#import "java/lang/Thread.h"
#import "java/lang/ThreadDeath.h"
#import "java/lang/ThreadGroup.h"
#import "java/lang/Throwable.h"

@implementation JavaLangThreadGroup

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, name);
}
@synthesize name = name_;
@synthesize maxPriority = maxPriority_;
- (JavaLangThreadGroup *)parent {
  return parent_;
}
- (void)setParent:(JavaLangThreadGroup *)parent {
  JreOperatorRetainedAssign(&parent_, parent);
}
@synthesize parent = parent_;
@synthesize numThreads = numThreads_;
- (IOSObjectArray *)childrenThreads {
  return childrenThreads_;
}
- (void)setChildrenThreads:(IOSObjectArray *)childrenThreads {
  JreOperatorRetainedAssign(&childrenThreads_, childrenThreads);
}
@synthesize childrenThreads = childrenThreads_;
@synthesize numGroups = numGroups_;
- (IOSObjectArray *)childrenGroups {
  return childrenGroups_;
}
- (void)setChildrenGroups:(IOSObjectArray *)childrenGroups {
  JreOperatorRetainedAssign(&childrenGroups_, childrenGroups);
}
@synthesize childrenGroups = childrenGroups_;
- (id)childrenGroupsLock {
  return childrenGroupsLock_;
}
- (void)setChildrenGroupsLock:(id)childrenGroupsLock {
  JreOperatorRetainedAssign(&childrenGroupsLock_, childrenGroupsLock);
}
@synthesize childrenGroupsLock = childrenGroupsLock_;
- (id)childrenThreadsLock {
  return childrenThreadsLock_;
}
- (void)setChildrenThreadsLock:(id)childrenThreadsLock {
  JreOperatorRetainedAssign(&childrenThreadsLock_, childrenThreadsLock);
}
@synthesize childrenThreadsLock = childrenThreadsLock_;
@synthesize isDestroyed_ = isDestroyed__;

- (id)init {
  if ((self = [super init])) {
    maxPriority_ = JavaLangThread_MAX_PRIORITY;
    JreOperatorRetainedAssign(&childrenThreads_, [[[IOSObjectArray alloc] initWithLength:5 type:[IOSClass classWithClass:[JavaLangThread class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroups_, [[[IOSObjectArray alloc] initWithLength:3 type:[IOSClass classWithClass:[JavaLangThreadGroup class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroupsLock_, [[[JavaLangThreadGroup_ChildrenGroupsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    JreOperatorRetainedAssign(&childrenThreadsLock_, [[[JavaLangThreadGroup_ChildrenThreadsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    JreOperatorRetainedAssign(&name_, @"system");
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)name {
  return JreMemDebugAdd([self initJavaLangThreadGroupWithJavaLangThreadGroup:[[JavaLangThread currentThread] getThreadGroup] withNSString:name]);
}

- (id)initJavaLangThreadGroupWithJavaLangThreadGroup:(JavaLangThreadGroup *)parent
                                        withNSString:(NSString *)name {
  if ((self = [super init])) {
    maxPriority_ = JavaLangThread_MAX_PRIORITY;
    JreOperatorRetainedAssign(&childrenThreads_, [[[IOSObjectArray alloc] initWithLength:5 type:[IOSClass classWithClass:[JavaLangThread class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroups_, [[[IOSObjectArray alloc] initWithLength:3 type:[IOSClass classWithClass:[JavaLangThreadGroup class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroupsLock_, [[[JavaLangThreadGroup_ChildrenGroupsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    JreOperatorRetainedAssign(&childrenThreadsLock_, [[[JavaLangThreadGroup_ChildrenThreadsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    self.name = name;
    [self setParentWithJavaLangThreadGroup:parent];
    if (parent != nil) {
      [self setMaxPriorityWithInt:[parent getMaxPriority]];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)parent
                     withNSString:(NSString *)name {
  return [self initJavaLangThreadGroupWithJavaLangThreadGroup:parent withNSString:name];
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)parent {
  if ((self = [super init])) {
    maxPriority_ = JavaLangThread_MAX_PRIORITY;
    JreOperatorRetainedAssign(&childrenThreads_, [[[IOSObjectArray alloc] initWithLength:5 type:[IOSClass classWithClass:[JavaLangThread class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroups_, [[[IOSObjectArray alloc] initWithLength:3 type:[IOSClass classWithClass:[JavaLangThreadGroup class]]] autorelease]);
    JreOperatorRetainedAssign(&childrenGroupsLock_, [[[JavaLangThreadGroup_ChildrenGroupsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    JreOperatorRetainedAssign(&childrenThreadsLock_, [[[JavaLangThreadGroup_ChildrenThreadsLock alloc] initWithJavaLangThreadGroup:self] autorelease]);
    self.name = @"main";
    [self setParentWithJavaLangThreadGroup:parent];
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)activeCount {
  int count = numThreads_;
  @synchronized (self.childrenGroupsLock) {
    for (int i = 0; i < numGroups_; i++) {
      count += [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(self.childrenGroups)) objectAtIndex:i]) activeCount];
    }
  }
  return count;
}

- (int)activeGroupCount {
  int count = 0;
  @synchronized (self.childrenGroupsLock) {
    for (int i = 0; i < numGroups_; i++) {
      count += 1 + [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(self.childrenGroups)) objectAtIndex:i]) activeGroupCount];
    }
  }
  return count;
}

- (void)addWithJavaLangThread:(JavaLangThread *)thread {
  @synchronized (self.childrenThreadsLock) {
    if (!isDestroyed__) {
      if ((int) [((IOSObjectArray *) NIL_CHK(childrenThreads_)) count] == numThreads_) {
        IOSObjectArray *newThreads = [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(childrenThreads_)) count] * 2 type:[IOSClass classWithClass:[JavaLangThread class]]] autorelease];
        [JavaLangSystem arraycopyWithId:childrenThreads_ withInt:0 withId:newThreads withInt:0 withInt:numThreads_];
        [((IOSObjectArray *) NIL_CHK(newThreads)) replaceObjectAtIndex:numThreads_++ withObject:thread];
        JreOperatorRetainedAssign(&childrenThreads_, newThreads);
      }
      else {
        [((IOSObjectArray *) NIL_CHK(childrenThreads_)) replaceObjectAtIndex:numThreads_++ withObject:thread];
      }
    }
    else {
      @throw [[[JavaLangIllegalThreadStateException alloc] init] autorelease];
    }
  }
}

- (void)addWithJavaLangThreadGroup:(JavaLangThreadGroup *)g {
  @synchronized (self.childrenGroupsLock) {
    if (!isDestroyed__) {
      if ((int) [((IOSObjectArray *) NIL_CHK(childrenGroups_)) count] == numGroups_) {
        IOSObjectArray *newGroups = [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(childrenGroups_)) count] * 2 type:[IOSClass classWithClass:[JavaLangThreadGroup class]]] autorelease];
        [JavaLangSystem arraycopyWithId:childrenGroups_ withInt:0 withId:newGroups withInt:0 withInt:numGroups_];
        [((IOSObjectArray *) NIL_CHK(newGroups)) replaceObjectAtIndex:numGroups_++ withObject:g];
        JreOperatorRetainedAssign(&childrenGroups_, newGroups);
      }
      else {
        [((IOSObjectArray *) NIL_CHK(childrenGroups_)) replaceObjectAtIndex:numGroups_++ withObject:g];
      }
    }
    else {
      @throw [[[JavaLangIllegalThreadStateException alloc] init] autorelease];
    }
  }
}

- (void)checkAccess {
}

- (void)destroy {
  [self checkAccess];
  @synchronized (self.childrenThreadsLock) {
    @synchronized (self.childrenGroupsLock) {
      int toDestroy = numGroups_;
      for (int i = 0; i < toDestroy; i++) {
        [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(self.childrenGroups)) objectAtIndex:0]) destroy];
      }
      if (parent_ != nil) {
        [parent_ removeWithJavaLangThreadGroup:self];
      }
      self.isDestroyed_ = YES;
    }
  }
}

- (int)enumerateWithJavaLangThreadArray:(IOSObjectArray *)threads {
  return [self enumerateWithJavaLangThreadArray:threads withBOOL:YES];
}

- (int)enumerateWithJavaLangThreadArray:(IOSObjectArray *)threads
                               withBOOL:(BOOL)recurse {
  return [self enumerateGenericWithNSObjectArray:threads withBOOL:recurse withInt:0 withBOOL:YES];
}

- (int)enumerateWithJavaLangThreadGroupArray:(IOSObjectArray *)groups {
  return [self enumerateWithJavaLangThreadGroupArray:groups withBOOL:YES];
}

- (int)enumerateWithJavaLangThreadGroupArray:(IOSObjectArray *)groups
                                    withBOOL:(BOOL)recurse {
  return [self enumerateGenericWithNSObjectArray:groups withBOOL:recurse withInt:0 withBOOL:NO];
}

- (int)enumerateGenericWithNSObjectArray:(IOSObjectArray *)enumeration
                                withBOOL:(BOOL)recurse
                                 withInt:(int)enumerationIndex
                                withBOOL:(BOOL)enumeratingThreads {
  [self checkAccess];
  IOSObjectArray *immediateCollection = enumeratingThreads ? (IOSObjectArray *) childrenThreads_ : (IOSObjectArray *) childrenGroups_;
  id syncLock = enumeratingThreads ? childrenThreadsLock_ : childrenGroupsLock_;
  @synchronized (syncLock) {
    for (int i = enumeratingThreads ? numThreads_ : numGroups_; --i >= 0; ) {
      if (!enumeratingThreads || [((JavaLangThread *) [((IOSObjectArray *) NIL_CHK(immediateCollection)) objectAtIndex:i]) isAlive]) {
        if (enumerationIndex >= (int) [((IOSObjectArray *) NIL_CHK(enumeration)) count]) {
          return enumerationIndex;
        }
        [((IOSObjectArray *) NIL_CHK(enumeration)) replaceObjectAtIndex:enumerationIndex++ withObject:[((IOSObjectArray *) NIL_CHK(immediateCollection)) objectAtIndex:i]];
      }
    }
  }
  if (recurse) {
    @synchronized (self.childrenGroupsLock) {
      for (int i = 0; i < numGroups_; i++) {
        if (enumerationIndex >= (int) [((IOSObjectArray *) NIL_CHK(enumeration)) count]) {
          return enumerationIndex;
        }
        enumerationIndex = [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(childrenGroups_)) objectAtIndex:i]) enumerateGenericWithNSObjectArray:enumeration withBOOL:recurse withInt:enumerationIndex withBOOL:enumeratingThreads];
      }
    }
  }
  return enumerationIndex;
}

- (int)getMaxPriority {
  return maxPriority_;
}

- (NSString *)getName {
  return name_;
}

- (JavaLangThreadGroup *)getParent {
  if (parent_ != nil) {
    [parent_ checkAccess];
  }
  return parent_;
}

- (BOOL)isDestroyed {
  return isDestroyed__;
}

- (void)list {
  [self listWithInt:0];
}

- (void)listWithInt:(int)levels {
  for (int i = 0; i < levels; i++) {
    NSLog(@"%@", @"    ");
  }
  NSLog(@"%@", [self description]);
  @synchronized (self.childrenThreadsLock) {
    for (int i = 0; i < numThreads_; i++) {
      for (int j = 0; j <= levels; j++) {
        NSLog(@"%@", @"    ");
      }
      NSLog(@"%@", ((JavaLangThread *) [((IOSObjectArray *) NIL_CHK(self.childrenThreads)) objectAtIndex:i]));
    }
  }
  @synchronized (self.childrenGroupsLock) {
    for (int i = 0; i < numGroups_; i++) {
      [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(self.childrenGroups)) objectAtIndex:i]) listWithInt:levels + 1];
    }
  }
}

- (BOOL)parentOfWithJavaLangThreadGroup:(JavaLangThreadGroup *)g {
  while (g != nil) {
    if (self == g) {
      return YES;
    }
    g = ((JavaLangThreadGroup *) NIL_CHK(g)).parent;
  }
  return NO;
}

- (void)removeWithJavaLangThread:(JavaLangThread *)thread {
  @synchronized (self.childrenThreadsLock) {
    for (int i = 0; i < numThreads_; i++) {
      if ([((JavaLangThread *) [((IOSObjectArray *) NIL_CHK(childrenThreads_)) objectAtIndex:i]) isEqual:thread]) {
        numThreads_--;
        [JavaLangSystem arraycopyWithId:childrenThreads_ withInt:i + 1 withId:childrenThreads_ withInt:i withInt:numThreads_ - i];
        [((IOSObjectArray *) NIL_CHK(childrenThreads_)) replaceObjectAtIndex:numThreads_ withObject:nil];
        break;
      }
    }
  }
}

- (void)removeWithJavaLangThreadGroup:(JavaLangThreadGroup *)g {
  @synchronized (self.childrenGroupsLock) {
    for (int i = 0; i < numGroups_; i++) {
      if ([((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(childrenGroups_)) objectAtIndex:i]) isEqual:g]) {
        numGroups_--;
        [JavaLangSystem arraycopyWithId:childrenGroups_ withInt:i + 1 withId:childrenGroups_ withInt:i withInt:numGroups_ - i];
        [((IOSObjectArray *) NIL_CHK(childrenGroups_)) replaceObjectAtIndex:numGroups_ withObject:nil];
        break;
      }
    }
  }
}

- (void)setMaxPriorityWithInt:(int)newMax {
  [self checkAccess];
  if (newMax <= self.maxPriority) {
    if (newMax < JavaLangThread_MIN_PRIORITY) {
      newMax = JavaLangThread_MIN_PRIORITY;
    }
    int parentPriority = parent_ == nil ? newMax : [((JavaLangThreadGroup *) NIL_CHK(parent_)) getMaxPriority];
    self.maxPriority = parentPriority <= newMax ? parentPriority : newMax;
    @synchronized (self.childrenGroupsLock) {
      for (int i = 0; i < numGroups_; i++) {
        [((JavaLangThreadGroup *) [((IOSObjectArray *) NIL_CHK(self.childrenGroups)) objectAtIndex:i]) setMaxPriorityWithInt:newMax];
      }
    }
  }
}

- (void)setParentWithJavaLangThreadGroup:(JavaLangThreadGroup *)parent {
  if (parent != nil) {
    [parent addWithJavaLangThreadGroup:self];
  }
  self.parent = parent;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@[name=%@,maxpri=%d]", [[self getClass] getName], [self getName], [self getMaxPriority]];
}

- (void)uncaughtExceptionWithJavaLangThread:(JavaLangThread *)t
                      withJavaLangThrowable:(JavaLangThrowable *)e {
  if (parent_ != nil) {
    [parent_ uncaughtExceptionWithJavaLangThread:t withJavaLangThrowable:e];
  }
  else if (!([e isKindOfClass:[JavaLangThreadDeath class]])) {
    [((JavaLangThrowable *) NIL_CHK(e)) printStackTrace];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&childrenThreadsLock_, nil);
  JreOperatorRetainedAssign(&childrenGroupsLock_, nil);
  JreOperatorRetainedAssign(&childrenGroups_, nil);
  JreOperatorRetainedAssign(&childrenThreads_, nil);
  JreOperatorRetainedAssign(&parent_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaLangThreadGroup *typedCopy = (JavaLangThreadGroup *) copy;
  typedCopy.name = name_;
  typedCopy.maxPriority = maxPriority_;
  typedCopy.parent = parent_;
  typedCopy.numThreads = numThreads_;
  typedCopy.childrenThreads = childrenThreads_;
  typedCopy.numGroups = numGroups_;
  typedCopy.childrenGroups = childrenGroups_;
  typedCopy.childrenGroupsLock = childrenGroupsLock_;
  typedCopy.childrenThreadsLock = childrenThreadsLock_;
  typedCopy.isDestroyed_ = isDestroyed__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:childrenThreads_ name:@"childrenThreads"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:childrenGroups_ name:@"childrenGroups"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:childrenGroupsLock_ name:@"childrenGroupsLock"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:childrenThreadsLock_ name:@"childrenThreadsLock"]];
  return result;
}

@end
@implementation JavaLangThreadGroup_ChildrenGroupsLock

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)outer$ {
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaLangThreadGroup_ChildrenThreadsLock

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaLangThreadGroup:(JavaLangThreadGroup *)outer$ {
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
