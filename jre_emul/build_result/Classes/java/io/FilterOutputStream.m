//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/io/FilterOutputStream.java
//
//  Created by retechretech on 13-3-15.
//

#import "IOSByteArray.h"
#import "java/io/FilterOutputStream.h"
#import "java/io/IOException.h"
#import "java/io/OutputStream.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"

@implementation JavaIoFilterOutputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaIoOutputStream *)out {
  return [[out_ retain] autorelease];
}
- (void)setOut:(JavaIoOutputStream *)out {
  JreOperatorRetainedAssign(&out_, out);
}
@synthesize out = out_;

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super init])) {
    self.out = outArg;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
  JavaIoIOException *thrown = nil;
  @try {
    [self flush];
  }
  @catch (JavaIoIOException *e) {
    thrown = e;
  }
  @try {
    [((JavaIoOutputStream *) NIL_CHK(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    if (thrown == nil) {
      thrown = e;
    }
  }
  if (thrown != nil) {
    @throw thrown;
  }
}

- (void)flush {
  [((JavaIoOutputStream *) NIL_CHK(out_)) flush];
}

- (void)writeWithJavaLangByteArray:(IOSByteArray *)buffer {
  [self writeWithJavaLangByteArray:buffer withInt:0 withInt:(int) [((IOSByteArray *) NIL_CHK(buffer)) count]];
}

- (void)writeWithJavaLangByteArray:(IOSByteArray *)buffer
                           withInt:(int)offset
                           withInt:(int)length {
  if (offset > (int) [((IOSByteArray *) NIL_CHK(buffer)) count] || offset < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Offset out of bounds: %d", offset]] autorelease];
  }
  if (length < 0 || length > (int) [((IOSByteArray *) NIL_CHK(buffer)) count] - offset) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Length out of bounds: %d", length]] autorelease];
  }
  for (int i = 0; i < length; i++) {
    [self writeWithInt:[((IOSByteArray *) NIL_CHK(buffer)) byteAtIndex:offset + i]];
  }
}

- (void)writeWithInt:(int)oneByte {
  [((JavaIoOutputStream *) NIL_CHK(out_)) writeWithInt:oneByte];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&out_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaIoFilterOutputStream *typedCopy = (JavaIoFilterOutputStream *) copy;
  typedCopy.out = out_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:out_ name:@"out"]];
  return result;
}

@end
