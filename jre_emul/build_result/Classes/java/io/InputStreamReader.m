//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/InputStreamReader.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSByteArray.h"
#import "IOSCharArray.h"
#import "java/io/ByteArrayOutputStream.h"
#import "java/io/IOException.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/io/UnsupportedEncodingException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Math.h"
#import "java/lang/NullPointerException.h"

@implementation JavaIoInputStreamReader

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaIoInputStream *)in {
  return in_;
}
- (void)setIn:(JavaIoInputStream *)in {
  JreOperatorRetainedAssign(&in_, in);
}
@synthesize in = in_;
@synthesize encoding = encoding_;
- (NSString *)backingStore {
  return backingStore_;
}
- (void)setBackingStore:(NSString *)backingStore {
  JreOperatorRetainedAssign(&backingStore_, backingStore);
}
@synthesize backingStore = backingStore_;
@synthesize currentIndex = currentIndex_;

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  if ((self = [super initWithId:inArg])) {
    self.in = inArg;
    encoding_ = 5;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoInputStream:(JavaIoInputStream *)inArg
                   withNSString:(NSString *)enc {
  if ((self = [super initWithId:inArg])) {
    if (enc == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.in = inArg;
    encoding_ = [JavaIoInputStreamReader getOSXEncodingWithNSString:enc];
    if (encoding_ == -1) {
      @throw [[[JavaIoUnsupportedEncodingException alloc] initWithNSString:enc] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

+ (int)getOSXEncodingWithNSString:(NSString *)enc {
  if ([NIL_CHK(enc) equalsIgnoreCase:@"ASCII"] || [NIL_CHK(enc) equalsIgnoreCase:@"US-ASCII"]) {
    return 1;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"EUC_JP"]) {
    return 3;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"UTF8"] || [NIL_CHK(enc) equalsIgnoreCase:@"UTF-8"]) {
    return 4;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"8859_1"] || [NIL_CHK(enc) equalsIgnoreCase:@"ISO8859_1"] || [NIL_CHK(enc) equalsIgnoreCase:@"ISO-8859-1"]) {
    return 5;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"ISO8859_2"]) {
    return 9;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"UTF-16"]) {
    return 10;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"UTF-16BE"]) {
    return (int) 0x90000100;
  }
  if ([NIL_CHK(enc) equalsIgnoreCase:@"UTF-16LE"]) {
    return (int) 0x94000100;
  }
  return -1;
}

- (void)close {
  @synchronized (lock_) {
    if (in_ != nil) {
      [in_ close];
      JreOperatorRetainedAssign(&in_, nil);
    }
  }
}

- (NSString *)getEncoding {
  if (![self isOpen]) {
    return nil;
  }
  return [JavaIoInputStreamReader nativeEncodingNameWithInt:encoding_];
}

+ (NSString *)nativeEncodingNameWithInt:(int)encoding   {
    switch (encoding) {
      case NSASCIIStringEncoding:
      return @"ASCII";
      case NSISOLatin1StringEncoding:
      return @"ISO8859_1";
      case NSUTF8StringEncoding:
      return @"UTF8";
      case NSUnicodeStringEncoding:
      return @"UTF-16";
      case NSUTF16BigEndianStringEncoding:
      return @"UnicodeBigUnmarked";
      case NSUTF16LittleEndianStringEncoding:
      return @"UnicodeLittleUnmarked";
      default:
      return nil;
    }
  }

- (int)read {
  @synchronized (lock_) {
    if (![self isOpen]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
    }
    IOSCharArray *buf = [[[IOSCharArray alloc] initWithLength:1] autorelease];
    return [self readWithJavaLangCharacterArray:buf withInt:0 withInt:1] != -1 ? [((IOSCharArray *) NIL_CHK(buf)) charAtIndex:0] : -1;
  }
}

- (int)readWithJavaLangCharacterArray:(IOSCharArray *)buf
                              withInt:(int)offset
                              withInt:(int)length {
  @synchronized (lock_) {
    if (![self isOpen]) {
      @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
    }
    if (offset < 0 || offset > (int) [((IOSCharArray *) NIL_CHK(buf)) count] - length || length < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    if (length == 0) {
      return 0;
    }
    if (backingStore_ == nil) {
      JavaIoByteArrayOutputStream *byteArray = [[[JavaIoByteArrayOutputStream alloc] init] autorelease];
      IOSByteArray *buffer = [[[IOSByteArray alloc] initWithLength:8192] autorelease];
      int len;
      while ((len = [((JavaIoInputStream *) NIL_CHK(in_)) readWithJavaLangByteArray:buffer]) > -1) {
        [((JavaIoByteArrayOutputStream *) NIL_CHK(byteArray)) writeWithJavaLangByteArray:buffer withInt:0 withInt:len];
      }
      JreOperatorRetainedAssign(&backingStore_, [self convertToStringWithJavaLangByteArray:[((JavaIoByteArrayOutputStream *) NIL_CHK(byteArray)) toByteArray]]);
      currentIndex_ = 0;
    }
    if (currentIndex_ == [NIL_CHK(backingStore_) length]) {
      return -1;
    }
    int n = [JavaLangMath minWithInt:length withInt:[NIL_CHK(backingStore_) length] - currentIndex_];
    [NIL_CHK(backingStore_) getChars:currentIndex_ sourceEnd:currentIndex_ + n destination:buf destinationBegin:offset];
    currentIndex_ += n;
    return n;
  }
}

- (NSString *)convertToStringWithJavaLangByteArray:(IOSByteArray *)byteArray   {
    NSUInteger length = [byteArray count];
    char *buffer = malloc(length);
    [byteArray getBytes:buffer offset:0 length:length];
    NSString *result = [[NSString alloc] initWithBytes:buffer length:length encoding:encoding_];
    free(buffer);
    #if ! __has_feature(objc_arc)
    [result autorelease];
    #endif
    return result;
  }

- (BOOL)isOpen {
  return in_ != nil;
}

- (BOOL)ready {
  if (in_ == nil) {
    @throw [[[JavaIoIOException alloc] initWithNSString:@"InputStreamReader is closed."] autorelease];
  }
  return backingStore_ == nil || [NIL_CHK(backingStore_) length] - currentIndex_ > 0;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&backingStore_, nil);
  JreOperatorRetainedAssign(&in_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaIoInputStreamReader *typedCopy = (JavaIoInputStreamReader *) copy;
  typedCopy.in = in_;
  typedCopy.encoding = encoding_;
  typedCopy.backingStore = backingStore_;
  typedCopy.currentIndex = currentIndex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:in_ name:@"in"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingStore_ name:@"backingStore"]];
  return result;
}

@end
