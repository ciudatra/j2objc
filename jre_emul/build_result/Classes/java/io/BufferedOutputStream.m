//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/BufferedOutputStream.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSByteArray.h"
#import "java/io/BufferedOutputStream.h"
#import "java/io/IOException.h"
#import "java/io/OutputStream.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/System.h"

@implementation JavaIoBufferedOutputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSByteArray *)buf {
  return buf_;
}
- (void)setBuf:(IOSByteArray *)buf {
  JreOperatorRetainedAssign(&buf_, buf);
}
@synthesize buf = buf_;
@synthesize count = count_;

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    JreOperatorRetainedAssign(&buf_, [[[IOSByteArray alloc] initWithLength:8192] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                         withInt:(int)size {
  if ((self = [super initWithJavaIoOutputStream:outArg])) {
    if (size <= 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"size must be > 0"] autorelease];
    }
    JreOperatorRetainedAssign(&buf_, [[[IOSByteArray alloc] initWithLength:size] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)flush {
  @synchronized(self) {
    {
      [self flushInternal];
      [((JavaIoOutputStream *) NIL_CHK(out_)) flush];
    }
  }
}

- (void)writeWithJavaLangByteArray:(IOSByteArray *)buffer
                           withInt:(int)offset
                           withInt:(int)length {
  @synchronized(self) {
    {
      IOSByteArray *internalBuffer = buf_;
      if (internalBuffer != nil && length >= (int) [((IOSByteArray *) NIL_CHK(internalBuffer)) count]) {
        [self flushInternal];
        [((JavaIoOutputStream *) NIL_CHK(out_)) writeWithJavaLangByteArray:buffer withInt:offset withInt:length];
        return;
      }
      if (buffer == nil) {
        @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"buffer is null"] autorelease];
      }
      if (offset < 0 || offset > (int) [((IOSByteArray *) NIL_CHK(buffer)) count] - length) {
        @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Offset out of bounds: %d", offset]] autorelease];
      }
      if (length < 0) {
        @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Length out of bounds: %d", length]] autorelease];
      }
      if (internalBuffer == nil) {
        @throw [[[JavaIoIOException alloc] initWithNSString:@"Stream is closed"] autorelease];
      }
      if (length >= ((int) [((IOSByteArray *) NIL_CHK(internalBuffer)) count] - count_)) {
        [self flushInternal];
      }
      [JavaLangSystem arraycopyWithId:buffer withInt:offset withId:internalBuffer withInt:count_ withInt:length];
      count_ += length;
    }
  }
}

- (void)close {
  @synchronized(self) {
    {
      if (buf_ == nil) {
        return;
      }
      @try {
        [super close];
      }
      @finally {
        JreOperatorRetainedAssign(&buf_, nil);
      }
    }
  }
}

- (void)writeWithInt:(int)oneByte {
  @synchronized(self) {
    {
      IOSByteArray *internalBuffer = buf_;
      if (internalBuffer == nil) {
        @throw [[[JavaIoIOException alloc] initWithNSString:@"Stream is closed"] autorelease];
      }
      if (count_ == (int) [((IOSByteArray *) NIL_CHK(internalBuffer)) count]) {
        [((JavaIoOutputStream *) NIL_CHK(out_)) writeWithJavaLangByteArray:internalBuffer withInt:0 withInt:count_];
        count_ = 0;
      }
      [((IOSByteArray *) NIL_CHK(internalBuffer)) replaceByteAtIndex:count_++ withByte:(char) oneByte];
    }
  }
}

- (void)flushInternal {
  if (count_ > 0) {
    [((JavaIoOutputStream *) NIL_CHK(out_)) writeWithJavaLangByteArray:buf_ withInt:0 withInt:count_];
    count_ = 0;
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&buf_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaIoBufferedOutputStream *typedCopy = (JavaIoBufferedOutputStream *) copy;
  typedCopy.buf = buf_;
  typedCopy.count = count_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buf_ name:@"buf"]];
  return result;
}

@end
