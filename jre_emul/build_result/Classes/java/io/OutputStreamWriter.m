//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/OutputStreamWriter.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSCharArray.h"
#import "java/io/IOException.h"
#import "java/io/InputStreamReader.h"
#import "java/io/OutputStream.h"
#import "java/io/OutputStreamWriter.h"
#import "java/io/UnsupportedEncodingException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringIndexOutOfBoundsException.h"

@implementation JavaIoOutputStreamWriter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaIoOutputStream *)out {
  return out_;
}
- (void)setOut:(JavaIoOutputStream *)out {
  JreOperatorRetainedAssign(&out_, out);
}
@synthesize out = out_;
@synthesize encoding = encoding_;

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  if ((self = [super initWithId:outArg])) {
    self.out = outArg;
    encoding_ = 5;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                    withNSString:(NSString *)enc {
  if ((self = [super initWithId:outArg])) {
    if (enc == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.out = outArg;
    encoding_ = [JavaIoInputStreamReader getOSXEncodingWithNSString:enc];
    if (encoding_ == -1) {
      @throw [[[JavaIoUnsupportedEncodingException alloc] initWithNSString:enc] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)close {
  if (out_ == nil) {
    return;
  }
  @synchronized (lock_) {
    [self flush];
    [((JavaIoOutputStream *) NIL_CHK(out_)) flush];
    [((JavaIoOutputStream *) NIL_CHK(out_)) close];
    JreOperatorRetainedAssign(&out_, nil);
  }
}

- (void)flush {
  [self checkStatus];
}

- (NSString *)getEncoding {
  return out_ != nil ? [JavaIoInputStreamReader nativeEncodingNameWithInt:encoding_] : nil;
}

- (void)writeWithJavaLangCharacterArray:(IOSCharArray *)buf
                                withInt:(int)offset
                                withInt:(int)count {
  [self checkStatus];
  @synchronized (lock_) {
    if (offset < 0 || offset > (int) [((IOSCharArray *) NIL_CHK(buf)) count] - count || count < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    [self convertWithJavaLangCharacterArray:buf withInt:offset withInt:count];
  }
}

- (void)convertWithJavaLangCharacterArray:(IOSCharArray *)buf
                                  withInt:(int)offset
                                  withInt:(int)count   {
    unichar *chars = [buf getChars];
    NSString *s = [[NSString alloc] initWithCharacters:(chars + offset) length:count];
    #if ! __has_feature(objc_arc)
    [s autorelease];
    #endif
    free(chars);
    NSUInteger nBytes = [s lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
    void *bytes = malloc(nBytes);
    if (![s getBytes:bytes
    maxLength:nBytes
    usedLength:NULL
    encoding:NSUTF8StringEncoding
    options:0
    range:NSMakeRange(0, count)
    remainingRange:NULL]) {
      JavaIoIOException *e = [[JavaIoIOException alloc] init];
      #if ! __has_feature(objc_arc)
      [e autorelease];
      #endif
      free(bytes);
      @throw e;
    }
    IOSByteArray *array = [[IOSByteArray alloc] initWithBytes:bytes count:nBytes];
    free(bytes);
    [out_ writeWithJavaLangByteArray:array];
    #if ! __has_feature(objc_arc)
    [array release];
    #endif
  }

- (void)writeWithInt:(int)oneChar {
  [self checkStatus];
  @synchronized (lock_) {
    IOSCharArray *buf = [[[IOSCharArray alloc] initWithLength:1] autorelease];
    [((IOSCharArray *) NIL_CHK(buf)) replaceCharAtIndex:0 withChar:(unichar) oneChar];
    [self convertWithJavaLangCharacterArray:buf withInt:0 withInt:1];
  }
}

- (void)writeWithNSString:(NSString *)str
                  withInt:(int)offset
                  withInt:(int)count {
  @synchronized (lock_) {
    if (count < 0) {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    if (offset + count > [NIL_CHK(str) length] || offset < 0) {
      @throw [[[JavaLangStringIndexOutOfBoundsException alloc] init] autorelease];
    }
    [self checkStatus];
    IOSCharArray *chars = [NIL_CHK(str) toCharArray];
    [self convertWithJavaLangCharacterArray:chars withInt:offset withInt:count];
  }
}

- (void)checkStatus {
  if (out_ == nil) {
    @throw [[[JavaIoIOException alloc] initWithNSString:@"Writer is closed."] autorelease];
  }
}

- (BOOL)checkError {
  return [((JavaIoOutputStream *) NIL_CHK(out_)) checkError];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&out_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaIoOutputStreamWriter *typedCopy = (JavaIoOutputStreamWriter *) copy;
  typedCopy.out = out_;
  typedCopy.encoding = encoding_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:out_ name:@"out"]];
  return result;
}

@end
