//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/io/InputStream.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSByteArray.h"
#import "java/io/IOException.h"
#import "java/io/InputStream.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/NullPointerException.h"

@implementation JavaIoInputStream

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaIoInputStream_skipBuf_ name:@"JavaIoInputStream_skipBuf_"]];
  return result;
}

static IOSByteArray * JavaIoInputStream_skipBuf_;

+ (IOSByteArray *)skipBuf {
  return JavaIoInputStream_skipBuf_;
}

+ (void)setSkipBuf:(IOSByteArray *)skipBuf {
  JreOperatorRetainedAssign(&JavaIoInputStream_skipBuf_, skipBuf);
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (int)available {
  return 0;
}

- (void)close {
}

- (void)markWithInt:(int)readlimit {
}

- (BOOL)markSupported {
  return NO;
}

- (int)read {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)readWithJavaLangByteArray:(IOSByteArray *)b {
  return [self readWithJavaLangByteArray:b withInt:0 withInt:(int) [((IOSByteArray *) NIL_CHK(b)) count]];
}

- (int)readWithJavaLangByteArray:(IOSByteArray *)b
                         withInt:(int)offset
                         withInt:(int)length {
  if (b == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (offset > (int) [((IOSByteArray *) NIL_CHK(b)) count] || offset < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"offset out of bounds: %d", offset]] autorelease];
  }
  if (length < 0 || length > (int) [((IOSByteArray *) NIL_CHK(b)) count] - offset) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"length out of bounds: %d", length]] autorelease];
  }
  for (int i = 0; i < length; i++) {
    int c;
    @try {
      if ((c = [self read]) == -1) {
        return i == 0 ? -1 : i;
      }
    }
    @catch (JavaIoIOException *e) {
      if (i != 0) {
        return i;
      }
      @throw e;
    }
    [((IOSByteArray *) NIL_CHK(b)) replaceByteAtIndex:offset + i withByte:(char) c];
  }
  return length;
}

- (void)reset {
  @synchronized(self) {
    {
      @throw [[[JavaIoIOException alloc] init] autorelease];
    }
  }
}

- (long long int)skipWithLongInt:(long long int)n {
  if (n <= 0) {
    return 0;
  }
  long long int skipped = 0;
  int toRead = n < 4096 ? (int) n : 4096;
  IOSByteArray *localBuf = JavaIoInputStream_skipBuf_;
  if (localBuf == nil || (int) [((IOSByteArray *) NIL_CHK(localBuf)) count] < toRead) {
    JreOperatorRetainedAssign(&JavaIoInputStream_skipBuf_, localBuf = [[[IOSByteArray alloc] initWithLength:toRead] autorelease]);
  }
  while (skipped < n) {
    int read = [self readWithJavaLangByteArray:localBuf withInt:0 withInt:toRead];
    if (read == -1) {
      return skipped;
    }
    skipped += read;
    if (read < toRead) {
      return skipped;
    }
    if (n - skipped < toRead) {
      toRead = (int) (n - skipped);
    }
  }
  return skipped;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
