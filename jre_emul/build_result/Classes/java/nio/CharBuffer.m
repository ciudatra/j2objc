//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio/src/main/java/common/java/nio/CharBuffer.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSCharArray.h"
#import "java/lang/CharSequence.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Math.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuilder.h"
#import "java/nio/Buffer.h"
#import "java/nio/BufferFactory.h"
#import "java/nio/BufferOverflowException.h"
#import "java/nio/BufferUnderflowException.h"
#import "java/nio/ByteOrder.h"
#import "java/nio/CharBuffer.h"

@implementation JavaNioCharBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioCharBuffer *)allocateWithInt:(int)capacity OBJC_METHOD_FAMILY_NONE {
  if (capacity < 0) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  return [JavaNioBufferFactory newCharBufferWithInt:capacity];
}

+ (JavaNioCharBuffer *)wrapWithJavaLangCharacterArray:(IOSCharArray *)array {
  return [JavaNioCharBuffer wrapWithJavaLangCharacterArray:array withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(array)) count]];
}

+ (JavaNioCharBuffer *)wrapWithJavaLangCharacterArray:(IOSCharArray *)array
                                              withInt:(int)start
                                              withInt:(int)len {
  int length = (int) [((IOSCharArray *) NIL_CHK(array)) count];
  if ((start < 0) || (len < 0) || (long long int) start + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  JavaNioCharBuffer *buf = [JavaNioBufferFactory newCharBufferWithJavaLangCharacterArray:array];
  ((JavaNioCharBuffer *) NIL_CHK(buf)).position_ = start;
  ((JavaNioCharBuffer *) NIL_CHK(buf)).limit_ = start + len;
  return buf;
}

+ (JavaNioCharBuffer *)wrapWithJavaLangCharSequence:(id<JavaLangCharSequence>)chseq {
  return [JavaNioBufferFactory newCharBufferWithJavaLangCharSequence:chseq];
}

+ (JavaNioCharBuffer *)wrapWithJavaLangCharSequence:(id<JavaLangCharSequence>)chseq
                                            withInt:(int)start
                                            withInt:(int)end {
  if (chseq == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (start < 0 || end < start || end > [((id<JavaLangCharSequence>) NIL_CHK(chseq)) sequenceLength]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  JavaNioCharBuffer *result = [JavaNioBufferFactory newCharBufferWithJavaLangCharSequence:chseq];
  ((JavaNioCharBuffer *) NIL_CHK(result)).position_ = start;
  ((JavaNioCharBuffer *) NIL_CHK(result)).limit_ = end;
  return result;
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithInt:capacity]);
}

- (IOSCharArray *)array {
  return [self protectedArray];
}

- (int)arrayOffset {
  return [self protectedArrayOffset];
}

- (JavaNioCharBuffer *)asReadOnlyBuffer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (unichar)charAtWithInt:(int)index {
  if (index < 0 || index >= [self remaining]) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [self getWithInt:position__ + index];
}

- (JavaNioCharBuffer *)compact {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)compareToWithId:(JavaNioCharBuffer *)otherBuffer {
  if (otherBuffer != nil && ![otherBuffer isKindOfClass:[JavaNioCharBuffer class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int compareRemaining = ([self remaining] < [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) remaining]) ? [self remaining] : [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) remaining];
  int thisPos = position__;
  int otherPos = ((JavaNioCharBuffer *) NIL_CHK(otherBuffer)).position_;
  unichar thisByte, otherByte;
  while (compareRemaining > 0) {
    thisByte = [self getWithInt:thisPos];
    otherByte = [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) getWithInt:otherPos];
    if (thisByte != otherByte) {
      return thisByte < otherByte ? -1 : 1;
    }
    thisPos++;
    otherPos++;
    compareRemaining--;
  }
  return [self remaining] - [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) remaining];
}

- (JavaNioCharBuffer *)duplicate {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)isEqual:(id)other {
  if (!([other isKindOfClass:[JavaNioCharBuffer class]])) {
    return NO;
  }
  JavaNioCharBuffer *otherBuffer = (JavaNioCharBuffer *) other;
  if ([self remaining] != [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) remaining]) {
    return NO;
  }
  int myPosition = position__;
  int otherPosition = ((JavaNioCharBuffer *) NIL_CHK(otherBuffer)).position_;
  BOOL equalSoFar = YES;
  while (equalSoFar && (myPosition < limit__)) {
    equalSoFar = [self getWithInt:myPosition++] == [((JavaNioCharBuffer *) NIL_CHK(otherBuffer)) getWithInt:otherPosition++];
  }
  return equalSoFar;
}

- (unichar)get {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharBuffer *)getWithJavaLangCharacterArray:(IOSCharArray *)dest {
  return [self getWithJavaLangCharacterArray:dest withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(dest)) count]];
}

- (JavaNioCharBuffer *)getWithJavaLangCharacterArray:(IOSCharArray *)dest
                                             withInt:(int)off
                                             withInt:(int)len {
  int length = (int) [((IOSCharArray *) NIL_CHK(dest)) count];
  if ((off < 0) || (len < 0) || (long long int) off + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  for (int i = off; i < off + len; i++) {
    [((IOSCharArray *) NIL_CHK(dest)) replaceCharAtIndex:i withChar:[self get]];
  }
  return self;
}

- (unichar)getWithInt:(int)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)hasArray {
  return [self protectedHasArray];
}

- (NSUInteger)hash {
  int myPosition = position__;
  int hash_ = 0;
  while (myPosition < limit__) {
    hash_ = hash_ + [self getWithInt:myPosition++];
  }
  return hash_;
}

- (BOOL)isDirect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)sequenceLength {
  return [self remaining];
}

- (JavaNioByteOrder *)order {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSCharArray *)protectedArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int)protectedArrayOffset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)protectedHasArray {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharBuffer *)putWithUnichar:(unichar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharBuffer *)putWithJavaLangCharacterArray:(IOSCharArray *)src {
  return [self putWithJavaLangCharacterArray:src withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(src)) count]];
}

- (JavaNioCharBuffer *)putWithJavaLangCharacterArray:(IOSCharArray *)src
                                             withInt:(int)off
                                             withInt:(int)len {
  int length = (int) [((IOSCharArray *) NIL_CHK(src)) count];
  if ((off < 0) || (len < 0) || (long long int) off + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  for (int i = off; i < off + len; i++) {
    [self putWithUnichar:[((IOSCharArray *) NIL_CHK(src)) charAtIndex:i]];
  }
  return self;
}

- (JavaNioCharBuffer *)putWithJavaNioCharBuffer:(JavaNioCharBuffer *)src {
  if (src == self) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if ([((JavaNioCharBuffer *) NIL_CHK(src)) remaining] > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  IOSCharArray *contents = [[[IOSCharArray alloc] initWithLength:[((JavaNioCharBuffer *) NIL_CHK(src)) remaining]] autorelease];
  [((JavaNioCharBuffer *) NIL_CHK(src)) getWithJavaLangCharacterArray:contents];
  [self putWithJavaLangCharacterArray:contents];
  return self;
}

- (JavaNioCharBuffer *)putWithInt:(int)index
                      withUnichar:(unichar)c {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaNioCharBuffer *)putWithNSString:(NSString *)str {
  return [self putWithNSString:str withInt:0 withInt:[NIL_CHK(str) length]];
}

- (JavaNioCharBuffer *)putWithNSString:(NSString *)str
                               withInt:(int)start
                               withInt:(int)end {
  int length = [NIL_CHK(str) length];
  if (start < 0 || end < start || end > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (end - start > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  for (int i = start; i < end; i++) {
    [self putWithUnichar:[NIL_CHK(str) charAtWithInt:i]];
  }
  return self;
}

- (JavaNioCharBuffer *)slice {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaLangCharSequence>)subSequenceFrom:(int)start to:(int)end {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)sequenceDescription {
  JavaLangStringBuilder *strbuf = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = position__; i < limit__; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(strbuf)) appendWithUnichar:[self getWithInt:i]];
  }
  return [((JavaLangStringBuilder *) NIL_CHK(strbuf)) description];
}

- (JavaNioCharBuffer *)appendWithUnichar:(unichar)c {
  return [self putWithUnichar:c];
}

- (JavaNioCharBuffer *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq {
  if (csq != nil) {
    return [self putWithNSString:[csq description]];
  }
  return [self putWithNSString:@"null"];
}

- (JavaNioCharBuffer *)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)csq
                                              withInt:(int)start
                                              withInt:(int)end {
  if (csq == nil) {
    csq = @"null";
  }
  id<JavaLangCharSequence> cs = [((id<JavaLangCharSequence>) NIL_CHK(csq)) subSequenceFrom:start to:end];
  if ([((id<JavaLangCharSequence>) NIL_CHK(cs)) sequenceLength] > 0) {
    return [self putWithNSString:[((id<JavaLangCharSequence>) NIL_CHK(cs)) description]];
  }
  return self;
}

- (int)readWithJavaNioCharBuffer:(JavaNioCharBuffer *)target {
  int remaining = [self remaining];
  if (target == self) {
    if (remaining == 0) {
      return -1;
    }
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (remaining == 0) {
    return limit__ > 0 && [((JavaNioCharBuffer *) NIL_CHK(target)) remaining] == 0 ? 0 : -1;
  }
  remaining = [JavaLangMath minWithInt:[((JavaNioCharBuffer *) NIL_CHK(target)) remaining] withInt:remaining];
  if (remaining > 0) {
    IOSCharArray *chars = [[[IOSCharArray alloc] initWithLength:remaining] autorelease];
    [self getWithJavaLangCharacterArray:chars];
    [((JavaNioCharBuffer *) NIL_CHK(target)) putWithJavaLangCharacterArray:chars];
  }
  return remaining;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (NSString *)description {
  return [self sequenceDescription];
}

@end
