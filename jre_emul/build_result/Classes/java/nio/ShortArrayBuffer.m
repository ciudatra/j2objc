//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio/src/main/java/common/java/nio/ShortArrayBuffer.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSShortArray.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/System.h"
#import "java/nio/Buffer.h"
#import "java/nio/BufferUnderflowException.h"
#import "java/nio/ByteOrder.h"
#import "java/nio/ShortArrayBuffer.h"
#import "java/nio/ShortBuffer.h"

@implementation JavaNioShortArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSShortArray *)backingArray {
  return backingArray_;
}
- (void)setBackingArray:(IOSShortArray *)backingArray {
  JreOperatorRetainedAssign(&backingArray_, backingArray);
}
@synthesize backingArray = backingArray_;
@synthesize offset = offset_;

- (id)initWithJavaLangShortArray:(IOSShortArray *)array {
  return JreMemDebugAdd([self initJavaNioShortArrayBufferWithInt:(int) [((IOSShortArray *) NIL_CHK(array)) count] withJavaLangShortArray:array withInt:0]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([self initJavaNioShortArrayBufferWithInt:capacity withJavaLangShortArray:[[[IOSShortArray alloc] initWithLength:capacity] autorelease] withInt:0]);
}

- (id)initJavaNioShortArrayBufferWithInt:(int)capacity
                  withJavaLangShortArray:(IOSShortArray *)backingArray
                                 withInt:(int)offset {
  if ((self = [super initWithInt:capacity])) {
    self.backingArray = backingArray;
    self.offset = offset;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)capacity
withJavaLangShortArray:(IOSShortArray *)backingArray
          withInt:(int)offset {
  return [self initJavaNioShortArrayBufferWithInt:capacity withJavaLangShortArray:backingArray withInt:offset];
}

- (short int)get {
  if (position__ == limit__) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  return [((IOSShortArray *) NIL_CHK(backingArray_)) shortAtIndex:offset_ + position__++];
}

- (short int)getWithInt:(int)index {
  if (index < 0 || index >= limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSShortArray *) NIL_CHK(backingArray_)) shortAtIndex:offset_ + index];
}

- (JavaNioShortBuffer *)getWithJavaLangShortArray:(IOSShortArray *)dest
                                          withInt:(int)off
                                          withInt:(int)len {
  int length = (int) [((IOSShortArray *) NIL_CHK(dest)) count];
  if (off < 0 || len < 0 || (long long int) off + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferUnderflowException alloc] init] autorelease];
  }
  [JavaLangSystem arraycopyWithId:backingArray_ withInt:offset_ + position__ withId:dest withInt:off withInt:len];
  position__ += len;
  return self;
}

- (BOOL)isDirect {
  return NO;
}

- (JavaNioByteOrder *)order {
  return [JavaNioByteOrder nativeOrder];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&backingArray_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaNioShortArrayBuffer *typedCopy = (JavaNioShortArrayBuffer *) copy;
  typedCopy.backingArray = backingArray_;
  typedCopy.offset = offset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingArray_ name:@"backingArray"]];
  return result;
}

@end
