//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/nio/src/main/java/common/java/nio/ReadWriteShortArrayBuffer.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSShortArray.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/System.h"
#import "java/nio/Buffer.h"
#import "java/nio/BufferOverflowException.h"
#import "java/nio/ReadOnlyShortArrayBuffer.h"
#import "java/nio/ReadWriteShortArrayBuffer.h"
#import "java/nio/ShortArrayBuffer.h"
#import "java/nio/ShortBuffer.h"

@implementation JavaNioReadWriteShortArrayBuffer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

+ (JavaNioReadWriteShortArrayBuffer *)copy__WithJavaNioShortArrayBuffer:(JavaNioShortArrayBuffer *)other
                                                                withInt:(int)markOfOther OBJC_METHOD_FAMILY_NONE {
  JavaNioReadWriteShortArrayBuffer *buf = [[[JavaNioReadWriteShortArrayBuffer alloc] initWithInt:[((JavaNioShortArrayBuffer *) NIL_CHK(other)) capacity] withJavaLangShortArray:((JavaNioShortArrayBuffer *) NIL_CHK(other)).backingArray withInt:((JavaNioShortArrayBuffer *) NIL_CHK(other)).offset] autorelease];
  ((JavaNioReadWriteShortArrayBuffer *) NIL_CHK(buf)).limit_ = [((JavaNioShortArrayBuffer *) NIL_CHK(other)) limit];
  ((JavaNioReadWriteShortArrayBuffer *) NIL_CHK(buf)).position_ = [((JavaNioShortArrayBuffer *) NIL_CHK(other)) position];
  ((JavaNioReadWriteShortArrayBuffer *) NIL_CHK(buf)).mark_ = markOfOther;
  return buf;
}

- (id)initWithJavaLangShortArray:(IOSShortArray *)array {
  return JreMemDebugAdd([super initWithJavaLangShortArray:array]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([super initWithInt:capacity]);
}

- (id)initWithInt:(int)capacity
withJavaLangShortArray:(IOSShortArray *)backingArray
          withInt:(int)arrayOffset {
  return JreMemDebugAdd([super initWithInt:capacity withJavaLangShortArray:backingArray withInt:arrayOffset]);
}

- (JavaNioShortBuffer *)asReadOnlyBuffer {
  return [JavaNioReadOnlyShortArrayBuffer copy__WithJavaNioShortArrayBuffer:self withInt:mark__];
}

- (JavaNioShortBuffer *)compact {
  [JavaLangSystem arraycopyWithId:backingArray_ withInt:position__ + offset_ withId:backingArray_ withInt:offset_ withInt:[self remaining]];
  position__ = limit__ - position__;
  limit__ = capacity__;
  mark__ = JavaNioBuffer_UNSET_MARK;
  return self;
}

- (JavaNioShortBuffer *)duplicate {
  return [JavaNioReadWriteShortArrayBuffer copy__WithJavaNioShortArrayBuffer:self withInt:mark__];
}

- (BOOL)isReadOnly {
  return NO;
}

- (IOSShortArray *)protectedArray {
  return backingArray_;
}

- (int)protectedArrayOffset {
  return offset_;
}

- (BOOL)protectedHasArray {
  return YES;
}

- (JavaNioShortBuffer *)putWithShortInt:(short int)c {
  if (position__ == limit__) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [((IOSShortArray *) NIL_CHK(backingArray_)) replaceShortAtIndex:offset_ + position__++ withShort:c];
  return self;
}

- (JavaNioShortBuffer *)putWithInt:(int)index
                      withShortInt:(short int)c {
  if (index < 0 || index >= limit__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  [((IOSShortArray *) NIL_CHK(backingArray_)) replaceShortAtIndex:offset_ + index withShort:c];
  return self;
}

- (JavaNioShortBuffer *)putWithJavaLangShortArray:(IOSShortArray *)src
                                          withInt:(int)off
                                          withInt:(int)len {
  int length = (int) [((IOSShortArray *) NIL_CHK(src)) count];
  if (off < 0 || len < 0 || (long long int) off + (long long int) len > length) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (len > [self remaining]) {
    @throw [[[JavaNioBufferOverflowException alloc] init] autorelease];
  }
  [JavaLangSystem arraycopyWithId:src withInt:off withId:backingArray_ withInt:offset_ + position__ withInt:len];
  position__ += len;
  return self;
}

- (JavaNioShortBuffer *)slice {
  return [[[JavaNioReadWriteShortArrayBuffer alloc] initWithInt:[self remaining] withJavaLangShortArray:backingArray_ withInt:offset_ + position__] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
