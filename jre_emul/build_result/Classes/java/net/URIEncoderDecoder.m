//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/net/URIEncoderDecoder.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSByteArray.h"
#import "IOSCharArray.h"
#import "java/io/ByteArrayOutputStream.h"
#import "java/lang/Character.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/StringBuilder.h"
#import "java/net/URIEncoderDecoder.h"
#import "java/net/URISyntaxException.h"

@implementation JavaNetURIEncoderDecoder

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURIEncoderDecoder_digits_ name:@"JavaNetURIEncoderDecoder_digits_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURIEncoderDecoder_encoding_ name:@"JavaNetURIEncoderDecoder_encoding_"]];
  return result;
}

static NSString * JavaNetURIEncoderDecoder_digits_ = @"0123456789ABCDEF";
static NSString * JavaNetURIEncoderDecoder_encoding_ = @"UTF8";

+ (NSString *)digits {
  return JavaNetURIEncoderDecoder_digits_;
}

+ (NSString *)encoding {
  return JavaNetURIEncoderDecoder_encoding_;
}

+ (void)validateWithNSString:(NSString *)s
                withNSString:(NSString *)legal {
  for (int i = 0; i < [NIL_CHK(s) length]; ) {
    unichar ch = [NIL_CHK(s) charAtWithInt:i];
    if (ch == '%') {
      do {
        if (i + 2 >= [NIL_CHK(s) length]) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:s withNSString:@"Incomplete % sequence" withInt:i] autorelease];
        }
        int d1 = [JavaLangCharacter digitWithUnichar:[NIL_CHK(s) charAtWithInt:i + 1] withInt:16];
        int d2 = [JavaLangCharacter digitWithUnichar:[NIL_CHK(s) charAtWithInt:i + 2] withInt:16];
        if (d1 == -1 || d2 == -1) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:s withNSString:[NSString stringWithFormat:@"Invalid %% sequence (%@)", [NIL_CHK(s) substring:i endIndex:i + 3]] withInt:i] autorelease];
        }
        i += 3;
      }
      while (i < [NIL_CHK(s) length] && [NIL_CHK(s) charAtWithInt:i] == '%');
      continue;
    }
    if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || [NIL_CHK(legal) indexOf:ch] > -1 || (ch > 127 && ![JavaLangCharacter isSpaceCharWithUnichar:ch] && ![JavaLangCharacter isISOControlWithUnichar:ch]))) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:s withNSString:@"Illegal character" withInt:i] autorelease];
    }
    i++;
  }
}

+ (void)validateSimpleWithNSString:(NSString *)s
                      withNSString:(NSString *)legal {
  for (int i = 0; i < [NIL_CHK(s) length]; ) {
    unichar ch = [NIL_CHK(s) charAtWithInt:i];
    if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || [NIL_CHK(legal) indexOf:ch] > -1)) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:s withNSString:@"Illegal character" withInt:i] autorelease];
    }
    i++;
  }
}

+ (NSString *)quoteIllegalWithNSString:(NSString *)s
                          withNSString:(NSString *)legal {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [NIL_CHK(s) length]; i++) {
    unichar ch = [NIL_CHK(s) charAtWithInt:i];
    if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9') || [NIL_CHK(legal) indexOf:ch] > -1 || (ch > 127 && ![JavaLangCharacter isSpaceCharWithUnichar:ch] && ![JavaLangCharacter isISOControlWithUnichar:ch])) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:ch];
    }
    else {
      IOSByteArray *bytes = [((NSString *) [NSString stringWithCharacters:[IOSCharArray arrayWithCharacters:(unichar[]){ ch } count:1]]) getBytesWithCharset:JavaNetURIEncoderDecoder_encoding_];
      for (int j = 0; j < (int) [((IOSByteArray *) NIL_CHK(bytes)) count]; j++) {
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:'%'];
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(JavaNetURIEncoderDecoder_digits_) charAtWithInt:([((IOSByteArray *) NIL_CHK(bytes)) byteAtIndex:j] & (int) 0xf0) >> 4]];
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(JavaNetURIEncoderDecoder_digits_) charAtWithInt:[((IOSByteArray *) NIL_CHK(bytes)) byteAtIndex:j] & (int) 0xf]];
      }
    }
  }
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

+ (NSString *)encodeOthersWithNSString:(NSString *)s {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [NIL_CHK(s) length]; i++) {
    unichar ch = [NIL_CHK(s) charAtWithInt:i];
    if (ch <= 127) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:ch];
    }
    else {
      IOSByteArray *bytes = [((NSString *) [NSString stringWithCharacters:[IOSCharArray arrayWithCharacters:(unichar[]){ ch } count:1]]) getBytesWithCharset:JavaNetURIEncoderDecoder_encoding_];
      for (int j = 0; j < (int) [((IOSByteArray *) NIL_CHK(bytes)) count]; j++) {
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:'%'];
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(JavaNetURIEncoderDecoder_digits_) charAtWithInt:([((IOSByteArray *) NIL_CHK(bytes)) byteAtIndex:j] & (int) 0xf0) >> 4]];
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:[NIL_CHK(JavaNetURIEncoderDecoder_digits_) charAtWithInt:[((IOSByteArray *) NIL_CHK(bytes)) byteAtIndex:j] & (int) 0xf]];
      }
    }
  }
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

+ (NSString *)decodeWithNSString:(NSString *)s {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  JavaIoByteArrayOutputStream *out = [[[JavaIoByteArrayOutputStream alloc] init] autorelease];
  for (int i = 0; i < [NIL_CHK(s) length]; ) {
    unichar c = [NIL_CHK(s) charAtWithInt:i];
    if (c == '%') {
      [((JavaIoByteArrayOutputStream *) NIL_CHK(out)) reset];
      do {
        if (i + 2 >= [NIL_CHK(s) length]) {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Incomplete %% sequence at: %d", i]] autorelease];
        }
        int d1 = [JavaLangCharacter digitWithUnichar:[NIL_CHK(s) charAtWithInt:i + 1] withInt:16];
        int d2 = [JavaLangCharacter digitWithUnichar:[NIL_CHK(s) charAtWithInt:i + 2] withInt:16];
        if (d1 == -1 || d2 == -1) {
          @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid %% sequence (%@) at: %@", [NIL_CHK(s) substring:i endIndex:i + 3], [NSString valueOfInt:i]]] autorelease];
        }
        [((JavaIoByteArrayOutputStream *) NIL_CHK(out)) writeWithInt:(char) ((d1 << 4) + d2)];
        i += 3;
      }
      while (i < [NIL_CHK(s) length] && [NIL_CHK(s) charAtWithInt:i] == '%');
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[((JavaIoByteArrayOutputStream *) NIL_CHK(out)) toStringWithNSString:JavaNetURIEncoderDecoder_encoding_]];
      continue;
    }
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:c];
    i++;
  }
  return [((JavaLangStringBuilder *) NIL_CHK(result)) description];
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
