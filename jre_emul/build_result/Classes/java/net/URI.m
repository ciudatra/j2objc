//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/net/URI.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSBooleanArray.h"
#import "IOSObjectArray.h"
#import "java/io/UnsupportedEncodingException.h"
#import "java/lang/Character.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Exception.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/NumberFormatException.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/StringBuilder.h"
#import "java/net/URI.h"
#import "java/net/URIEncoderDecoder.h"
#import "java/net/URISyntaxException.h"
#import "java/util/StringTokenizer.h"

@implementation JavaNetURI

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_unreserved_ name:@"JavaNetURI_unreserved_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_punct_ name:@"JavaNetURI_punct_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_reserved_ name:@"JavaNetURI_reserved_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_someLegal_ name:@"JavaNetURI_someLegal_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_queryLegal_ name:@"JavaNetURI_queryLegal_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaNetURI_allLegal_ name:@"JavaNetURI_allLegal_"]];
  return result;
}

static NSString * JavaNetURI_unreserved_ = @"_-!.~\'()*";
static NSString * JavaNetURI_punct_ = @",;:$&+=";
static NSString * JavaNetURI_reserved_ = @",;:$&+=?/[]@";
static NSString * JavaNetURI_someLegal_ = @"_-!.~'()*,;:$&+=";
static NSString * JavaNetURI_queryLegal_ = @"_-!.~'()*,;:$&+=?/[]@\\\"";
static NSString * JavaNetURI_allLegal_ = @"_-!.~'()*,;:$&+=?/[]@";

- (NSString *)string {
  return string_;
}
- (void)setString:(NSString *)string {
  JreOperatorRetainedAssign(&string_, string);
}
@synthesize string = string_;
- (NSString *)scheme {
  return scheme_;
}
- (void)setScheme:(NSString *)scheme {
  JreOperatorRetainedAssign(&scheme_, scheme);
}
@synthesize scheme = scheme_;
- (NSString *)schemespecificpart {
  return schemespecificpart_;
}
- (void)setSchemespecificpart:(NSString *)schemespecificpart {
  JreOperatorRetainedAssign(&schemespecificpart_, schemespecificpart);
}
@synthesize schemespecificpart = schemespecificpart_;
- (NSString *)authority {
  return authority_;
}
- (void)setAuthority:(NSString *)authority {
  JreOperatorRetainedAssign(&authority_, authority);
}
@synthesize authority = authority_;
- (NSString *)userinfo {
  return userinfo_;
}
- (void)setUserinfo:(NSString *)userinfo {
  JreOperatorRetainedAssign(&userinfo_, userinfo);
}
@synthesize userinfo = userinfo_;
- (NSString *)host {
  return host_;
}
- (void)setHost:(NSString *)host {
  JreOperatorRetainedAssign(&host_, host);
}
@synthesize host = host_;
@synthesize port = port_;
- (NSString *)path {
  return path_;
}
- (void)setPath:(NSString *)path {
  JreOperatorRetainedAssign(&path_, path);
}
@synthesize path = path_;
- (NSString *)query {
  return query_;
}
- (void)setQuery:(NSString *)query {
  JreOperatorRetainedAssign(&query_, query);
}
@synthesize query = query_;
- (NSString *)fragment {
  return fragment_;
}
- (void)setFragment:(NSString *)fragment {
  JreOperatorRetainedAssign(&fragment_, fragment);
}
@synthesize fragment = fragment_;
@synthesize opaque = opaque_;
@synthesize absolute = absolute_;
@synthesize serverAuthority = serverAuthority_;
@synthesize hash_ = hash__;

+ (NSString *)unreserved {
  return JavaNetURI_unreserved_;
}

+ (NSString *)punct {
  return JavaNetURI_punct_;
}

+ (NSString *)reserved {
  return JavaNetURI_reserved_;
}

+ (NSString *)someLegal {
  return JavaNetURI_someLegal_;
}

+ (NSString *)queryLegal {
  return JavaNetURI_queryLegal_;
}

+ (NSString *)allLegal {
  return JavaNetURI_allLegal_;
}

- (id)init {
  if ((self = [super init])) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)uri {
  if ((self = [super init])) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:uri withBOOL:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)ssp
          withNSString:(NSString *)frag {
  if ((self = [super init])) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:scheme];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:':'];
    }
    if (ssp != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:ssp withNSString:JavaNetURI_allLegal_]];
    }
    if (frag != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'#'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:frag withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[((JavaLangStringBuilder *) NIL_CHK(uri)) description] withBOOL:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaNetURIWithNSString:(NSString *)scheme
                    withNSString:(NSString *)userinfo
                    withNSString:(NSString *)host
                         withInt:(int)port
                    withNSString:(NSString *)path
                    withNSString:(NSString *)query
                    withNSString:(NSString *)fragment {
  if ((self = [super init])) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    if (scheme == nil && userinfo == nil && host == nil && path == nil && query == nil && fragment == nil) {
      self.path = @"";
      return self;
    }
    if (scheme != nil && path != nil && [NIL_CHK(path) length] > 0 && [NIL_CHK(path) charAtWithInt:0] != '/') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:path withNSString:@"Relative path"] autorelease];
    }
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:scheme];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:':'];
    }
    if (userinfo != nil || host != nil || port != -1) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:@"//"];
    }
    if (userinfo != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:userinfo withNSString:JavaNetURI_someLegal_]];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'@'];
    }
    if (host != nil) {
      if ([host indexOf:':'] != -1 && [host indexOf:']'] == -1 && [host indexOf:'['] == -1) {
        host = [NSString stringWithFormat:@"[%@]", host];
      }
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:host];
    }
    if (port != -1) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:':'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithInt:port];
    }
    if (path != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:path withNSString:@"/@_-!.~'()*,;:$&+="]];
    }
    if (query != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'?'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:query withNSString:JavaNetURI_allLegal_]];
    }
    if (fragment != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'#'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:fragment withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[((JavaLangStringBuilder *) NIL_CHK(uri)) description] withBOOL:YES];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)userinfo
          withNSString:(NSString *)host
               withInt:(int)port
          withNSString:(NSString *)path
          withNSString:(NSString *)query
          withNSString:(NSString *)fragment {
  return [self initJavaNetURIWithNSString:scheme withNSString:userinfo withNSString:host withInt:port withNSString:path withNSString:query withNSString:fragment];
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)host
          withNSString:(NSString *)path
          withNSString:(NSString *)fragment {
  return JreMemDebugAdd([self initJavaNetURIWithNSString:scheme withNSString:nil withNSString:host withInt:-1 withNSString:path withNSString:nil withNSString:fragment]);
}

- (id)initWithNSString:(NSString *)scheme
          withNSString:(NSString *)authority
          withNSString:(NSString *)path
          withNSString:(NSString *)query
          withNSString:(NSString *)fragment {
  if ((self = [super init])) {
    port_ = -1;
    serverAuthority_ = NO;
    hash__ = -1;
    if (scheme != nil && path != nil && [NIL_CHK(path) length] > 0 && [NIL_CHK(path) charAtWithInt:0] != '/') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:path withNSString:@"Relative path"] autorelease];
    }
    JavaLangStringBuilder *uri = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:scheme];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:':'];
    }
    if (authority != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:@"//"];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:authority withNSString:@"@[]_-!.~'()*,;:$&+="]];
    }
    if (path != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:path withNSString:@"/@_-!.~'()*,;:$&+="]];
    }
    if (query != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'?'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:query withNSString:JavaNetURI_allLegal_]];
    }
    if (fragment != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithUnichar:'#'];
      [((JavaLangStringBuilder *) NIL_CHK(uri)) appendWithNSString:[self quoteComponentWithNSString:fragment withNSString:JavaNetURI_allLegal_]];
    }
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseURIWithNSString:[((JavaLangStringBuilder *) NIL_CHK(uri)) description] withBOOL:NO];
    JreMemDebugAdd(self);
  }
  return self;
}

- (NSString *)quoteComponentWithNSString:(NSString *)component
                            withNSString:(NSString *)legalset {
  @try {
    return [JavaNetURIEncoderDecoder quoteIllegalWithNSString:component withNSString:legalset];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) NIL_CHK(e)) description]] autorelease];
  }
}

- (int)compareToWithId:(JavaNetURI *)uri {
  if (uri != nil && ![uri isKindOfClass:[JavaNetURI class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int ret = 0;
  if (scheme_ == nil && ((JavaNetURI *) NIL_CHK(uri)).scheme != nil) {
    return -1;
  }
  else if (scheme_ != nil && ((JavaNetURI *) NIL_CHK(uri)).scheme == nil) {
    return 1;
  }
  else if (scheme_ != nil && ((JavaNetURI *) NIL_CHK(uri)).scheme != nil) {
    ret = [NIL_CHK(scheme_) compareToIgnoreCase:((JavaNetURI *) NIL_CHK(uri)).scheme];
    if (ret != 0) {
      return ret;
    }
  }
  if (!opaque_ && ((JavaNetURI *) NIL_CHK(uri)).opaque) {
    return -1;
  }
  else if (opaque_ && !((JavaNetURI *) NIL_CHK(uri)).opaque) {
    return 1;
  }
  else if (opaque_ && ((JavaNetURI *) NIL_CHK(uri)).opaque) {
    ret = [NIL_CHK(schemespecificpart_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).schemespecificpart];
    if (ret != 0) {
      return ret;
    }
  }
  else {
    if (authority_ != nil && ((JavaNetURI *) NIL_CHK(uri)).authority == nil) {
      return 1;
    }
    else if (authority_ == nil && ((JavaNetURI *) NIL_CHK(uri)).authority != nil) {
      return -1;
    }
    else if (authority_ != nil && ((JavaNetURI *) NIL_CHK(uri)).authority != nil) {
      if (host_ != nil && ((JavaNetURI *) NIL_CHK(uri)).host != nil) {
        if (userinfo_ != nil && ((JavaNetURI *) NIL_CHK(uri)).userinfo == nil) {
          return 1;
        }
        else if (userinfo_ == nil && ((JavaNetURI *) NIL_CHK(uri)).userinfo != nil) {
          return -1;
        }
        else if (userinfo_ != nil && ((JavaNetURI *) NIL_CHK(uri)).userinfo != nil) {
          ret = [NIL_CHK(userinfo_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).userinfo];
          if (ret != 0) {
            return ret;
          }
        }
        ret = [NIL_CHK(host_) compareToIgnoreCase:((JavaNetURI *) NIL_CHK(uri)).host];
        if (ret != 0) {
          return ret;
        }
        if (port_ != ((JavaNetURI *) NIL_CHK(uri)).port) {
          return port_ - ((JavaNetURI *) NIL_CHK(uri)).port;
        }
      }
      else {
        ret = [NIL_CHK(authority_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).authority];
        if (ret != 0) {
          return ret;
        }
      }
    }
    ret = [NIL_CHK(path_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).path];
    if (ret != 0) {
      return ret;
    }
    if (query_ != nil && ((JavaNetURI *) NIL_CHK(uri)).query == nil) {
      return 1;
    }
    else if (query_ == nil && ((JavaNetURI *) NIL_CHK(uri)).query != nil) {
      return -1;
    }
    else if (query_ != nil && ((JavaNetURI *) NIL_CHK(uri)).query != nil) {
      ret = [NIL_CHK(query_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).query];
      if (ret != 0) {
        return ret;
      }
    }
  }
  if (fragment_ != nil && ((JavaNetURI *) NIL_CHK(uri)).fragment == nil) {
    return 1;
  }
  else if (fragment_ == nil && ((JavaNetURI *) NIL_CHK(uri)).fragment != nil) {
    return -1;
  }
  else if (fragment_ != nil && ((JavaNetURI *) NIL_CHK(uri)).fragment != nil) {
    ret = [NIL_CHK(fragment_) compareToWithId:((JavaNetURI *) NIL_CHK(uri)).fragment];
    if (ret != 0) {
      return ret;
    }
  }
  return 0;
}

+ (JavaNetURI *)createWithNSString:(NSString *)uri {
  JavaNetURI *result = nil;
  @try {
    result = [[[JavaNetURI alloc] initWithNSString:uri] autorelease];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[((JavaNetURISyntaxException *) NIL_CHK(e)) getMessage]] autorelease];
  }
  return result;
}

- (JavaNetURI *)duplicate {
  JavaNetURI *clone = [[[JavaNetURI alloc] init] autorelease];
  ((JavaNetURI *) NIL_CHK(clone)).absolute = absolute_;
  ((JavaNetURI *) NIL_CHK(clone)).authority = authority_;
  ((JavaNetURI *) NIL_CHK(clone)).fragment = fragment_;
  ((JavaNetURI *) NIL_CHK(clone)).host = host_;
  ((JavaNetURI *) NIL_CHK(clone)).opaque = opaque_;
  ((JavaNetURI *) NIL_CHK(clone)).path = path_;
  ((JavaNetURI *) NIL_CHK(clone)).port = port_;
  ((JavaNetURI *) NIL_CHK(clone)).query = query_;
  ((JavaNetURI *) NIL_CHK(clone)).scheme = scheme_;
  ((JavaNetURI *) NIL_CHK(clone)).schemespecificpart = schemespecificpart_;
  ((JavaNetURI *) NIL_CHK(clone)).userinfo = userinfo_;
  ((JavaNetURI *) NIL_CHK(clone)).serverAuthority = serverAuthority_;
  return clone;
}

- (NSString *)convertHexToLowerCaseWithNSString:(NSString *)s {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] initWithNSString:@""] autorelease];
  if ([NIL_CHK(s) indexOf:'%'] == -1) {
    return s;
  }
  int index = 0, previndex = 0;
  while ((index = [NIL_CHK(s) indexOf:'%' fromIndex:previndex]) != -1) {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NIL_CHK(s) substring:previndex endIndex:index + 1]];
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[[NIL_CHK(s) substring:index + 1 endIndex:index + 3] lowercaseString]];
    index += 3;
    previndex = index;
  }
  return [((JavaLangStringBuilder *) NIL_CHK(result)) description];
}

- (BOOL)equalsHexCaseInsensitiveWithNSString:(NSString *)first
                                withNSString:(NSString *)second {
  if ([NIL_CHK(first) indexOf:'%'] != [NIL_CHK(second) indexOf:'%']) {
    return [NIL_CHK(first) isEqual:second];
  }
  int index = 0, previndex = 0;
  while ((index = [NIL_CHK(first) indexOf:'%' fromIndex:previndex]) != -1 && [NIL_CHK(second) indexOf:'%' fromIndex:previndex] == index) {
    BOOL match = [[NIL_CHK(first) substring:previndex endIndex:index] isEqual:[NIL_CHK(second) substring:previndex endIndex:index]];
    if (!match) {
      return NO;
    }
    match = [[NIL_CHK(first) substring:index + 1 endIndex:index + 3] equalsIgnoreCase:[NIL_CHK(second) substring:index + 1 endIndex:index + 3]];
    if (!match) {
      return NO;
    }
    index += 3;
    previndex = index;
  }
  return [[NIL_CHK(first) substring:previndex] isEqual:[NIL_CHK(second) substring:previndex]];
}

- (BOOL)isEqual:(id)o {
  if (!([o isKindOfClass:[JavaNetURI class]])) {
    return NO;
  }
  JavaNetURI *uri = (JavaNetURI *) o;
  if (((JavaNetURI *) NIL_CHK(uri)).fragment == nil && fragment_ != nil || ((JavaNetURI *) NIL_CHK(uri)).fragment != nil && fragment_ == nil) {
    return NO;
  }
  else if (((JavaNetURI *) NIL_CHK(uri)).fragment != nil && fragment_ != nil) {
    if (![self equalsHexCaseInsensitiveWithNSString:((JavaNetURI *) NIL_CHK(uri)).fragment withNSString:fragment_]) {
      return NO;
    }
  }
  if (((JavaNetURI *) NIL_CHK(uri)).scheme == nil && scheme_ != nil || ((JavaNetURI *) NIL_CHK(uri)).scheme != nil && scheme_ == nil) {
    return NO;
  }
  else if (((JavaNetURI *) NIL_CHK(uri)).scheme != nil && scheme_ != nil) {
    if (![NIL_CHK(uri.scheme) equalsIgnoreCase:scheme_]) {
      return NO;
    }
  }
  if (((JavaNetURI *) NIL_CHK(uri)).opaque && opaque_) {
    return [self equalsHexCaseInsensitiveWithNSString:((JavaNetURI *) NIL_CHK(uri)).schemespecificpart withNSString:schemespecificpart_];
  }
  else if (!((JavaNetURI *) NIL_CHK(uri)).opaque && !opaque_) {
    if (![self equalsHexCaseInsensitiveWithNSString:path_ withNSString:((JavaNetURI *) NIL_CHK(uri)).path]) {
      return NO;
    }
    if (((JavaNetURI *) NIL_CHK(uri)).query != nil && query_ == nil || ((JavaNetURI *) NIL_CHK(uri)).query == nil && query_ != nil) {
      return NO;
    }
    else if (((JavaNetURI *) NIL_CHK(uri)).query != nil && query_ != nil) {
      if (![self equalsHexCaseInsensitiveWithNSString:((JavaNetURI *) NIL_CHK(uri)).query withNSString:query_]) {
        return NO;
      }
    }
    if (((JavaNetURI *) NIL_CHK(uri)).authority != nil && authority_ == nil || ((JavaNetURI *) NIL_CHK(uri)).authority == nil && authority_ != nil) {
      return NO;
    }
    else if (((JavaNetURI *) NIL_CHK(uri)).authority != nil && authority_ != nil) {
      if (((JavaNetURI *) NIL_CHK(uri)).host != nil && host_ == nil || ((JavaNetURI *) NIL_CHK(uri)).host == nil && host_ != nil) {
        return NO;
      }
      else if (((JavaNetURI *) NIL_CHK(uri)).host == nil && host_ == nil) {
        return [self equalsHexCaseInsensitiveWithNSString:((JavaNetURI *) NIL_CHK(uri)).authority withNSString:authority_];
      }
      else {
        if (![NIL_CHK(host_) equalsIgnoreCase:((JavaNetURI *) NIL_CHK(uri)).host]) {
          return NO;
        }
        if (port_ != ((JavaNetURI *) NIL_CHK(uri)).port) {
          return NO;
        }
        if (((JavaNetURI *) NIL_CHK(uri)).userinfo != nil && userinfo_ == nil || ((JavaNetURI *) NIL_CHK(uri)).userinfo == nil && userinfo_ != nil) {
          return NO;
        }
        else if (((JavaNetURI *) NIL_CHK(uri)).userinfo != nil && userinfo_ != nil) {
          return [self equalsHexCaseInsensitiveWithNSString:userinfo_ withNSString:((JavaNetURI *) NIL_CHK(uri)).userinfo];
        }
        else {
          return YES;
        }
      }
    }
    else {
      return YES;
    }
  }
  else {
    return NO;
  }
}

- (NSString *)getAuthority {
  return [self decodeWithNSString:authority_];
}

- (NSString *)getFragment {
  return [self decodeWithNSString:fragment_];
}

- (NSString *)getHost {
  return host_;
}

- (NSString *)getPath {
  return [self decodeWithNSString:path_];
}

- (int)getPort {
  return port_;
}

- (NSString *)getQuery {
  return [self decodeWithNSString:query_];
}

- (NSString *)getRawAuthority {
  return authority_;
}

- (NSString *)getRawFragment {
  return fragment_;
}

- (NSString *)getRawPath {
  return path_;
}

- (NSString *)getRawQuery {
  return query_;
}

- (NSString *)getRawSchemeSpecificPart {
  return schemespecificpart_;
}

- (NSString *)getRawUserInfo {
  return userinfo_;
}

- (NSString *)getScheme {
  return scheme_;
}

- (NSString *)getSchemeSpecificPart {
  return [self decodeWithNSString:schemespecificpart_];
}

- (NSString *)getUserInfo {
  return [self decodeWithNSString:userinfo_];
}

- (NSUInteger)hash {
  if (hash__ == -1) {
    hash__ = [[self getHashString] hash];
  }
  return hash__;
}

- (BOOL)isAbsolute {
  return absolute_;
}

- (BOOL)isOpaque {
  return opaque_;
}

- (NSString *)normalizeWithNSString:(NSString *)path {
  int index = -1;
  int pathlen = [NIL_CHK(path) length];
  int size = 0;
  if (pathlen > 0 && [NIL_CHK(path) charAtWithInt:0] != '/') {
    size++;
  }
  while ((index = [NIL_CHK(path) indexOf:'/' fromIndex:index + 1]) != -1) {
    if (index + 1 < pathlen && [NIL_CHK(path) charAtWithInt:index + 1] != '/') {
      size++;
    }
  }
  IOSObjectArray *seglist = [[[IOSObjectArray alloc] initWithLength:size type:[IOSClass classWithClass:[NSString class]]] autorelease];
  IOSBooleanArray *include = [[[IOSBooleanArray alloc] initWithLength:size] autorelease];
  int current = 0;
  int index2 = 0;
  index = (pathlen > 0 && [NIL_CHK(path) charAtWithInt:0] == '/') ? 1 : 0;
  while ((index2 = [NIL_CHK(path) indexOf:'/' fromIndex:index + 1]) != -1) {
    [((IOSObjectArray *) NIL_CHK(seglist)) replaceObjectAtIndex:current++ withObject:[NIL_CHK(path) substring:index endIndex:index2]];
    index = index2 + 1;
  }
  if (current < size) {
    [((IOSObjectArray *) NIL_CHK(seglist)) replaceObjectAtIndex:current withObject:[NIL_CHK(path) substring:index]];
  }
  for (int i = 0; i < size; i++) {
    [((IOSBooleanArray *) NIL_CHK(include)) replaceBooleanAtIndex:i withBoolean:YES];
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(seglist)) objectAtIndex:i]) isEqual:@".."]) {
      int remove = i - 1;
      while (remove > -1 && ![((IOSBooleanArray *) NIL_CHK(include)) booleanAtIndex:remove]) {
        remove--;
      }
      if (remove > -1 && ![((NSString *) [((IOSObjectArray *) NIL_CHK(seglist)) objectAtIndex:remove]) isEqual:@".."]) {
        [((IOSBooleanArray *) NIL_CHK(include)) replaceBooleanAtIndex:remove withBoolean:NO];
        [((IOSBooleanArray *) NIL_CHK(include)) replaceBooleanAtIndex:i withBoolean:NO];
      }
    }
    else if ([((NSString *) [((IOSObjectArray *) NIL_CHK(seglist)) objectAtIndex:i]) isEqual:@"."]) {
      [((IOSBooleanArray *) NIL_CHK(include)) replaceBooleanAtIndex:i withBoolean:NO];
    }
  }
  JavaLangStringBuilder *newpath = [[[JavaLangStringBuilder alloc] init] autorelease];
  if ([NIL_CHK(path) hasPrefix:@"/"]) {
    [((JavaLangStringBuilder *) NIL_CHK(newpath)) appendWithUnichar:'/'];
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(seglist)) count]; i++) {
    if ([((IOSBooleanArray *) NIL_CHK(include)) booleanAtIndex:i]) {
      [((JavaLangStringBuilder *) NIL_CHK(newpath)) appendWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(seglist)) objectAtIndex:i])];
      [((JavaLangStringBuilder *) NIL_CHK(newpath)) appendWithUnichar:'/'];
    }
  }
  if (![NIL_CHK(path) hasSuffix:@"/"] && (int) [((IOSObjectArray *) NIL_CHK(seglist)) count] > 0 && [((IOSBooleanArray *) NIL_CHK(include)) booleanAtIndex:(int) [((IOSObjectArray *) NIL_CHK(seglist)) count] - 1]) {
    [((JavaLangStringBuilder *) NIL_CHK(newpath)) deleteCharAtWithInt:[((JavaLangStringBuilder *) NIL_CHK(newpath)) sequenceLength] - 1];
  }
  NSString *result = [((JavaLangStringBuilder *) NIL_CHK(newpath)) description];
  index = [NIL_CHK(result) indexOf:':'];
  index2 = [NIL_CHK(result) indexOf:'/'];
  if (index != -1 && (index < index2 || index2 == -1)) {
    [((JavaLangStringBuilder *) NIL_CHK(newpath)) insertWithInt:0 withNSString:@"./"];
    result = [((JavaLangStringBuilder *) NIL_CHK(newpath)) description];
  }
  return result;
}

- (JavaNetURI *)normalize {
  if (opaque_) {
    return self;
  }
  NSString *normalizedPath = [self normalizeWithNSString:path_];
  if ([NIL_CHK(path_) isEqual:normalizedPath]) {
    return self;
  }
  JavaNetURI *result = [self duplicate];
  ((JavaNetURI *) NIL_CHK(result)).path = normalizedPath;
  [((JavaNetURI *) NIL_CHK(result)) setSchemeSpecificPart];
  return result;
}

- (JavaNetURI *)parseServerAuthority {
  if (!serverAuthority_) {
    [((JavaNetURI_Helper *) [[[JavaNetURI_Helper alloc] initWithJavaNetURI:self] autorelease]) parseAuthorityWithBOOL:YES];
  }
  return self;
}

- (JavaNetURI *)relativizeWithJavaNetURI:(JavaNetURI *)relative {
  if (((JavaNetURI *) NIL_CHK(relative)).opaque || opaque_) {
    return relative;
  }
  if (scheme_ == nil ? ((JavaNetURI *) NIL_CHK(relative)).scheme != nil : ![NIL_CHK(scheme_) isEqual:((JavaNetURI *) NIL_CHK(relative)).scheme]) {
    return relative;
  }
  if (authority_ == nil ? ((JavaNetURI *) NIL_CHK(relative)).authority != nil : ![NIL_CHK(authority_) isEqual:((JavaNetURI *) NIL_CHK(relative)).authority]) {
    return relative;
  }
  NSString *thisPath = [self normalizeWithNSString:path_];
  NSString *relativePath = [self normalizeWithNSString:((JavaNetURI *) NIL_CHK(relative)).path];
  if (![NIL_CHK(thisPath) isEqual:relativePath]) {
    if (![NIL_CHK(thisPath) hasSuffix:@"/"]) {
      thisPath = [NSString stringWithFormat:@"%@/", thisPath];
    }
    if (![NIL_CHK(relativePath) hasPrefix:thisPath]) {
      return relative;
    }
  }
  JavaNetURI *result = [[[JavaNetURI alloc] init] autorelease];
  ((JavaNetURI *) NIL_CHK(result)).fragment = ((JavaNetURI *) NIL_CHK(relative)).fragment;
  ((JavaNetURI *) NIL_CHK(result)).query = ((JavaNetURI *) NIL_CHK(relative)).query;
  ((JavaNetURI *) NIL_CHK(result)).path = [NIL_CHK(relativePath) substring:[NIL_CHK(thisPath) length]];
  [((JavaNetURI *) NIL_CHK(result)) setSchemeSpecificPart];
  return result;
}

- (JavaNetURI *)resolveWithJavaNetURI:(JavaNetURI *)relative {
  if (((JavaNetURI *) NIL_CHK(relative)).absolute || opaque_) {
    return relative;
  }
  JavaNetURI *result;
  if ([NIL_CHK(relative.path) isEqual:@""] && ((JavaNetURI *) NIL_CHK(relative)).scheme == nil && ((JavaNetURI *) NIL_CHK(relative)).authority == nil && ((JavaNetURI *) NIL_CHK(relative)).query == nil && ((JavaNetURI *) NIL_CHK(relative)).fragment != nil) {
    result = [self duplicate];
    ((JavaNetURI *) NIL_CHK(result)).fragment = ((JavaNetURI *) NIL_CHK(relative)).fragment;
    return result;
  }
  if (((JavaNetURI *) NIL_CHK(relative)).authority != nil) {
    result = [((JavaNetURI *) NIL_CHK(relative)) duplicate];
    ((JavaNetURI *) NIL_CHK(result)).scheme = scheme_;
    ((JavaNetURI *) NIL_CHK(result)).absolute = absolute_;
  }
  else {
    result = [self duplicate];
    ((JavaNetURI *) NIL_CHK(result)).fragment = ((JavaNetURI *) NIL_CHK(relative)).fragment;
    ((JavaNetURI *) NIL_CHK(result)).query = ((JavaNetURI *) NIL_CHK(relative)).query;
    if ([NIL_CHK(relative.path) hasPrefix:@"/"]) {
      ((JavaNetURI *) NIL_CHK(result)).path = ((JavaNetURI *) NIL_CHK(relative)).path;
    }
    else {
      int endindex = [NIL_CHK(path_) lastIndexOf:'/'] + 1;
      ((JavaNetURI *) NIL_CHK(result)).path = [self normalizeWithNSString:[NSString stringWithFormat:@"%@%@", [NIL_CHK(path_) substring:0 endIndex:endindex], ((JavaNetURI *) NIL_CHK(relative)).path]];
    }
    [((JavaNetURI *) NIL_CHK(result)) setSchemeSpecificPart];
  }
  return result;
}

- (void)setSchemeSpecificPart {
  JavaLangStringBuilder *ssp = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (authority_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(ssp)) appendWithNSString:[NSString stringWithFormat:@"//%@", authority_]];
  }
  if (path_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(ssp)) appendWithNSString:path_];
  }
  if (query_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(ssp)) appendWithNSString:[NSString stringWithFormat:@"?%@", query_]];
  }
  JreOperatorRetainedAssign(&schemespecificpart_, [((JavaLangStringBuilder *) NIL_CHK(ssp)) description]);
  JreOperatorRetainedAssign(&string_, nil);
}

- (JavaNetURI *)resolveWithNSString:(NSString *)relative {
  return [self resolveWithJavaNetURI:[JavaNetURI createWithNSString:relative]];
}

- (NSString *)encodeOthersWithNSString:(NSString *)s {
  @try {
    return [JavaNetURIEncoderDecoder encodeOthersWithNSString:s];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) NIL_CHK(e)) description]] autorelease];
  }
}

- (NSString *)decodeWithNSString:(NSString *)s {
  if (s == nil) {
    return s;
  }
  @try {
    return [JavaNetURIEncoderDecoder decodeWithNSString:s];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoUnsupportedEncodingException *) NIL_CHK(e)) description]] autorelease];
  }
}

- (NSString *)toASCIIString {
  return [self encodeOthersWithNSString:[self description]];
}

- (NSString *)description {
  if (string_ == nil) {
    JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
    if (scheme_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:scheme_];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:':'];
    }
    if (opaque_) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:schemespecificpart_];
    }
    else {
      if (authority_ != nil) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:@"//"];
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:authority_];
      }
      if (path_ != nil) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:path_];
      }
      if (query_ != nil) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'?'];
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:query_];
      }
    }
    if (fragment_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'#'];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:fragment_];
    }
    JreOperatorRetainedAssign(&string_, [((JavaLangStringBuilder *) NIL_CHK(result)) description]);
  }
  return string_;
}

- (NSString *)getHashString {
  JavaLangStringBuilder *result = [[[JavaLangStringBuilder alloc] init] autorelease];
  if (scheme_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[scheme_ lowercaseString]];
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:':'];
  }
  if (opaque_) {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:schemespecificpart_];
  }
  else {
    if (authority_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:@"//"];
      if (host_ == nil) {
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:authority_];
      }
      else {
        if (userinfo_ != nil) {
          [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NSString stringWithFormat:@"%@@", userinfo_]];
        }
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[host_ lowercaseString]];
        if (port_ != -1) {
          [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:[NSString stringWithFormat:@":%d", port_]];
        }
      }
    }
    if (path_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:path_];
    }
    if (query_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'?'];
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:query_];
    }
  }
  if (fragment_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:'#'];
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:fragment_];
  }
  return [self convertHexToLowerCaseWithNSString:[((JavaLangStringBuilder *) NIL_CHK(result)) description]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&fragment_, nil);
  JreOperatorRetainedAssign(&query_, nil);
  JreOperatorRetainedAssign(&path_, nil);
  JreOperatorRetainedAssign(&host_, nil);
  JreOperatorRetainedAssign(&userinfo_, nil);
  JreOperatorRetainedAssign(&authority_, nil);
  JreOperatorRetainedAssign(&schemespecificpart_, nil);
  JreOperatorRetainedAssign(&scheme_, nil);
  JreOperatorRetainedAssign(&string_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaNetURI *typedCopy = (JavaNetURI *) copy;
  typedCopy.string = string_;
  typedCopy.scheme = scheme_;
  typedCopy.schemespecificpart = schemespecificpart_;
  typedCopy.authority = authority_;
  typedCopy.userinfo = userinfo_;
  typedCopy.host = host_;
  typedCopy.port = port_;
  typedCopy.path = path_;
  typedCopy.query = query_;
  typedCopy.fragment = fragment_;
  typedCopy.opaque = opaque_;
  typedCopy.absolute = absolute_;
  typedCopy.serverAuthority = serverAuthority_;
  typedCopy.hash_ = hash__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:string_ name:@"string"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:scheme_ name:@"scheme"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:schemespecificpart_ name:@"schemespecificpart"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:authority_ name:@"authority"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:userinfo_ name:@"userinfo"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:host_ name:@"host"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:path_ name:@"path"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:query_ name:@"query"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:fragment_ name:@"fragment"]];
  return result;
}

@end
@implementation JavaNetURI_Helper

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaNetURI *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaNetURI *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (void)parseURIWithNSString:(NSString *)uri
                    withBOOL:(BOOL)forceServer {
  NSString *temp = uri;
  this$0_.string = uri;
  int index, index1, index2, index3;
  index = [NIL_CHK(temp) indexOf:'#'];
  if (index != -1) {
    this$0_.fragment = [NIL_CHK(temp) substring:index + 1];
    [self validateFragmentWithNSString:uri withNSString:this$0_.fragment withInt:index + 1];
    temp = [NIL_CHK(temp) substring:0 endIndex:index];
  }
  index = index1 = [NIL_CHK(temp) indexOf:':'];
  index2 = [NIL_CHK(temp) indexOf:'/'];
  index3 = [NIL_CHK(temp) indexOf:'?'];
  if (index != -1 && (index2 >= index || index2 == -1) && (index3 >= index || index3 == -1)) {
    this$0_.absolute = YES;
    this$0_.scheme = [NIL_CHK(temp) substring:0 endIndex:index];
    if ([NIL_CHK(this$0_.scheme) length] == 0) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Scheme expected" withInt:index] autorelease];
    }
    [self validateSchemeWithNSString:uri withNSString:this$0_.scheme withInt:0];
    this$0_.schemespecificpart = [NIL_CHK(temp) substring:index + 1];
    if ([NIL_CHK(this$0_.schemespecificpart) length] == 0) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Scheme-specific part expected" withInt:index + 1] autorelease];
    }
  }
  else {
    this$0_.absolute = NO;
    this$0_.schemespecificpart = temp;
  }
  if (this$0_.scheme == nil || [NIL_CHK(this$0_.schemespecificpart) length] > 0 && [NIL_CHK(this$0_.schemespecificpart) charAtWithInt:0] == '/') {
    this$0_.opaque = NO;
    temp = this$0_.schemespecificpart;
    index = [NIL_CHK(temp) indexOf:'?'];
    if (index != -1) {
      this$0_.query = [NIL_CHK(temp) substring:index + 1];
      temp = [NIL_CHK(temp) substring:0 endIndex:index];
      [self validateQueryWithNSString:uri withNSString:this$0_.query withInt:index2 + 1 + index];
    }
    if ([NIL_CHK(temp) hasPrefix:@"//"]) {
      index = [NIL_CHK(temp) indexOf:'/' fromIndex:2];
      if (index != -1) {
        this$0_.authority = [NIL_CHK(temp) substring:2 endIndex:index];
        this$0_.path = [NIL_CHK(temp) substring:index];
      }
      else {
        this$0_.authority = [NIL_CHK(temp) substring:2];
        if ([NIL_CHK(this$0_.authority) length] == 0 && this$0_.query == nil && this$0_.fragment == nil) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Authority expected" withInt:[NIL_CHK(uri) length]] autorelease];
        }
        this$0_.path = @"";
      }
      if ([NIL_CHK(this$0_.authority) length] == 0) {
        this$0_.authority = nil;
      }
      else {
        [self validateAuthorityWithNSString:uri withNSString:this$0_.authority withInt:index1 + 3];
      }
    }
    else {
      this$0_.path = temp;
    }
    int pathIndex = 0;
    if (index2 > -1) {
      pathIndex += index2;
    }
    if (index > -1) {
      pathIndex += index;
    }
    [self validatePathWithNSString:uri withNSString:this$0_.path withInt:pathIndex];
  }
  else {
    this$0_.opaque = YES;
    [self validateSspWithNSString:uri withNSString:this$0_.schemespecificpart withInt:index2 + 2 + index];
  }
  [self parseAuthorityWithBOOL:forceServer];
}

- (void)validateSchemeWithNSString:(NSString *)uri
                      withNSString:(NSString *)scheme
                           withInt:(int)index {
  unichar ch = [NIL_CHK(scheme) charAtWithInt:0];
  if (!((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'))) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in scheme" withInt:0] autorelease];
  }
  @try {
    [JavaNetURIEncoderDecoder validateSimpleWithNSString:scheme withNSString:@"+-."];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in scheme" withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)validateSspWithNSString:(NSString *)uri
                   withNSString:(NSString *)ssp
                        withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:ssp withNSString:[JavaNetURI allLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in schemeSpecificPart", [((JavaNetURISyntaxException *) NIL_CHK(e)) getReason]] withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)validateAuthorityWithNSString:(NSString *)uri
                         withNSString:(NSString *)authority
                              withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:authority withNSString:@"@[]_-!.~'()*,;:$&+="];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in authority", [((JavaNetURISyntaxException *) NIL_CHK(e)) getReason]] withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)validatePathWithNSString:(NSString *)uri
                    withNSString:(NSString *)path
                         withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:path withNSString:@"/@_-!.~'()*,;:$&+="];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in path", [((JavaNetURISyntaxException *) NIL_CHK(e)) getReason]] withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)validateQueryWithNSString:(NSString *)uri
                     withNSString:(NSString *)query
                          withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:query withNSString:[JavaNetURI queryLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in query", [((JavaNetURISyntaxException *) NIL_CHK(e)) getReason]] withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)validateFragmentWithNSString:(NSString *)uri
                        withNSString:(NSString *)fragment
                             withInt:(int)index {
  @try {
    [JavaNetURIEncoderDecoder validateWithNSString:fragment withNSString:[JavaNetURI allLegal]];
  }
  @catch (JavaNetURISyntaxException *e) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:[NSString stringWithFormat:@"%@ in fragment", [((JavaNetURISyntaxException *) NIL_CHK(e)) getReason]] withInt:index + [((JavaNetURISyntaxException *) NIL_CHK(e)) getIndex]] autorelease];
  }
}

- (void)parseAuthorityWithBOOL:(BOOL)forceServer {
  if (this$0_.authority == nil) {
    return;
  }
  NSString *temp, *tempUserinfo = nil, *tempHost = nil;
  int index, hostindex = 0;
  int tempPort = -1;
  temp = this$0_.authority;
  index = [NIL_CHK(temp) indexOf:'@'];
  if (index != -1) {
    tempUserinfo = [NIL_CHK(temp) substring:0 endIndex:index];
    [self validateUserinfoWithNSString:this$0_.authority withNSString:tempUserinfo withInt:0];
    temp = [NIL_CHK(temp) substring:index + 1];
    hostindex = index + 1;
  }
  index = [NIL_CHK(temp) lastIndexOf:':'];
  int endindex = [NIL_CHK(temp) indexOf:']'];
  if (index != -1 && endindex < index) {
    tempHost = [NIL_CHK(temp) substring:0 endIndex:index];
    if (index < ([NIL_CHK(temp) length] - 1)) {
      @try {
        tempPort = [JavaLangInteger parseIntWithNSString:[NIL_CHK(temp) substring:index + 1]];
        if (tempPort < 0) {
          if (forceServer) {
            @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_.authority withNSString:@"Invalid port number" withInt:hostindex + index + 1] autorelease];
          }
          return;
        }
      }
      @catch (JavaLangNumberFormatException *e) {
        if (forceServer) {
          @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_.authority withNSString:@"Invalid port number" withInt:hostindex + index + 1] autorelease];
        }
        return;
      }
    }
  }
  else {
    tempHost = temp;
  }
  if ([NIL_CHK(tempHost) isEqual:@""]) {
    if (forceServer) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:this$0_.authority withNSString:@"Expected host" withInt:hostindex] autorelease];
    }
    return;
  }
  if (![self isValidHostWithBOOL:forceServer withNSString:tempHost]) {
    return;
  }
  this$0_.userinfo = tempUserinfo;
  this$0_.host = tempHost;
  this$0_.port = tempPort;
  this$0_.serverAuthority = YES;
}

- (void)validateUserinfoWithNSString:(NSString *)uri
                        withNSString:(NSString *)userinfo
                             withInt:(int)index {
  for (int i = 0; i < [NIL_CHK(userinfo) length]; i++) {
    unichar ch = [NIL_CHK(userinfo) charAtWithInt:i];
    if (ch == ']' || ch == '[') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:uri withNSString:@"Illegal character in userinfo" withInt:index + i] autorelease];
    }
  }
}

- (BOOL)isValidHostWithBOOL:(BOOL)forceServer
               withNSString:(NSString *)host {
  if ([NIL_CHK(host) charAtWithInt:0] == '[') {
    if ([NIL_CHK(host) charAtWithInt:[NIL_CHK(host) length] - 1] != ']') {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Expected a closing square bracket for ipv6 address" withInt:0] autorelease];
    }
    if (![self isValidIP6AddressWithNSString:host]) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Malformed ipv6 address" withInt:0] autorelease];
    }
    return YES;
  }
  if ([NIL_CHK(host) indexOf:'['] != -1 || [NIL_CHK(host) indexOf:']'] != -1) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Illegal character in host name" withInt:0] autorelease];
  }
  int index = [NIL_CHK(host) lastIndexOf:'.'];
  if (index < 0 || index == [NIL_CHK(host) length] - 1 || ![JavaLangCharacter isDigitWithUnichar:[NIL_CHK(host) charAtWithInt:index + 1]]) {
    if ([self isValidDomainNameWithNSString:host]) {
      return YES;
    }
    if (forceServer) {
      @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Illegal character in host name" withInt:0] autorelease];
    }
    return NO;
  }
  if ([self isValidIPv4AddressWithNSString:host]) {
    return YES;
  }
  if (forceServer) {
    @throw [[[JavaNetURISyntaxException alloc] initWithNSString:host withNSString:@"Malformed ipv4 address" withInt:0] autorelease];
  }
  return NO;
}

- (BOOL)isValidDomainNameWithNSString:(NSString *)host {
  @try {
    [JavaNetURIEncoderDecoder validateSimpleWithNSString:host withNSString:@"-."];
  }
  @catch (JavaNetURISyntaxException *e) {
    return NO;
  }
  NSString *label = nil;
  JavaUtilStringTokenizer *st = [[[JavaUtilStringTokenizer alloc] initWithNSString:host withNSString:@"."] autorelease];
  while ([((JavaUtilStringTokenizer *) NIL_CHK(st)) hasMoreTokens]) {
    label = [((JavaUtilStringTokenizer *) NIL_CHK(st)) nextToken];
    if ([NIL_CHK(label) hasPrefix:@"-"] || [NIL_CHK(label) hasSuffix:@"-"]) {
      return NO;
    }
  }
  if (![NIL_CHK(label) isEqual:host]) {
    unichar ch = [NIL_CHK(label) charAtWithInt:0];
    if (ch >= '0' && ch <= '9') {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isValidIPv4AddressWithNSString:(NSString *)host {
  int index;
  int index2;
  @try {
    int num;
    index = [NIL_CHK(host) indexOf:'.'];
    num = [JavaLangInteger parseIntWithNSString:[NIL_CHK(host) substring:0 endIndex:index]];
    if (num < 0 || num > 255) {
      return NO;
    }
    index2 = [NIL_CHK(host) indexOf:'.' fromIndex:index + 1];
    num = [JavaLangInteger parseIntWithNSString:[NIL_CHK(host) substring:index + 1 endIndex:index2]];
    if (num < 0 || num > 255) {
      return NO;
    }
    index = [NIL_CHK(host) indexOf:'.' fromIndex:index2 + 1];
    num = [JavaLangInteger parseIntWithNSString:[NIL_CHK(host) substring:index2 + 1 endIndex:index]];
    if (num < 0 || num > 255) {
      return NO;
    }
    num = [JavaLangInteger parseIntWithNSString:[NIL_CHK(host) substring:index + 1]];
    if (num < 0 || num > 255) {
      return NO;
    }
  }
  @catch (JavaLangException *e) {
    return NO;
  }
  return YES;
}

- (BOOL)isValidIP6AddressWithNSString:(NSString *)ipAddress {
  int length = [NIL_CHK(ipAddress) length];
  BOOL doubleColon = NO;
  int numberOfColons = 0;
  int numberOfPeriods = 0;
  NSString *word = @"";
  unichar c = 0;
  unichar prevChar = 0;
  int offset = 0;
  if (length < 2) {
    return NO;
  }
  for (int i = 0; i < length; i++) {
    prevChar = c;
    c = [NIL_CHK(ipAddress) charAtWithInt:i];
    switch (c) {
      case '[':
      if (i != 0) {
        return NO;
      }
      if ([NIL_CHK(ipAddress) charAtWithInt:length - 1] != ']') {
        return NO;
      }
      if (([NIL_CHK(ipAddress) charAtWithInt:1] == ':') && ([NIL_CHK(ipAddress) charAtWithInt:2] != ':')) {
        return NO;
      }
      offset = 1;
      if (length < 4) {
        return NO;
      }
      break;
      case ']':
      if (i != length - 1) {
        return NO;
      }
      if ([NIL_CHK(ipAddress) charAtWithInt:0] != '[') {
        return NO;
      }
      break;
      case '.':
      numberOfPeriods++;
      if (numberOfPeriods > 3) {
        return NO;
      }
      if (![self isValidIP4WordWithNSString:word]) {
        return NO;
      }
      if (numberOfColons != 6 && !doubleColon) {
        return NO;
      }
      if (numberOfColons == 7 && [NIL_CHK(ipAddress) charAtWithInt:0 + offset] != ':' && [NIL_CHK(ipAddress) charAtWithInt:1 + offset] != ':') {
        return NO;
      }
      word = @"";
      break;
      case ':':
      numberOfColons++;
      if (numberOfColons > 7) {
        return NO;
      }
      if (numberOfPeriods > 0) {
        return NO;
      }
      if (prevChar == ':') {
        if (doubleColon) {
          return NO;
        }
        doubleColon = YES;
      }
      word = @"";
      break;
      default:
      if ([NIL_CHK(word) length] > 3) {
        return NO;
      }
      if (![self isValidHexCharWithUnichar:c]) {
        return NO;
      }
      word = [NSString stringWithFormat:@"%@%@", word, [JavaLangCharacter valueOfWithUnichar:c]];
    }
  }
  if (numberOfPeriods > 0) {
    if (numberOfPeriods != 3 || ![self isValidIP4WordWithNSString:word]) {
      return NO;
    }
  }
  else {
    if (numberOfColons != 7 && !doubleColon) {
      return NO;
    }
    if ([@"" isEqual:word] && [NIL_CHK(ipAddress) charAtWithInt:length - 1 - offset] != ':' && [NIL_CHK(ipAddress) charAtWithInt:length - 2 - offset] != ':') {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isValidIP4WordWithNSString:(NSString *)word {
  unichar c;
  if ([NIL_CHK(word) length] < 1 || [NIL_CHK(word) length] > 3) {
    return NO;
  }
  for (int i = 0; i < [NIL_CHK(word) length]; i++) {
    c = [NIL_CHK(word) charAtWithInt:i];
    if (!(c >= '0' && c <= '9')) {
      return NO;
    }
  }
  if ([JavaLangInteger parseIntWithNSString:word] > 255) {
    return NO;
  }
  return YES;
}

- (BOOL)isValidHexCharWithUnichar:(unichar)c {
  return (c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f');
}

- (id)initWithJavaNetURI:(JavaNetURI *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaNetURI_Helper *typedCopy = (JavaNetURI_Helper *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
