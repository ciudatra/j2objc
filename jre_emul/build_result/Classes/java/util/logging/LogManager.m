//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/logging/LogManager.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSClass.h"
#import "java/lang/Math.h"
#import "java/util/HashMap.h"
#import "java/util/logging/Level.h"
#import "java/util/logging/LogManager.h"
#import "java/util/logging/Logger.h"
#import "java/util/logging/NSLogHandler.h"

@implementation JavaUtilLoggingLogManager

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLogManager_singleton_ name:@"JavaUtilLoggingLogManager_singleton_"]];
  return result;
}

static JavaUtilLoggingLogManager * JavaUtilLoggingLogManager_singleton_;

- (JavaUtilHashMap *)loggerList {
  return loggerList_;
}
- (void)setLoggerList:(JavaUtilHashMap *)loggerList {
  JreOperatorRetainedAssign(&loggerList_, loggerList);
}
@synthesize loggerList = loggerList_;
- (JavaUtilLoggingLogger *)rootLogger {
  return rootLogger_;
}
- (void)setRootLogger:(JavaUtilLoggingLogger *)rootLogger {
  JreOperatorRetainedAssign(&rootLogger_, rootLogger);
}
@synthesize rootLogger = rootLogger_;

+ (JavaUtilLoggingLogManager *)singleton {
  return JavaUtilLoggingLogManager_singleton_;
}

+ (void)setSingleton:(JavaUtilLoggingLogManager *)singleton {
  JreOperatorRetainedAssign(&JavaUtilLoggingLogManager_singleton_, singleton);
}

+ (JavaUtilLoggingLogManager *)getLogManager {
  if (JavaUtilLoggingLogManager_singleton_ == nil) {
    JreOperatorRetainedAssign(&JavaUtilLoggingLogManager_singleton_, [[[JavaUtilLoggingLogManager alloc] init] autorelease]);
  }
  return JavaUtilLoggingLogManager_singleton_;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&loggerList_, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreOperatorRetainedAssign(&rootLogger_, [[[JavaUtilLoggingLogManager_RootLogger alloc] initWithJavaUtilLoggingLogManager:self] autorelease]);
    [((JavaUtilHashMap *) NIL_CHK(loggerList_)) putWithId:@"" withId:rootLogger_];
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addLoggerWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger {
  if ([self getLoggerWithNSString:[((JavaUtilLoggingLogger *) NIL_CHK(logger)) getName]] != nil) {
    return NO;
  }
  [self addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:logger];
  return YES;
}

- (JavaUtilLoggingLogger *)getLoggerWithNSString:(NSString *)name {
  return ((JavaUtilLoggingLogger *) [((JavaUtilHashMap *) NIL_CHK(loggerList_)) getWithId:name]);
}

- (void)addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)logger {
  NSString *name = [((JavaUtilLoggingLogger *) NIL_CHK(logger)) getName];
  NSString *parentName = [NIL_CHK(name) substring:0 endIndex:[JavaLangMath maxWithInt:0 withInt:[NIL_CHK(name) lastIndexOf:'.']]];
  JavaUtilLoggingLogger *parent = [self getOrAddLoggerWithNSString:parentName];
  [((JavaUtilHashMap *) NIL_CHK(loggerList_)) putWithId:[((JavaUtilLoggingLogger *) NIL_CHK(logger)) getName] withId:logger];
  [((JavaUtilLoggingLogger *) NIL_CHK(logger)) setParentWithJavaUtilLoggingLogger:parent];
}

- (JavaUtilLoggingLogger *)getOrAddLoggerWithNSString:(NSString *)name {
  JavaUtilLoggingLogger *logger = [self getLoggerWithNSString:name];
  if (logger == nil) {
    JavaUtilLoggingLogger *newLogger = [[[JavaUtilLoggingLogger alloc] initWithNSString:name withNSString:nil] autorelease];
    [self addLoggerWithoutDuplicationCheckingWithJavaUtilLoggingLogger:newLogger];
    return newLogger;
  }
  return logger;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&rootLogger_, nil);
  JreOperatorRetainedAssign(&loggerList_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLoggingLogManager *typedCopy = (JavaUtilLoggingLogManager *) copy;
  typedCopy.loggerList = loggerList_;
  typedCopy.rootLogger = rootLogger_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:loggerList_ name:@"loggerList"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:rootLogger_ name:@"rootLogger"]];
  return result;
}

@end
@implementation JavaUtilLoggingLogManager_RootLogger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilLoggingLogManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilLoggingLogManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (id)initWithJavaUtilLoggingLogManager:(JavaUtilLoggingLogManager *)outer$0 {
  if ((self = [super initWithNSString:@"" withNSString:nil])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    [self addHandlerWithJavaUtilLoggingHandler:[[[JavaUtilLoggingNSLogHandler alloc] init] autorelease]];
    [self setLevelWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING]];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLoggingLogManager_RootLogger *typedCopy = (JavaUtilLoggingLogManager_RootLogger *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
