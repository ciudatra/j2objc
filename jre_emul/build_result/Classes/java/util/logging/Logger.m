//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Classes/java/util/logging/Logger.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/Throwable.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/logging/Handler.h"
#import "java/util/logging/Level.h"
#import "java/util/logging/LogManager.h"
#import "java/util/logging/LogRecord.h"
#import "java/util/logging/Logger.h"

@implementation JavaUtilLoggingLogger

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_ name:@"JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_"]];
  return result;
}

static NSString * JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_ = @"global";

- (id<JavaUtilList>)handlers {
  return handlers_;
}
- (void)setHandlers:(id<JavaUtilList>)handlers {
  JreOperatorRetainedAssign(&handlers_, handlers);
}
@synthesize handlers = handlers_;
- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, name);
}
@synthesize name = name_;
- (JavaUtilLoggingLevel *)level {
  return level_;
}
- (void)setLevel:(JavaUtilLoggingLevel *)level {
  JreOperatorRetainedAssign(&level_, level);
}
@synthesize level = level_;
@synthesize levelValue = levelValue_;
- (JavaUtilLoggingLogger *)parent {
  return parent_;
}
- (void)setParent:(JavaUtilLoggingLogger *)parent {
  JreOperatorRetainedAssign(&parent_, parent);
}
@synthesize parent = parent_;
@synthesize useParentHandlers = useParentHandlers_;

+ (NSString *)GLOBAL_LOGGER_NAME {
  return JavaUtilLoggingLogger_GLOBAL_LOGGER_NAME_;
}

+ (JavaUtilLoggingLogger *)getLoggerWithNSString:(NSString *)name {
  @synchronized([self class]) {
    {
      JavaUtilLoggingLogManager *manager = [JavaUtilLoggingLogManager getLogManager];
      JavaUtilLoggingLogger *logger = [((JavaUtilLoggingLogManager *) NIL_CHK(manager)) getLoggerWithNSString:name];
      if (logger == nil) {
        JavaUtilLoggingLogger *newLogger = [[[JavaUtilLoggingLogger alloc] initWithNSString:name withNSString:@""] autorelease];
        [((JavaUtilLoggingLogManager *) NIL_CHK(manager)) addLoggerWithJavaUtilLoggingLogger:newLogger];
        return newLogger;
      }
      return logger;
    }
  }
}

- (id)initWithNSString:(NSString *)name
          withNSString:(NSString *)resourceName {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&level_, nil);
    self.useParentHandlers = YES;
    JreOperatorRetainedAssign(&handlers_, [[[JavaUtilArrayList alloc] init] autorelease]);
    self.name = name;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)logWithJavaUtilLoggingLogRecord:(JavaUtilLoggingLogRecord *)record {
  if ([self isLoggableWithJavaUtilLoggingLevel:[((JavaUtilLoggingLogRecord *) NIL_CHK(record)) getLevel]]) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(handlers_)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        JavaUtilLoggingHandler *h = ((JavaUtilLoggingHandler *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((JavaUtilLoggingHandler *) NIL_CHK(h)) publishWithJavaUtilLoggingLogRecord:record];
      }
    }
    if (useParentHandlers_ && parent_ != nil) {
      [((JavaUtilLoggingLogger *) NIL_CHK(parent_)) logWithJavaUtilLoggingLogRecord:record];
    }
  }
}

- (void)logWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
                       withNSString:(NSString *)msg {
  [self logWithJavaUtilLoggingLevel:level withNSString:msg withJavaLangThrowable:nil];
}

- (void)logWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)level
                       withNSString:(NSString *)msg
              withJavaLangThrowable:(JavaLangThrowable *)thrown {
  if ([self isLoggableWithJavaUtilLoggingLevel:level]) {
    JavaUtilLoggingLogRecord *lr = [[[JavaUtilLoggingLogRecord alloc] initWithJavaUtilLoggingLevel:level withNSString:msg] autorelease];
    [((JavaUtilLoggingLogRecord *) NIL_CHK(lr)) setThrownWithJavaLangThrowable:thrown];
    [((JavaUtilLoggingLogRecord *) NIL_CHK(lr)) setLoggerNameWithNSString:[self getName]];
    [self logWithJavaUtilLoggingLogRecord:lr];
  }
}

- (void)severeWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel SEVERE])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel SEVERE] withNSString:msg];
}

- (void)warningWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel WARNING])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel WARNING] withNSString:msg];
}

- (void)infoWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel INFO])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel INFO] withNSString:msg];
}

- (void)configWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel CONFIG])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel CONFIG] withNSString:msg];
}

- (void)fineWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel FINE])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINE] withNSString:msg];
}

- (void)finerWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel FINER])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINER] withNSString:msg];
}

- (void)finestWithNSString:(NSString *)msg {
  if ([((JavaUtilLoggingLevel *) NIL_CHK([JavaUtilLoggingLevel FINEST])) intValue] < levelValue_) {
    return;
  }
  [self logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel FINEST] withNSString:msg];
}

- (void)addHandlerWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)handler {
  [((id<JavaUtilList>) NIL_CHK(handlers_)) addWithId:handler];
}

- (IOSObjectArray *)getHandlers {
  if ([((id<JavaUtilList>) NIL_CHK(handlers_)) size] > 0) {
    return [((id<JavaUtilList>) NIL_CHK(handlers_)) toArrayWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(handlers_)) size] type:[IOSClass classWithClass:[JavaUtilLoggingHandler class]]] autorelease]];
  }
  return nil;
}

- (void)removeHandlerWithJavaUtilLoggingHandler:(JavaUtilLoggingHandler *)handler {
  [((id<JavaUtilList>) NIL_CHK(handlers_)) removeWithId:handler];
}

- (JavaUtilLoggingLevel *)getLevel {
  return level_ != nil ? level_ : [[self getParent] getLevel];
}

- (void)setLevelWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)newLevel {
  JreOperatorRetainedAssign(&level_, newLevel);
  levelValue_ = [((JavaUtilLoggingLevel *) NIL_CHK(newLevel)) intValue];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(handlers_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      JavaUtilLoggingHandler *handler = ((JavaUtilLoggingHandler *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((JavaUtilLoggingHandler *) NIL_CHK(handler)) setLevelWithJavaUtilLoggingLevel:newLevel];
    }
  }
}

- (NSString *)getName {
  return name_;
}

- (void)setNameWithNSString:(NSString *)newName {
  JreOperatorRetainedAssign(&name_, newName);
}

- (JavaUtilLoggingLogger *)getParent {
  return parent_;
}

- (void)setParentWithJavaUtilLoggingLogger:(JavaUtilLoggingLogger *)newParent {
  if (newParent != nil) {
    JreOperatorRetainedAssign(&parent_, newParent);
  }
}

- (BOOL)getUseParentHandlers {
  return useParentHandlers_;
}

- (void)setUseParentHandlersWithBOOL:(BOOL)newUseParentHandlers {
  useParentHandlers_ = newUseParentHandlers;
}

- (BOOL)isLoggableWithJavaUtilLoggingLevel:(JavaUtilLoggingLevel *)messageLevel {
  return [[self getLevel] intValue] <= [((JavaUtilLoggingLevel *) NIL_CHK(messageLevel)) intValue];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&parent_, nil);
  JreOperatorRetainedAssign(&level_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&handlers_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLoggingLogger *typedCopy = (JavaUtilLoggingLogger *) copy;
  typedCopy.handlers = handlers_;
  typedCopy.name = name_;
  typedCopy.level = level_;
  typedCopy.levelValue = levelValue_;
  typedCopy.parent = parent_;
  typedCopy.useParentHandlers = useParentHandlers_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:handlers_ name:@"handlers"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:level_ name:@"level"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parent_ name:@"parent"]];
  return result;
}

@end
