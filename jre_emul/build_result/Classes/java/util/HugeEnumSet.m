//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/HugeEnumSet.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSClass.h"
#import "IOSLongArray.h"
#import "IOSObjectArray.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Enum.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/Long.h"
#import "java/lang/NullPointerException.h"
#import "java/util/Arrays.h"
#import "java/util/Collection.h"
#import "java/util/EnumSet.h"
#import "java/util/HugeEnumSet.h"
#import "java/util/Iterator.h"
#import "java/util/NoSuchElementException.h"

@implementation JavaUtilHugeEnumSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSObjectArray *)enums {
  return enums_;
}
- (void)setEnums:(IOSObjectArray *)enums {
  JreOperatorRetainedAssign(&enums_, enums);
}
@synthesize enums = enums_;
- (IOSLongArray *)bits {
  return bits_;
}
- (void)setBits:(IOSLongArray *)bits {
  JreOperatorRetainedAssign(&bits_, bits);
}
@synthesize bits = bits_;
@synthesize size_ = size__;

- (id)initWithIOSClass:(IOSClass *)elementType {
  if ((self = [super initWithIOSClass:elementType])) {
    JreOperatorRetainedAssign(&enums_, [NIL_CHK(elementType) getEnumConstants]);
    JreOperatorRetainedAssign(&bits_, [[[IOSLongArray alloc] initWithLength:((int) [((IOSObjectArray *) NIL_CHK(enums_)) count] + JavaUtilHugeEnumSet_BIT_IN_LONG - 1) / JavaUtilHugeEnumSet_BIT_IN_LONG] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(JavaLangEnum *)element {
  if (element == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (!([element isKindOfClass:[JavaLangEnum class]]) || ![self isValidTypeWithIOSClass:((IOSClass *) [NIL_CHK(element) getDeclaringClass])]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  int ordinal = [NIL_CHK(element) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  long long int oldBits = [((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:index];
  long long int newBits = oldBits | (1LL << inBits);
  if (oldBits != newBits) {
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:index withLong:newBits];
    size__++;
    return YES;
  }
  return NO;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty] || collection == self) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      @throw [[[JavaLangClassCastException alloc] init] autorelease];
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) set;
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(bits_)) count]; i++) {
      long long int oldBits = [((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i];
      long long int newBits = oldBits | [((IOSLongArray *) NIL_CHK(hugeSet.bits)) longAtIndex:i];
      if (oldBits != newBits) {
        [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:i withLong:newBits];
        size__ += [JavaLangLong bitCountWithLongInt:newBits] - [JavaLangLong bitCountWithLongInt:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return (BOOL) [super addAllWithJavaUtilCollection:collection];
}

- (int)size {
  return size__;
}

- (void)clear {
  [JavaUtilArrays fillWithJavaLangLongArray:bits_ withLongInt:0];
  size__ = 0;
}

- (void)complement {
  size__ = 0;
  for (int i = 0, length = (int) [((IOSLongArray *) NIL_CHK(bits_)) count]; i < length; i++) {
    long long int b = ~[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i];
    if (i == length - 1) {
      b &= (long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - ((int) [((IOSObjectArray *) NIL_CHK(enums_)) count] % JavaUtilHugeEnumSet_BIT_IN_LONG)));
    }
    size__ += [JavaLangLong bitCountWithLongInt:b];
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:i withLong:b];
  }
}

- (BOOL)containsWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[NIL_CHK(object) getClass]]) {
    return NO;
  }
  int ordinal = [((JavaLangEnum *) object) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  return ([((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:index] & (1LL << inBits)) != 0;
}

- (JavaUtilHugeEnumSet *)clone {
  JavaUtilHugeEnumSet *set = (JavaUtilHugeEnumSet *) [super clone];
  ((JavaUtilHugeEnumSet *) NIL_CHK(set)).bits = [((IOSLongArray *) NIL_CHK(bits_)) clone];
  return set;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty]) {
    return YES;
  }
  if ([(id) collection isKindOfClass:[JavaUtilHugeEnumSet class]]) {
    JavaUtilHugeEnumSet *set = (JavaUtilHugeEnumSet *) collection;
    if ([self isValidTypeWithIOSClass:((JavaUtilHugeEnumSet *) NIL_CHK(set)).elementClass]) {
      for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(bits_)) count]; i++) {
        long long int setBits = [((IOSLongArray *) NIL_CHK(set.bits)) longAtIndex:i];
        if (([((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i] & setBits) != setBits) {
          return NO;
        }
      }
      return YES;
    }
  }
  return !([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) && [super containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEqual:(id)object {
  if (object == nil) {
    return NO;
  }
  if (![self isValidTypeWithIOSClass:[NIL_CHK(object) getClass]]) {
    return (BOOL) [super isEqual:object];
  }
  return [JavaUtilArrays equalsWithJavaLangLongArray:bits_ withJavaLangLongArray:((JavaUtilHugeEnumSet *) object).bits];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilHugeEnumSet_HugeEnumSetIterator alloc] initWithJavaUtilHugeEnumSet:self] autorelease];
}

- (BOOL)removeWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[NIL_CHK(object) getClass]]) {
    return NO;
  }
  int ordinal = [((JavaLangEnum *) object) ordinal];
  int index = ordinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int inBits = ordinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  long long int oldBits = [((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:index];
  long long int newBits = oldBits & ~(1LL << inBits);
  if (oldBits != newBits) {
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:index withLong:newBits];
    size__--;
    return YES;
  }
  return NO;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty]) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      return NO;
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) set;
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(bits_)) count]; i++) {
      long long int oldBits = [((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i];
      long long int newBits = oldBits & ~[((IOSLongArray *) NIL_CHK(hugeSet.bits)) longAtIndex:i];
      if (oldBits != newBits) {
        [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:i withLong:newBits];
        size__ += [JavaLangLong bitCountWithLongInt:newBits] - [JavaLangLong bitCountWithLongInt:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return (BOOL) [super removeAllWithJavaUtilCollection:collection];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      if (size__ > 0) {
        [self clear];
        return YES;
      }
      else {
        return NO;
      }
    }
    JavaUtilHugeEnumSet *hugeSet = (JavaUtilHugeEnumSet *) set;
    BOOL changed = NO;
    for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(bits_)) count]; i++) {
      long long int oldBits = [((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i];
      long long int newBits = oldBits & [((IOSLongArray *) NIL_CHK(hugeSet.bits)) longAtIndex:i];
      if (oldBits != newBits) {
        [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:i withLong:newBits];
        size__ += [JavaLangLong bitCountWithLongInt:newBits] - [JavaLangLong bitCountWithLongInt:oldBits];
        changed = YES;
      }
    }
    return changed;
  }
  return (BOOL) [super retainAllWithJavaUtilCollection:collection];
}

- (void)setRangeWithId:(JavaLangEnum *)start
                withId:(JavaLangEnum *)end {
  if (start == nil || end == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int startOrdinal = [NIL_CHK(start) ordinal];
  int startIndex = startOrdinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int startInBits = startOrdinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  int endOrdinal = [NIL_CHK(end) ordinal];
  int endIndex = endOrdinal / JavaUtilHugeEnumSet_BIT_IN_LONG;
  int endInBits = endOrdinal % JavaUtilHugeEnumSet_BIT_IN_LONG;
  if (startIndex == endIndex) {
    long long int range = ((long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - (endInBits - startInBits + 1)))) << startInBits;
    size__ -= [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:startIndex]];
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:startIndex withLong:[bits_ longAtIndex:startIndex] | range];
    size__ += [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:startIndex]];
  }
  else {
    long long int range = ((long long) (((unsigned long long) -1LL) >> startInBits)) << startInBits;
    size__ -= [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:startIndex]];
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:startIndex withLong:[bits_ longAtIndex:startIndex] | range];
    size__ += [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:startIndex]];
    range = (long long) (((unsigned long long) -1LL) >> (JavaUtilHugeEnumSet_BIT_IN_LONG - (endInBits + 1)));
    size__ -= [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:endIndex]];
    [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:endIndex withLong:[bits_ longAtIndex:endIndex] | range];
    size__ += [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:endIndex]];
    for (int i = (startIndex + 1); i <= (endIndex - 1); i++) {
      size__ -= [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i]];
      [((IOSLongArray *) NIL_CHK(bits_)) replaceLongAtIndex:i withLong:-1LL];
      size__ += [JavaLangLong bitCountWithLongInt:[((IOSLongArray *) NIL_CHK(bits_)) longAtIndex:i]];
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&bits_, nil);
  JreOperatorRetainedAssign(&enums_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilHugeEnumSet *typedCopy = (JavaUtilHugeEnumSet *) copy;
  typedCopy.enums = enums_;
  typedCopy.bits = bits_;
  typedCopy.size_ = size__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:enums_ name:@"enums"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:bits_ name:@"bits"]];
  return result;
}

@end
@implementation JavaUtilHugeEnumSet_HugeEnumSetIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilHugeEnumSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilHugeEnumSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize currentBits = currentBits_;
@synthesize index = index_;
@synthesize mask = mask_;
- (JavaLangEnum *)last {
  return last_;
}
- (void)setLast:(JavaLangEnum *)last {
  JreOperatorRetainedAssign(&last_, last);
}
@synthesize last = last_;

- (id)initWithJavaUtilHugeEnumSet:(JavaUtilHugeEnumSet *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    currentBits_ = [((IOSLongArray *) NIL_CHK(this$0_.bits)) longAtIndex:0];
    [self computeNextElement];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)computeNextElement {
  while (YES) {
    if (currentBits_ != 0) {
      mask_ = currentBits_ & -currentBits_;
      return;
    }
    else if (++index_ < (int) [((IOSLongArray *) NIL_CHK(this$0_.bits)) count]) {
      currentBits_ = [((IOSLongArray *) NIL_CHK(this$0_.bits)) longAtIndex:index_];
    }
    else {
      mask_ = 0;
      return;
    }
  }
}

- (BOOL)hasNext {
  return mask_ != 0;
}

- (JavaLangEnum *)next {
  if (mask_ == 0) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  int ordinal = [JavaLangLong numberOfTrailingZerosWithLongInt:mask_] + index_ * JavaUtilHugeEnumSet_BIT_IN_LONG;
  JreOperatorRetainedAssign(&last_, [((IOSObjectArray *) NIL_CHK(this$0_.enums)) objectAtIndex:ordinal]);
  currentBits_ &= ~mask_;
  [self computeNextElement];
  return last_;
}

- (void)remove {
  if (last_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  }
  [this$0_ removeWithId:last_];
  JreOperatorRetainedAssign(&last_, nil);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&last_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilHugeEnumSet_HugeEnumSetIterator *typedCopy = (JavaUtilHugeEnumSet_HugeEnumSetIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.currentBits = currentBits_;
  typedCopy.index = index_;
  typedCopy.mask = mask_;
  typedCopy.last = last_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:last_ name:@"last"]];
  return result;
}

@end
