//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/HashSet.java
//
//  Created by retechretech on 13-4-19.
//

#import "java/lang/CloneNotSupportedException.h"
#import "java/util/Collection.h"
#import "java/util/HashMap.h"
#import "java/util/HashSet.h"
#import "java/util/Iterator.h"
#import "java/util/Set.h"

@implementation JavaUtilHashSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilHashSet *)dummyKey {
  return dummyKey_;
}
- (void)setDummyKey:(JavaUtilHashSet *)dummyKey {
  JreOperatorRetainedAssign(&dummyKey_, dummyKey);
}
@synthesize dummyKey = dummyKey_;
- (JavaUtilHashMap *)backingMap {
  return backingMap_;
}
- (void)setBackingMap:(JavaUtilHashMap *)backingMap {
  JreOperatorRetainedAssign(&backingMap_, backingMap);
}
@synthesize backingMap = backingMap_;

- (id)init {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] init] autorelease]]);
}

- (id)initWithInt:(int)capacity {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:capacity] autorelease]]);
}

- (id)initWithInt:(int)capacity
        withFloat:(float)loadFactor {
  return JreMemDebugAdd([self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease]]);
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [self initJavaUtilHashSetWithJavaUtilHashMap:[[[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilCollection>) NIL_CHK(collection)) size] < 6 ? 11 : [((id<JavaUtilCollection>) NIL_CHK(collection)) size] * 2] autorelease]])) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id e = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
        [self addWithId:e];
      }
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaUtilHashSetWithJavaUtilHashMap:(JavaUtilHashMap *)backingMap {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&dummyKey_, (JavaUtilHashSet *) [[[NSObject alloc] init] autorelease]);
    self.backingMap = backingMap;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilHashMap:(JavaUtilHashMap *)backingMap {
  return [self initJavaUtilHashSetWithJavaUtilHashMap:backingMap];
}

- (BOOL)addWithId:(id)object {
  return ((JavaUtilHashSet *) [((JavaUtilHashMap *) NIL_CHK(backingMap_)) putWithId:object withId:dummyKey_]) == nil;
}

- (void)clear {
  [((JavaUtilHashMap *) NIL_CHK(backingMap_)) clear];
}

- (id)clone {
  @try {
    JavaUtilHashSet *clone = (JavaUtilHashSet *) [super clone];
    ((JavaUtilHashSet *) NIL_CHK(clone)).backingMap = (JavaUtilHashMap *) [((JavaUtilHashMap *) NIL_CHK(backingMap_)) clone];
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilHashMap *) NIL_CHK(backingMap_)) containsKeyWithId:object];
}

- (BOOL)isEmpty {
  return [((JavaUtilHashMap *) NIL_CHK(backingMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((JavaUtilHashMap *) NIL_CHK(backingMap_)) keySet]) iterator]);
}

- (BOOL)removeWithId:(id)object {
  return ((JavaUtilHashSet *) [((JavaUtilHashMap *) NIL_CHK(backingMap_)) removeWithId:object]) != nil;
}

- (int)size {
  return [((JavaUtilHashMap *) NIL_CHK(backingMap_)) size];
}

- (JavaUtilHashMap *)createBackingMapWithInt:(int)capacity
                                   withFloat:(float)loadFactor {
  return [[[JavaUtilHashMap alloc] initWithInt:capacity withFloat:loadFactor] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&backingMap_, nil);
  JreOperatorRetainedAssign(&dummyKey_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilHashSet *typedCopy = (JavaUtilHashSet *) copy;
  typedCopy.dummyKey = dummyKey_;
  typedCopy.backingMap = backingMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:dummyKey_ name:@"dummyKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  return result;
}

@end
