//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/ArrayDeque.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/AssertionError.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/System.h"
#import "java/lang/reflect/Array.h"
#import "java/util/AbstractCollection.h"
#import "java/util/ArrayDeque.h"
#import "java/util/Arrays.h"
#import "java/util/Collection.h"
#import "java/util/ConcurrentModificationException.h"
#import "java/util/Iterator.h"
#import "java/util/NoSuchElementException.h"

@implementation JavaUtilArrayDeque

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSObjectArray *)elements {
  return elements_;
}
- (void)setElements:(IOSObjectArray *)elements {
  JreOperatorRetainedAssign(&elements_, elements);
}
@synthesize elements = elements_;
@synthesize head = head_;
@synthesize tail = tail_;

- (void)allocateElementsWithInt:(int)numElements OBJC_METHOD_FAMILY_NONE {
  int initialCapacity = JavaUtilArrayDeque_MIN_INITIAL_CAPACITY;
  if (numElements >= initialCapacity) {
    initialCapacity = numElements;
    initialCapacity |= ((int) (((unsigned int) initialCapacity) >> 1));
    initialCapacity |= ((int) (((unsigned int) initialCapacity) >> 2));
    initialCapacity |= ((int) (((unsigned int) initialCapacity) >> 4));
    initialCapacity |= ((int) (((unsigned int) initialCapacity) >> 8));
    initialCapacity |= ((int) (((unsigned int) initialCapacity) >> 16));
    initialCapacity++;
    if (initialCapacity < 0) initialCapacity = (int) (((unsigned int) initialCapacity) >> 1);
  }
  JreOperatorRetainedAssign(&elements_, (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:initialCapacity type:[IOSClass classWithClass:[NSObject class]]] autorelease]);
}

- (void)doubleCapacity {
  NSAssert(head_ == tail_, @"android/libcore/luni/src/main/java/java/util/ArrayDeque.java:120 condition failed: assert head == tail;");
  int p = head_;
  int n = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count];
  int r = n - p;
  int newCapacity = n << 1;
  if (newCapacity < 0) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Sorry, deque too big"] autorelease];
  IOSObjectArray *a = [[[IOSObjectArray alloc] initWithLength:newCapacity type:[IOSClass classWithClass:[NSObject class]]] autorelease];
  [JavaLangSystem arraycopyWithId:elements_ withInt:p withId:a withInt:0 withInt:r];
  [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:a withInt:r withInt:p];
  JreOperatorRetainedAssign(&elements_, (IOSObjectArray *) a);
  head_ = 0;
  tail_ = n;
}

- (IOSObjectArray *)copyElementsWithNSObjectArray:(IOSObjectArray *)a OBJC_METHOD_FAMILY_NONE {
  if (head_ < tail_) {
    [JavaLangSystem arraycopyWithId:elements_ withInt:head_ withId:a withInt:0 withInt:[self size]];
  }
  else if (head_ > tail_) {
    int headPortionLen = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - head_;
    [JavaLangSystem arraycopyWithId:elements_ withInt:head_ withId:a withInt:0 withInt:headPortionLen];
    [JavaLangSystem arraycopyWithId:elements_ withInt:0 withId:a withInt:headPortionLen withInt:tail_];
  }
  return a;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&elements_, (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:16 type:[IOSClass classWithClass:[NSObject class]]] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)numElements {
  if ((self = [super init])) {
    [self allocateElementsWithInt:numElements];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  if ((self = [super init])) {
    [self allocateElementsWithInt:[((id<JavaUtilCollection>) NIL_CHK(c)) size]];
    [self addAllWithJavaUtilCollection:c];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addFirstWithId:(id)e {
  if (e == nil) @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  [((IOSObjectArray *) NIL_CHK(elements_)) replaceObjectAtIndex:head_ = (head_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1) withObject:e];
  if (head_ == tail_) [self doubleCapacity];
}

- (void)addLastWithId:(id)e {
  if (e == nil) @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  [((IOSObjectArray *) NIL_CHK(elements_)) replaceObjectAtIndex:tail_ withObject:e];
  if ((tail_ = (tail_ + 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1)) == head_) [self doubleCapacity];
}

- (BOOL)offerFirstWithId:(id)e {
  [self addFirstWithId:e];
  return YES;
}

- (BOOL)offerLastWithId:(id)e {
  [self addLastWithId:e];
  return YES;
}

- (id)removeFirst {
  id x = [self pollFirst];
  if (x == nil) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  return x;
}

- (id)removeLast {
  id x = [self pollLast];
  if (x == nil) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  return x;
}

- (id)pollFirst {
  int h = head_;
  id result = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:h];
  if (result == nil) return nil;
  [((IOSObjectArray *) NIL_CHK(elements_)) replaceObjectAtIndex:h withObject:nil];
  head_ = (h + 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1);
  return result;
}

- (id)pollLast {
  int t = (tail_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1);
  id result = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:t];
  if (result == nil) return nil;
  [((IOSObjectArray *) NIL_CHK(elements_)) replaceObjectAtIndex:t withObject:nil];
  tail_ = t;
  return result;
}

- (id)getFirst {
  id x = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:head_];
  if (x == nil) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  return x;
}

- (id)getLast {
  id x = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:(tail_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1)];
  if (x == nil) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  return x;
}

- (id)peekFirst {
  return [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:head_];
}

- (id)peekLast {
  return [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:(tail_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1)];
}

- (BOOL)removeFirstOccurrenceWithId:(id)o {
  if (o == nil) return NO;
  int mask = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1;
  int i = head_;
  id x;
  while ((x = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:i]) != nil) {
    if ([NIL_CHK(o) isEqual:x]) {
      [self delete__WithInt:i];
      return YES;
    }
    i = (i + 1) & mask;
  }
  return NO;
}

- (BOOL)removeLastOccurrenceWithId:(id)o {
  if (o == nil) return NO;
  int mask = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1;
  int i = (tail_ - 1) & mask;
  id x;
  while ((x = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:i]) != nil) {
    if ([NIL_CHK(o) isEqual:x]) {
      [self delete__WithInt:i];
      return YES;
    }
    i = (i - 1) & mask;
  }
  return NO;
}

- (BOOL)addWithId:(id)e {
  [self addLastWithId:e];
  return YES;
}

- (BOOL)offerWithId:(id)e {
  return [self offerLastWithId:e];
}

- (id)remove {
  return [self removeFirst];
}

- (id)poll {
  return [self pollFirst];
}

- (id)element {
  return [self getFirst];
}

- (id)peek {
  return [self peekFirst];
}

- (void)pushWithId:(id)e {
  [self addFirstWithId:e];
}

- (id)pop {
  return [self removeFirst];
}

- (void)checkInvariants {
  NSAssert([((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:tail_] == nil, @"android/libcore/luni/src/main/java/java/util/ArrayDeque.java:483 condition failed: assert elements[tail] == null;");
  NSAssert(head_ == tail_ ? [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:head_] == nil : ([((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:head_] != nil && [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:(tail_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1)] != nil), @"android/libcore/luni/src/main/java/java/util/ArrayDeque.java:484 condition failed: assert head == tail ? elements[head] == null :\n            (elements[head] != null &&\n             elements[(tail - 1) & (elements.length - 1)] != null);");
  NSAssert([((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:(head_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1)] == nil, @"android/libcore/luni/src/main/java/java/util/ArrayDeque.java:487 condition failed: assert elements[(head - 1) & (elements.length - 1)] == null;");
}

- (BOOL)delete__WithInt:(int)i {
  [self checkInvariants];
  IOSObjectArray *elements = self.elements;
  int mask = (int) [((IOSObjectArray *) NIL_CHK(elements)) count] - 1;
  int h = head_;
  int t = tail_;
  int front = (i - h) & mask;
  int back = (t - i) & mask;
  if (front >= ((t - h) & mask)) @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  if (front < back) {
    if (h <= i) {
      [JavaLangSystem arraycopyWithId:elements withInt:h withId:elements withInt:h + 1 withInt:front];
    }
    else {
      [JavaLangSystem arraycopyWithId:elements withInt:0 withId:elements withInt:1 withInt:i];
      [((IOSObjectArray *) NIL_CHK(elements)) replaceObjectAtIndex:0 withObject:[((IOSObjectArray *) NIL_CHK(elements)) objectAtIndex:mask]];
      [JavaLangSystem arraycopyWithId:elements withInt:h withId:elements withInt:h + 1 withInt:mask - h];
    }
    [((IOSObjectArray *) NIL_CHK(elements)) replaceObjectAtIndex:h withObject:nil];
    head_ = (h + 1) & mask;
    return NO;
  }
  else {
    if (i < t) {
      [JavaLangSystem arraycopyWithId:elements withInt:i + 1 withId:elements withInt:i withInt:back];
      tail_ = t - 1;
    }
    else {
      [JavaLangSystem arraycopyWithId:elements withInt:i + 1 withId:elements withInt:i withInt:mask - i];
      [((IOSObjectArray *) NIL_CHK(elements)) replaceObjectAtIndex:mask withObject:[((IOSObjectArray *) NIL_CHK(elements)) objectAtIndex:0]];
      [JavaLangSystem arraycopyWithId:elements withInt:1 withId:elements withInt:0 withInt:t];
      tail_ = (t - 1) & mask;
    }
    return YES;
  }
}

- (int)size {
  return (tail_ - head_) & ((int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1);
}

- (BOOL)isEmpty {
  return head_ == tail_;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilArrayDeque_DeqIterator alloc] initWithJavaUtilArrayDeque:self] autorelease];
}

- (id<JavaUtilIterator>)descendingIterator {
  return [[[JavaUtilArrayDeque_DescendingIterator alloc] initWithJavaUtilArrayDeque:self] autorelease];
}

- (BOOL)containsWithId:(id)o {
  if (o == nil) return NO;
  int mask = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1;
  int i = head_;
  id x;
  while ((x = [((IOSObjectArray *) NIL_CHK(elements_)) objectAtIndex:i]) != nil) {
    if ([NIL_CHK(o) isEqual:x]) return YES;
    i = (i + 1) & mask;
  }
  return NO;
}

- (BOOL)removeWithId:(id)o {
  return [self removeFirstOccurrenceWithId:o];
}

- (void)clear {
  int h = head_;
  int t = tail_;
  if (h != t) {
    head_ = tail_ = 0;
    int i = h;
    int mask = (int) [((IOSObjectArray *) NIL_CHK(elements_)) count] - 1;
    do {
      [((IOSObjectArray *) NIL_CHK(elements_)) replaceObjectAtIndex:i withObject:nil];
      i = (i + 1) & mask;
    }
    while (i != t);
  }
}

- (IOSObjectArray *)toArray {
  return [self copyElementsWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:[self size] type:[IOSClass classWithClass:[NSObject class]]] autorelease]];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  int size = [self size];
  if ((int) [((IOSObjectArray *) NIL_CHK(a)) count] < size) a = (IOSObjectArray *) [JavaLangReflectArray newInstanceWithIOSClass:[[((IOSObjectArray *) NIL_CHK(a)) getClass] getComponentType] withInt:size];
  [self copyElementsWithNSObjectArray:a];
  if ((int) [((IOSObjectArray *) NIL_CHK(a)) count] > size) [((IOSObjectArray *) NIL_CHK(a)) replaceObjectAtIndex:size withObject:nil];
  return a;
}

- (JavaUtilArrayDeque *)clone {
  @try {
    JavaUtilArrayDeque *result = (JavaUtilArrayDeque *) [super clone];
    ((JavaUtilArrayDeque *) NIL_CHK(result)).elements = [JavaUtilArrays copyOfWithNSObjectArray:elements_ withInt:(int) [((IOSObjectArray *) NIL_CHK(elements_)) count]];
    return result;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&elements_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilArrayDeque *typedCopy = (JavaUtilArrayDeque *) copy;
  typedCopy.elements = elements_;
  typedCopy.head = head_;
  typedCopy.tail = tail_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elements_ name:@"elements"]];
  return result;
}

@end
@implementation JavaUtilArrayDeque_DeqIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilArrayDeque *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilArrayDeque *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize cursor = cursor_;
@synthesize fence = fence_;
@synthesize lastRet = lastRet_;

- (BOOL)hasNext {
  return cursor_ != fence_;
}

- (id)next {
  if (cursor_ == fence_) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  id result = [((IOSObjectArray *) NIL_CHK(this$0_.elements)) objectAtIndex:cursor_];
  if (this$0_.tail != fence_ || result == nil) @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  lastRet_ = cursor_;
  cursor_ = (cursor_ + 1) & ((int) [((IOSObjectArray *) NIL_CHK(this$0_.elements)) count] - 1);
  return result;
}

- (void)remove {
  if (lastRet_ < 0) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  if ([this$0_ delete__WithInt:lastRet_]) {
    cursor_ = (cursor_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(this$0_.elements)) count] - 1);
    fence_ = this$0_.tail;
  }
  lastRet_ = -1;
}

- (id)initWithJavaUtilArrayDeque:(JavaUtilArrayDeque *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    cursor_ = outer$.head;
    fence_ = outer$.tail;
    lastRet_ = -1;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilArrayDeque_DeqIterator *typedCopy = (JavaUtilArrayDeque_DeqIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.cursor = cursor_;
  typedCopy.fence = fence_;
  typedCopy.lastRet = lastRet_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilArrayDeque_DescendingIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilArrayDeque *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilArrayDeque *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize cursor = cursor_;
@synthesize fence = fence_;
@synthesize lastRet = lastRet_;

- (BOOL)hasNext {
  return cursor_ != fence_;
}

- (id)next {
  if (cursor_ == fence_) @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  cursor_ = (cursor_ - 1) & ((int) [((IOSObjectArray *) NIL_CHK(this$0_.elements)) count] - 1);
  id result = [((IOSObjectArray *) NIL_CHK(this$0_.elements)) objectAtIndex:cursor_];
  if (this$0_.head != fence_ || result == nil) @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  lastRet_ = cursor_;
  return result;
}

- (void)remove {
  if (lastRet_ < 0) @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  if (![this$0_ delete__WithInt:lastRet_]) {
    cursor_ = (cursor_ + 1) & ((int) [((IOSObjectArray *) NIL_CHK(this$0_.elements)) count] - 1);
    fence_ = this$0_.head;
  }
  lastRet_ = -1;
}

- (id)initWithJavaUtilArrayDeque:(JavaUtilArrayDeque *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    cursor_ = outer$.tail;
    fence_ = outer$.head;
    lastRet_ = -1;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilArrayDeque_DescendingIterator *typedCopy = (JavaUtilArrayDeque_DescendingIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.cursor = cursor_;
  typedCopy.fence = fence_;
  typedCopy.lastRet = lastRet_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
