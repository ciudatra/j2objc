//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/android/libcore/luni/src/main/java/java/util/GregorianCalendar.java
//
//  Created by retechretech on 13-3-15.
//

#import "IOSBooleanArray.h"
#import "IOSByteArray.h"
#import "IOSIntArray.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Long.h"
#import "java/lang/System.h"
#import "java/util/Calendar.h"
#import "java/util/Date.h"
#import "java/util/GregorianCalendar.h"
#import "java/util/Locale.h"
#import "java/util/TimeZone.h"

@implementation JavaUtilGregorianCalendar

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_DaysInMonth_ name:@"JavaUtilGregorianCalendar_DaysInMonth_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_DaysInYear_ name:@"JavaUtilGregorianCalendar_DaysInYear_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_maximums_ name:@"JavaUtilGregorianCalendar_maximums_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_minimums_ name:@"JavaUtilGregorianCalendar_minimums_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilGregorianCalendar_leastMaximums_ name:@"JavaUtilGregorianCalendar_leastMaximums_"]];
  return result;
}

static IOSByteArray * JavaUtilGregorianCalendar_DaysInMonth_;
static IOSIntArray * JavaUtilGregorianCalendar_DaysInYear_;
static IOSIntArray * JavaUtilGregorianCalendar_maximums_;
static IOSIntArray * JavaUtilGregorianCalendar_minimums_;
static IOSIntArray * JavaUtilGregorianCalendar_leastMaximums_;

@synthesize gregorianCutover = gregorianCutover_;
@synthesize changeYear = changeYear_;
@synthesize julianSkew = julianSkew_;
@synthesize currentYearSkew = currentYearSkew_;
@synthesize lastYearSkew = lastYearSkew_;

+ (int)BC {
  return JavaUtilGregorianCalendar_BC;
}

+ (int)AD {
  return JavaUtilGregorianCalendar_AD;
}

+ (IOSByteArray *)DaysInMonth {
  return JavaUtilGregorianCalendar_DaysInMonth_;
}

+ (void)setDaysInMonthWithJavaLangByteArray:(IOSByteArray *)DaysInMonth {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInMonth_, DaysInMonth);
}

+ (IOSIntArray *)DaysInYear {
  return JavaUtilGregorianCalendar_DaysInYear_;
}

+ (void)setDaysInYearWithJavaLangIntegerArray:(IOSIntArray *)DaysInYear {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInYear_, DaysInYear);
}

+ (IOSIntArray *)maximums {
  return JavaUtilGregorianCalendar_maximums_;
}

+ (void)setMaximumsWithJavaLangIntegerArray:(IOSIntArray *)maximums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_maximums_, maximums);
}

+ (IOSIntArray *)minimums {
  return JavaUtilGregorianCalendar_minimums_;
}

+ (void)setMinimumsWithJavaLangIntegerArray:(IOSIntArray *)minimums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_minimums_, minimums);
}

+ (IOSIntArray *)leastMaximums {
  return JavaUtilGregorianCalendar_leastMaximums_;
}

+ (void)setLeastMaximumsWithJavaLangIntegerArray:(IOSIntArray *)leastMaximums {
  JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_leastMaximums_, leastMaximums);
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day {
  if ((self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]])) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute {
  if ((self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]])) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day withInt:hour withInt:minute];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute
          withInt:(int)second {
  if ((self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:[JavaUtilLocale getDefault]])) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setWithInt:year withInt:month withInt:day withInt:hour withInt:minute withInt:second];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLongInt:(long long int)milliseconds {
  if ((self = [self initJavaUtilGregorianCalendarWithBOOL:NO])) {
    [self setTimeInMillisWithLongInt:milliseconds];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault] withJavaUtilLocale:locale]);
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone {
  return JreMemDebugAdd([self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:timezone withJavaUtilLocale:[JavaUtilLocale getDefault]]);
}

- (id)initJavaUtilGregorianCalendarWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
                                     withJavaUtilLocale:(JavaUtilLocale *)locale {
  if ((self = [super initWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale])) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setTimeInMillisWithLongInt:[JavaLangSystem currentTimeMillis]];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)timezone
            withJavaUtilLocale:(JavaUtilLocale *)locale {
  return [self initJavaUtilGregorianCalendarWithJavaUtilTimeZone:timezone withJavaUtilLocale:locale];
}

- (id)initJavaUtilGregorianCalendarWithBOOL:(BOOL)ignored {
  if ((self = [super initWithJavaUtilTimeZone:[JavaUtilTimeZone getDefault]])) {
    gregorianCutover_ = JavaUtilGregorianCalendar_defaultGregorianCutover;
    changeYear_ = 1582;
    julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
    currentYearSkew_ = 10;
    lastYearSkew_ = 0;
    [self setFirstDayOfWeekWithInt:JavaUtilCalendar_SUNDAY];
    [self setMinimalDaysInFirstWeekWithInt:1];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithBOOL:(BOOL)ignored {
  return [self initJavaUtilGregorianCalendarWithBOOL:ignored];
}

- (void)addWithInt:(int)field
           withInt:(int)value {
  if (value == 0) {
    return;
  }
  if (field < 0 || field >= JavaUtilCalendar_ZONE_OFFSET) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (field == JavaUtilCalendar_ERA) {
    [self complete];
    if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_AD) {
      if (value >= 0) {
        return;
      }
      [self setWithInt:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_BC];
    }
    else {
      if (value <= 0) {
        return;
      }
      [self setWithInt:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_AD];
    }
    [self complete];
    return;
  }
  if (field == JavaUtilCalendar_YEAR || field == JavaUtilCalendar_MONTH) {
    [self complete];
    if (field == JavaUtilCalendar_MONTH) {
      int month = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH] + value;
      if (month < 0) {
        value = (month - 11) / 12;
        month = 12 + (month % 12);
      }
      else {
        value = month / 12;
      }
      [self setWithInt:JavaUtilCalendar_MONTH withInt:month % 12];
    }
    [self setWithInt:JavaUtilCalendar_YEAR withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] + value];
    int days = [self daysInMonthWithBOOL:[self isLeapYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]] withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH]];
    if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] > days) {
      [self setWithInt:JavaUtilCalendar_DATE withInt:days];
    }
    [self complete];
    return;
  }
  long long int multiplier = 0;
  [self getTimeInMillis];
  switch (field) {
    case JavaUtilCalendar_MILLISECOND:
    time_ += value;
    break;
    case JavaUtilCalendar_SECOND:
    time_ += value * 1000LL;
    break;
    case JavaUtilCalendar_MINUTE:
    time_ += value * 60000LL;
    break;
    case JavaUtilCalendar_HOUR:
    case JavaUtilCalendar_HOUR_OF_DAY:
    time_ += value * 3600000LL;
    break;
    case JavaUtilCalendar_AM_PM:
    multiplier = 43200000LL;
    break;
    case JavaUtilCalendar_DATE:
    case JavaUtilCalendar_DAY_OF_YEAR:
    case JavaUtilCalendar_DAY_OF_WEEK:
    multiplier = 86400000LL;
    break;
    case JavaUtilCalendar_WEEK_OF_YEAR:
    case JavaUtilCalendar_WEEK_OF_MONTH:
    case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
    multiplier = 604800000LL;
    break;
  }
  if (multiplier == 0) {
    areFieldsSet_ = NO;
    [self complete];
    return;
  }
  long long int delta = value * multiplier;
  int zoneOffset = [[self getTimeZone] getRawOffset];
  int offsetBefore = [self getOffsetWithLongInt:time_ + zoneOffset];
  int offsetAfter = [self getOffsetWithLongInt:time_ + zoneOffset + delta];
  int dstDelta = offsetBefore - offsetAfter;
  if ([self getOffsetWithLongInt:time_ + zoneOffset + delta + dstDelta] == offsetAfter) {
    delta += dstDelta;
  }
  time_ += delta;
  areFieldsSet_ = NO;
  [self complete];
}

- (void)fullFieldsCalcWithLongInt:(long long int)timeVal
                          withInt:(int)zoneOffset {
  int millis = (int) (time_ % 86400000);
  long long int days = timeVal / 86400000;
  if (millis < 0) {
    millis += 86400000;
    days--;
  }
  millis += zoneOffset;
  while (millis < 0) {
    millis += 86400000;
    days--;
  }
  while (millis >= 86400000) {
    millis -= 86400000;
    days++;
  }
  int dayOfYear = [self computeYearAndDayWithLongInt:days withLongInt:timeVal + zoneOffset];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DAY_OF_YEAR withInt:dayOfYear];
  if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] == changeYear_ && gregorianCutover_ <= timeVal + zoneOffset) {
    dayOfYear += currentYearSkew_;
  }
  int month = dayOfYear / 32;
  BOOL leapYear = [self isLeapYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]];
  int date = dayOfYear - [self daysInYearWithBOOL:leapYear withInt:month];
  if (date > [self daysInMonthWithBOOL:leapYear withInt:month]) {
    date -= [self daysInMonthWithBOOL:leapYear withInt:month];
    month++;
  }
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DAY_OF_WEEK withInt:[self mod7WithLongInt:days - 3] + 1];
  int dstOffset = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] <= 0 ? 0 : [[self getTimeZone] getOffsetWithInt:JavaUtilGregorianCalendar_AD withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] withInt:month withInt:date withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] withInt:millis];
  if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] > 0) {
    dstOffset -= zoneOffset;
  }
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DST_OFFSET withInt:dstOffset];
  if (dstOffset != 0) {
    long long int oldDays = days;
    millis += dstOffset;
    if (millis < 0) {
      millis += 86400000;
      days--;
    }
    else if (millis >= 86400000) {
      millis -= 86400000;
      days++;
    }
    if (oldDays != days) {
      dayOfYear = [self computeYearAndDayWithLongInt:days withLongInt:timeVal - zoneOffset + dstOffset];
      [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DAY_OF_YEAR withInt:dayOfYear];
      if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] == changeYear_ && gregorianCutover_ <= timeVal - zoneOffset + dstOffset) {
        dayOfYear += currentYearSkew_;
      }
      month = dayOfYear / 32;
      leapYear = [self isLeapYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]];
      date = dayOfYear - [self daysInYearWithBOOL:leapYear withInt:month];
      if (date > [self daysInMonthWithBOOL:leapYear withInt:month]) {
        date -= [self daysInMonthWithBOOL:leapYear withInt:month];
        month++;
      }
      [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DAY_OF_WEEK withInt:[self mod7WithLongInt:days - 3] + 1];
    }
  }
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_MILLISECOND withInt:(millis % 1000)];
  millis /= 1000;
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_SECOND withInt:(millis % 60)];
  millis /= 60;
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_MINUTE withInt:(millis % 60)];
  millis /= 60;
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_HOUR_OF_DAY withInt:(millis % 24)];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_AM_PM withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR_OF_DAY] > 11 ? 1 : 0];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_HOUR withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR_OF_DAY] % 12];
  if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] <= 0) {
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_BC];
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_YEAR withInt:-[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] + 1];
  }
  else {
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_ERA withInt:JavaUtilGregorianCalendar_AD];
  }
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_MONTH withInt:month];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DATE withInt:date];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH withInt:(date - 1) / 7 + 1];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_WEEK_OF_MONTH withInt:(date - 1 + [self mod7WithLongInt:days - date - 2 - ([self getFirstDayOfWeek] - 1)]) / 7 + 1];
  int daysFromStart = [self mod7WithLongInt:days - 3 - ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] - 1) - ([self getFirstDayOfWeek] - 1)];
  int week = ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] - 1 + daysFromStart) / 7 + (7 - daysFromStart >= [self getMinimalDaysInFirstWeek] ? 1 : 0);
  if (week == 0) {
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_WEEK_OF_YEAR withInt:7 - [self mod7WithLongInt:daysFromStart - ([self isLeapYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] - 1] ? 2 : 1)] >= [self getMinimalDaysInFirstWeek] ? 53 : 52];
  }
  else if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] >= (leapYear ? 367 : 366) - [self mod7WithLongInt:daysFromStart + (leapYear ? 2 : 1)]) {
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_WEEK_OF_YEAR withInt:7 - [self mod7WithLongInt:daysFromStart + (leapYear ? 2 : 1)] >= [self getMinimalDaysInFirstWeek] ? 1 : week];
  }
  else {
    [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_WEEK_OF_YEAR withInt:week];
  }
}

- (void)computeFields {
  JavaUtilTimeZone *timeZone = [self getTimeZone];
  int dstOffset = [((JavaUtilTimeZone *) NIL_CHK(timeZone)) inDaylightTimeWithJavaUtilDate:[[[JavaUtilDate alloc] initWithLongInt:time_] autorelease]] ? [((JavaUtilTimeZone *) NIL_CHK(timeZone)) getDSTSavings] : 0;
  int zoneOffset = [((JavaUtilTimeZone *) NIL_CHK(timeZone)) getRawOffset];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_DST_OFFSET withInt:dstOffset];
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_ZONE_OFFSET withInt:zoneOffset];
  [self fullFieldsCalcWithLongInt:time_ withInt:zoneOffset];
  for (int i = 0; i < JavaUtilCalendar_FIELD_COUNT; i++) {
    [((IOSBooleanArray *) NIL_CHK(isSet__)) replaceBooleanAtIndex:i withBoolean:YES];
  }
}

- (void)computeTime {
  if (![self isLenient]) {
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_HOUR_OF_DAY]) {
      if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR_OF_DAY] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR_OF_DAY] > 23) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
    }
    else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_HOUR] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR] > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MINUTE] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MINUTE] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MINUTE] > 59)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_SECOND] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_SECOND] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_SECOND] > 59)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MILLISECOND] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MILLISECOND] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MILLISECOND] > 999)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] > 53)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] > 7)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] > 6)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] > 6)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_AM_PM] && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_AM_PM] != JavaUtilCalendar_AM && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_AM_PM] != JavaUtilCalendar_PM) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_HOUR] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR] > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_YEAR]) {
      if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_ERA] && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_BC && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] > 292269054)) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      else if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] > 292278994) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
    }
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MONTH] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH] < 0 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH] > 11)) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
  long long int timeVal;
  long long int hour = 0;
  if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_HOUR_OF_DAY] && lastTimeFieldSet_ != JavaUtilCalendar_HOUR) {
    hour = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR_OF_DAY];
  }
  else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_HOUR]) {
    hour = ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_AM_PM] * 12) + [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_HOUR];
  }
  timeVal = hour * 3600000;
  if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MINUTE]) {
    timeVal += ((long long int) [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MINUTE]) * 60000;
  }
  if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_SECOND]) {
    timeVal += ((long long int) [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_SECOND]) * 1000;
  }
  if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MILLISECOND]) {
    timeVal += [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MILLISECOND];
  }
  long long int days;
  int year = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_YEAR] ? [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR] : 1970;
  if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_ERA]) {
    if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_ERA] != JavaUtilGregorianCalendar_BC && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_ERA] != JavaUtilGregorianCalendar_AD) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_BC) {
      year = 1 - year;
    }
  }
  BOOL weekMonthSet = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] || [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH];
  BOOL useMonth = ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DATE] || [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MONTH] || weekMonthSet) && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_YEAR;
  if (useMonth && (lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK || lastDateFieldSet_ == JavaUtilCalendar_WEEK_OF_YEAR)) {
    if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] && [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK]) {
      useMonth = lastDateFieldSet_ != JavaUtilCalendar_WEEK_OF_YEAR && weekMonthSet && [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK];
    }
    else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_YEAR]) {
      useMonth = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DATE] && [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_MONTH];
    }
  }
  if (useMonth) {
    int month = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH];
    year += month / 12;
    month %= 12;
    if (month < 0) {
      year--;
      month += 12;
    }
    BOOL leapYear = [self isLeapYearWithInt:year];
    days = [self daysFromBaseYearWithLongInt:year] + [self daysInYearWithBOOL:leapYear withInt:month];
    BOOL useDate = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DATE];
    if (useDate && (lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK || lastDateFieldSet_ == JavaUtilCalendar_WEEK_OF_MONTH || lastDateFieldSet_ == JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH)) {
      useDate = !([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK] && weekMonthSet);
    }
    if (useDate) {
      if (![self isLenient] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] > [self daysInMonthWithBOOL:leapYear withInt:month])) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      days += [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] - 1;
    }
    else {
      int dayOfWeek;
      if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK]) {
        dayOfWeek = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] - 1;
      }
      else {
        dayOfWeek = [self getFirstDayOfWeek] - 1;
      }
      if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH) {
        int skew = [self mod7WithLongInt:days - 3 - ([self getFirstDayOfWeek] - 1)];
        days += ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_MONTH] - 1) * 7 + [self mod7WithLongInt:skew + dayOfWeek - (days - 3)] - skew;
      }
      else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH]) {
        if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] >= 0) {
          days += [self mod7WithLongInt:dayOfWeek - (days - 3)] + ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] - 1) * 7;
        }
        else {
          days += [self daysInMonthWithBOOL:leapYear withInt:month] + [self mod7WithLongInt:dayOfWeek - (days + [self daysInMonthWithBOOL:leapYear withInt:month] - 3)] + [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] * 7;
        }
      }
      else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK]) {
        int skew = [self mod7WithLongInt:days - 3 - ([self getFirstDayOfWeek] - 1)];
        days += [self mod7WithLongInt:[self mod7WithLongInt:skew + dayOfWeek - (days - 3)] - skew];
      }
    }
  }
  else {
    BOOL useWeekYear = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] && lastDateFieldSet_ != JavaUtilCalendar_DAY_OF_YEAR;
    if (useWeekYear && [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_YEAR]) {
      useWeekYear = [((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK];
    }
    days = [self daysFromBaseYearWithLongInt:year];
    if (useWeekYear) {
      int dayOfWeek;
      if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK]) {
        dayOfWeek = [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] - 1;
      }
      else {
        dayOfWeek = [self getFirstDayOfWeek] - 1;
      }
      int skew = [self mod7WithLongInt:days - 3 - ([self getFirstDayOfWeek] - 1)];
      days += ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_WEEK_OF_YEAR] - 1) * 7 + [self mod7WithLongInt:skew + dayOfWeek - (days - 3)] - skew;
      if (7 - skew < [self getMinimalDaysInFirstWeek]) {
        days += 7;
      }
    }
    else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_YEAR]) {
      if (![self isLenient] && ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] < 1 || [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] > (365 + ([self isLeapYearWithInt:year] ? 1 : 0)))) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      days += [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_YEAR] - 1;
    }
    else if ([((IOSBooleanArray *) NIL_CHK(isSet__)) booleanAtIndex:JavaUtilCalendar_DAY_OF_WEEK]) {
      days += [self mod7WithLongInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] - 1 - (days - 3)];
    }
  }
  lastDateFieldSet_ = 0;
  timeVal += days * 86400000;
  if (year == changeYear_ && timeVal >= gregorianCutover_ + [self julianError] * 86400000LL) {
    timeVal -= [self julianError] * 86400000LL;
  }
  long long int timeValWithoutDST = timeVal - [self getOffsetWithLongInt:timeVal] + [[self getTimeZone] getRawOffset];
  timeVal -= [self getOffsetWithLongInt:timeValWithoutDST];
  self.time = timeVal;
  if (timeValWithoutDST != timeVal) {
    [self computeFields];
    areFieldsSet_ = YES;
  }
}

- (int)computeYearAndDayWithLongInt:(long long int)dayCount
                        withLongInt:(long long int)localTime {
  int year = 1970;
  long long int days = dayCount;
  if (localTime < gregorianCutover_) {
    days -= julianSkew_;
  }
  int approxYears;
  while ((approxYears = (int) (days / 365)) != 0) {
    year = year + approxYears;
    days = dayCount - [self daysFromBaseYearWithLongInt:year];
  }
  if (days < 0) {
    year = year - 1;
    days = days + [self daysInYearWithInt:year];
  }
  [((IOSIntArray *) NIL_CHK(fields_)) replaceIntAtIndex:JavaUtilCalendar_YEAR withInt:year];
  return (int) days + 1;
}

- (long long int)daysFromBaseYearWithLongInt:(long long int)year {
  if (year >= 1970) {
    long long int days = (year - 1970) * 365 + ((year - 1969) / 4);
    if (year > changeYear_) {
      days -= ((year - 1901) / 100) - ((year - 1601) / 400);
    }
    else {
      if (year == changeYear_) {
        days += currentYearSkew_;
      }
      else if (year == changeYear_ - 1) {
        days += lastYearSkew_;
      }
      else {
        days += julianSkew_;
      }
    }
    return days;
  }
  else if (year <= changeYear_) {
    return (year - 1970) * 365 + ((year - 1972) / 4) + julianSkew_;
  }
  return (year - 1970) * 365 + ((year - 1972) / 4) - ((year - 2000) / 100) + ((year - 2000) / 400);
}

- (int)daysInMonth {
  return [self daysInMonthWithBOOL:[self isLeapYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]] withInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_MONTH]];
}

- (int)daysInMonthWithBOOL:(BOOL)leapYear
                   withInt:(int)month {
  if (leapYear && month == JavaUtilCalendar_FEBRUARY) {
    return [((IOSByteArray *) NIL_CHK(JavaUtilGregorianCalendar_DaysInMonth_)) byteAtIndex:month] + 1;
  }
  return [((IOSByteArray *) NIL_CHK(JavaUtilGregorianCalendar_DaysInMonth_)) byteAtIndex:month];
}

- (int)daysInYearWithInt:(int)year {
  int daysInYear = [self isLeapYearWithInt:year] ? 366 : 365;
  if (year == changeYear_) {
    daysInYear -= currentYearSkew_;
  }
  if (year == changeYear_ - 1) {
    daysInYear -= lastYearSkew_;
  }
  return daysInYear;
}

- (int)daysInYearWithBOOL:(BOOL)leapYear
                  withInt:(int)month {
  if (leapYear && month > JavaUtilCalendar_FEBRUARY) {
    return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_DaysInYear_)) intAtIndex:month] + 1;
  }
  return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_DaysInYear_)) intAtIndex:month];
}

- (BOOL)isEqual:(id)object {
  if (!([object isKindOfClass:[JavaUtilGregorianCalendar class]])) {
    return NO;
  }
  if (object == self) {
    return YES;
  }
  return [super isEqual:object] && gregorianCutover_ == ((JavaUtilGregorianCalendar *) object).gregorianCutover;
}

- (int)getActualMaximumWithInt:(int)field {
  int value;
  if ((value = [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_maximums_)) intAtIndex:field]) == [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_leastMaximums_)) intAtIndex:field]) {
    return value;
  }
  [self complete];
  long long int orgTime = time_;
  int result = 0;
  switch (field) {
    case JavaUtilCalendar_WEEK_OF_YEAR:
    [self setWithInt:JavaUtilCalendar_DATE withInt:31];
    [self setWithInt:JavaUtilCalendar_MONTH withInt:JavaUtilCalendar_DECEMBER];
    result = [self getWithInt:JavaUtilCalendar_WEEK_OF_YEAR];
    if (result == 1) {
      [self setWithInt:JavaUtilCalendar_DATE withInt:31 - 7];
      result = [self getWithInt:JavaUtilCalendar_WEEK_OF_YEAR];
    }
    areFieldsSet_ = NO;
    break;
    case JavaUtilCalendar_WEEK_OF_MONTH:
    [self setWithInt:JavaUtilCalendar_DATE withInt:[self daysInMonth]];
    result = [self getWithInt:JavaUtilCalendar_WEEK_OF_MONTH];
    areFieldsSet_ = NO;
    break;
    case JavaUtilCalendar_DATE:
    return [self daysInMonth];
    case JavaUtilCalendar_DAY_OF_YEAR:
    return [self daysInYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]];
    case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
    result = [self getWithInt:JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH] + (([self daysInMonth] - [self getWithInt:JavaUtilCalendar_DATE]) / 7);
    break;
    case JavaUtilCalendar_YEAR: {
      JavaUtilGregorianCalendar *clone = (JavaUtilGregorianCalendar *) [self clone];
      if ([self getWithInt:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_AD) {
        [((JavaUtilGregorianCalendar *) NIL_CHK(clone)) setTimeInMillisWithLongInt:JavaLangLong_MAX_VALUE];
      }
      else {
        [((JavaUtilGregorianCalendar *) NIL_CHK(clone)) setTimeInMillisWithLongInt:JavaLangLong_MIN_VALUE];
      }
      result = [((JavaUtilGregorianCalendar *) NIL_CHK(clone)) getWithInt:JavaUtilCalendar_YEAR];
      [((JavaUtilGregorianCalendar *) NIL_CHK(clone)) setWithInt:JavaUtilCalendar_YEAR withInt:[self getWithInt:JavaUtilCalendar_YEAR]];
      if ([((JavaUtilGregorianCalendar *) NIL_CHK(clone)) beforeWithId:self]) {
        result--;
      }
      break;
    }
    case JavaUtilCalendar_DST_OFFSET:
    result = [self getMaximumWithInt:JavaUtilCalendar_DST_OFFSET];
    break;
  }
  time_ = orgTime;
  return result;
}

- (int)getActualMinimumWithInt:(int)field {
  return [self getMinimumWithInt:field];
}

- (int)getGreatestMinimumWithInt:(int)field {
  return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_minimums_)) intAtIndex:field];
}

- (JavaUtilDate *)getGregorianChange {
  return [[[JavaUtilDate alloc] initWithLongInt:gregorianCutover_] autorelease];
}

- (int)getLeastMaximumWithInt:(int)field {
  if (gregorianCutover_ != JavaUtilGregorianCalendar_defaultGregorianCutover && field == JavaUtilCalendar_WEEK_OF_YEAR) {
    long long int currentTimeInMillis = time_;
    [self setTimeInMillisWithLongInt:gregorianCutover_];
    int actual = [self getActualMaximumWithInt:field];
    [self setTimeInMillisWithLongInt:currentTimeInMillis];
    return actual;
  }
  return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_leastMaximums_)) intAtIndex:field];
}

- (int)getMaximumWithInt:(int)field {
  return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_maximums_)) intAtIndex:field];
}

- (int)getMinimumWithInt:(int)field {
  return [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_minimums_)) intAtIndex:field];
}

- (int)getOffsetWithLongInt:(long long int)localTime {
  JavaUtilTimeZone *timeZone = [self getTimeZone];
  long long int dayCount = localTime / 86400000;
  int millis = (int) (localTime % 86400000);
  if (millis < 0) {
    millis += 86400000;
    dayCount--;
  }
  int year = 1970;
  long long int days = dayCount;
  if (localTime < gregorianCutover_) {
    days -= julianSkew_;
  }
  int approxYears;
  while ((approxYears = (int) (days / 365)) != 0) {
    year = year + approxYears;
    days = dayCount - [self daysFromBaseYearWithLongInt:year];
  }
  if (days < 0) {
    year = year - 1;
    days = days + 365 + ([self isLeapYearWithInt:year] ? 1 : 0);
    if (year == changeYear_ && localTime < gregorianCutover_) {
      days -= [self julianError];
    }
  }
  if (year <= 0) {
    return [((JavaUtilTimeZone *) NIL_CHK(timeZone)) getRawOffset];
  }
  int dayOfYear = (int) days + 1;
  int month = dayOfYear / 32;
  BOOL leapYear = [self isLeapYearWithInt:year];
  int date = dayOfYear - [self daysInYearWithBOOL:leapYear withInt:month];
  if (date > [self daysInMonthWithBOOL:leapYear withInt:month]) {
    date -= [self daysInMonthWithBOOL:leapYear withInt:month];
    month++;
  }
  int dayOfWeek = [self mod7WithLongInt:dayCount - 3] + 1;
  return [((JavaUtilTimeZone *) NIL_CHK(timeZone)) getOffsetWithInt:JavaUtilGregorianCalendar_AD withInt:year withInt:month withInt:date withInt:dayOfWeek withInt:millis];
}

- (NSUInteger)hash {
  return [super hash] + ((int) ((long long) (((unsigned long long) gregorianCutover_) >> 32)) ^ (int) gregorianCutover_);
}

- (BOOL)isLeapYearWithInt:(int)year {
  if (year > changeYear_) {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
  }
  return year % 4 == 0;
}

- (int)julianError {
  return changeYear_ / 100 - changeYear_ / 400 - 2;
}

- (int)modWithInt:(int)value
          withInt:(int)mod {
  int rem = value % mod;
  if (value < 0 && rem < 0) {
    return rem + mod;
  }
  return rem;
}

- (int)mod7WithLongInt:(long long int)num1 {
  int rem = (int) (num1 % 7);
  if (num1 < 0 && rem < 0) {
    return rem + 7;
  }
  return rem;
}

- (void)rollWithInt:(int)field
            withInt:(int)value {
  if (value == 0) {
    return;
  }
  if (field < 0 || field >= JavaUtilCalendar_ZONE_OFFSET) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  [self complete];
  int days, day, mod, maxWeeks, newWeek;
  int max = -1;
  switch (field) {
    case JavaUtilCalendar_YEAR:
    max = [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_maximums_)) intAtIndex:field];
    break;
    case JavaUtilCalendar_WEEK_OF_YEAR:
    days = [self daysInYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]];
    day = JavaUtilCalendar_DAY_OF_YEAR;
    mod = [self mod7WithLongInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] - [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - ([self getFirstDayOfWeek] - 1)];
    maxWeeks = (days - 1 + mod) / 7 + 1;
    newWeek = [self modWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field] - 1 + value withInt:maxWeeks] + 1;
    if (newWeek == maxWeeks) {
      int addDays = (newWeek - [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field]) * 7;
      if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] > addDays && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] + addDays > days) {
        [self setWithInt:field withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek - 1];
      }
    }
    else if (newWeek == 1) {
      int week = ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - (([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;
      if (week > 1) {
        [self setWithInt:field withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else {
      [self setWithInt:field withInt:newWeek];
    }
    break;
    case JavaUtilCalendar_WEEK_OF_MONTH:
    days = [self daysInMonth];
    day = JavaUtilCalendar_DATE;
    mod = [self mod7WithLongInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DAY_OF_WEEK] - [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - ([self getFirstDayOfWeek] - 1)];
    maxWeeks = (days - 1 + mod) / 7 + 1;
    newWeek = [self modWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field] - 1 + value withInt:maxWeeks] + 1;
    if (newWeek == maxWeeks) {
      if ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] + (newWeek - [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field]) * 7 > days) {
        [self setWithInt:day withInt:days];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else if (newWeek == 1) {
      int week = ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - (([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:day] - 1) / 7 * 7) - 1 + mod) / 7 + 1;
      if (week > 1) {
        [self setWithInt:day withInt:1];
      }
      else {
        [self setWithInt:field withInt:newWeek];
      }
    }
    else {
      [self setWithInt:field withInt:newWeek];
    }
    break;
    case JavaUtilCalendar_DATE:
    max = [self daysInMonth];
    break;
    case JavaUtilCalendar_DAY_OF_YEAR:
    max = [self daysInYearWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_YEAR]];
    break;
    case JavaUtilCalendar_DAY_OF_WEEK:
    max = [((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_maximums_)) intAtIndex:field];
    lastDateFieldSet_ = JavaUtilCalendar_WEEK_OF_MONTH;
    break;
    case JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH:
    max = ([((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] + (([self daysInMonth] - [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE]) / 7 * 7) - 1) / 7 + 1;
    break;
    case JavaUtilCalendar_ERA:
    case JavaUtilCalendar_MONTH:
    case JavaUtilCalendar_AM_PM:
    case JavaUtilCalendar_HOUR:
    case JavaUtilCalendar_HOUR_OF_DAY:
    case JavaUtilCalendar_MINUTE:
    case JavaUtilCalendar_SECOND:
    case JavaUtilCalendar_MILLISECOND:
    [self setWithInt:field withInt:[self modWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field] + value withInt:[((IOSIntArray *) NIL_CHK(JavaUtilGregorianCalendar_maximums_)) intAtIndex:field] + 1]];
    if (field == JavaUtilCalendar_MONTH && [((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:JavaUtilCalendar_DATE] > [self daysInMonth]) {
      [self setWithInt:JavaUtilCalendar_DATE withInt:[self daysInMonth]];
    }
    else if (field == JavaUtilCalendar_AM_PM) {
      lastTimeFieldSet_ = JavaUtilCalendar_HOUR;
    }
    break;
  }
  if (max != -1) {
    [self setWithInt:field withInt:[self modWithInt:[((IOSIntArray *) NIL_CHK(fields_)) intAtIndex:field] - 1 + value withInt:max] + 1];
  }
  [self complete];
}

- (void)rollWithInt:(int)field
           withBOOL:(BOOL)increment {
  [self rollWithInt:field withInt:increment ? 1 : -1];
}

- (void)setGregorianChangeWithJavaUtilDate:(JavaUtilDate *)date {
  gregorianCutover_ = [((JavaUtilDate *) NIL_CHK(date)) getTime];
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithJavaUtilTimeZone:[JavaUtilTimeZone getTimeZoneWithNSString:@"GMT"]] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setTimeWithJavaUtilDate:date];
  changeYear_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getWithInt:JavaUtilCalendar_YEAR];
  if ([((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getWithInt:JavaUtilCalendar_ERA] == JavaUtilGregorianCalendar_BC) {
    changeYear_ = 1 - changeYear_;
  }
  julianSkew_ = ((changeYear_ - 2000) / 400) + [self julianError] - ((changeYear_ - 2000) / 100);
  int dayOfYear = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getWithInt:JavaUtilCalendar_DAY_OF_YEAR];
  if (dayOfYear < julianSkew_) {
    currentYearSkew_ = dayOfYear - 1;
    lastYearSkew_ = julianSkew_ - dayOfYear + 1;
  }
  else {
    lastYearSkew_ = 0;
    currentYearSkew_ = julianSkew_;
  }
}

+ (void)initialize {
  if (self == [JavaUtilGregorianCalendar class]) {
    {
      JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInMonth_, [IOSByteArray arrayWithBytes:(char[]){ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 } count:12]);
    }
    {
      JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_DaysInYear_, [IOSIntArray arrayWithInts:(int[]){ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 } count:12]);
    }
    {
      JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_maximums_, [IOSIntArray arrayWithInts:(int[]){ 1, 292278994, 11, 53, 6, 31, 366, 7, 6, 1, 11, 23, 59, 59, 999, 14 * 3600 * 1000, 7200000 } count:17]);
    }
    {
      JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_minimums_, [IOSIntArray arrayWithInts:(int[]){ 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, -13 * 3600 * 1000, 0 } count:17]);
    }
    {
      JreOperatorRetainedAssign(&JavaUtilGregorianCalendar_leastMaximums_, [IOSIntArray arrayWithInts:(int[]){ 1, 292269054, 11, 50, 3, 28, 355, 7, 3, 1, 11, 23, 59, 59, 999, 50400000, 1200000 } count:17]);
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilGregorianCalendar *typedCopy = (JavaUtilGregorianCalendar *) copy;
  typedCopy.gregorianCutover = gregorianCutover_;
  typedCopy.changeYear = changeYear_;
  typedCopy.julianSkew = julianSkew_;
  typedCopy.currentYearSkew = currentYearSkew_;
  typedCopy.lastYearSkew = lastYearSkew_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
