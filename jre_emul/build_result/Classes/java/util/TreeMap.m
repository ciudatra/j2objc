//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/TreeMap.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/Comparable.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/System.h"
#import "java/util/Collection.h"
#import "java/util/Comparator.h"
#import "java/util/ConcurrentModificationException.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/NoSuchElementException.h"
#import "java/util/Set.h"
#import "java/util/SortedMap.h"
#import "java/util/TreeMap.h"

@implementation JavaUtilTreeMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize size_ = size__;
- (id<JavaUtilComparator>)comparator_ {
  return comparator__;
}
- (void)setComparator_:(id<JavaUtilComparator>)comparator_ {
  JreOperatorRetainedAssign(&comparator__, comparator_);
}
@synthesize comparator_ = comparator__;
@synthesize modCount = modCount_;
- (id<JavaUtilSet>)entrySet_ {
  return entrySet__;
}
- (void)setEntrySet_:(id<JavaUtilSet>)entrySet_ {
  JreOperatorRetainedAssign(&entrySet__, entrySet_);
}
@synthesize entrySet_ = entrySet__;
- (JavaUtilTreeMap_Node *)root {
  return root_;
}
- (void)setRoot:(JavaUtilTreeMap_Node *)root {
  JreOperatorRetainedAssign(&root_, root);
}
@synthesize root = root_;

+ (id<JavaLangComparable>)toComparableWithId:(id)obj {
  if (obj == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return (id<JavaLangComparable>) obj;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (id)initJavaUtilTreeMapWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if ((self = [super init])) {
    self.comparator_ = comparator;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [self initJavaUtilTreeMapWithJavaUtilComparator:comparator];
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    [self putAllWithJavaUtilMap:map];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if ((self = [self initJavaUtilTreeMapWithJavaUtilComparator:[((id<JavaUtilSortedMap>) NIL_CHK(map)) comparator]])) {
    JavaUtilTreeMap_Node *lastNode = nil;
    id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilSortedMap>) NIL_CHK(map)) entrySet]) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(it)) next]);
      lastNode = [self addToLastWithJavaUtilTreeMap_Node:lastNode withId:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey] withId:((id) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue])];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilTreeMap_Node *)addToLastWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)last
                                                     withId:(id)key
                                                     withId:(id)value {
  if (last == nil) {
    JreOperatorRetainedAssign(&root_, last = [self createNodeWithId:key withId:value]);
    size__ = 1;
  }
  else if (last.size == JavaUtilTreeMap_Node_NODE_SIZE) {
    JavaUtilTreeMap_Node *newNode = [self createNodeWithId:key withId:value];
    [self attachToRightWithJavaUtilTreeMap_Node:last withJavaUtilTreeMap_Node:newNode];
    [self balanceWithJavaUtilTreeMap_Node:newNode];
    size__++;
    last = newNode;
  }
  else {
    [self appendFromRightWithJavaUtilTreeMap_Node:last withId:key withId:value];
    size__++;
  }
  return last;
}

- (void)clear {
  JreOperatorRetainedAssign(&root_, nil);
  size__ = 0;
  modCount_++;
}

- (id)clone {
  @try {
    JavaUtilTreeMap *clone = (JavaUtilTreeMap *) [super clone];
    ((JavaUtilTreeMap *) NIL_CHK(clone)).entrySet_ = nil;
    if (root_ != nil) {
      ((JavaUtilTreeMap *) NIL_CHK(clone)).root = ((JavaUtilTreeMap_Node *) [root_ cloneWithJavaUtilTreeMap_Node:nil]);
      JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(clone)).root]);
      while (YES) {
        JavaUtilTreeMap_Node *nxt = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap successorWithJavaUtilTreeMap_Node:node]);
        if (nxt == nil) {
          break;
        }
        ((JavaUtilTreeMap_Node *) NIL_CHK(nxt)).prev = node;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next = nxt;
        node = nxt;
      }
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

+ (JavaUtilTreeMap_Node *)successorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(x)).right != nil) {
    return ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x)).right]);
  }
  JavaUtilTreeMap_Node *y = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
  while (y != nil && x == ((JavaUtilTreeMap_Node *) NIL_CHK(y)).right) {
    x = y;
    y = ((JavaUtilTreeMap_Node *) NIL_CHK(y)).parent;
  }
  return y;
}

- (id<JavaUtilComparator>)comparator {
  return comparator__;
}

- (BOOL)containsKeyWithId:(id)key {
  id<JavaLangComparable> object = comparator__ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) key]) : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else if (result == 0) {
      return YES;
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        return YES;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            return YES;
          }
          else {
            high = mid - 1;
          }
        }
        return NO;
      }
    }
  }
  return NO;
}

- (BOOL)containsValueWithId:(id)value {
  if (root_ == nil) {
    return NO;
  }
  JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:root_]);
  if (value != nil) {
    while (node != nil) {
      int to = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      IOSObjectArray *values = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).values;
      for (int i = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx; i <= to; i++) {
        if ([value isEqual:[((IOSObjectArray *) NIL_CHK(values)) objectAtIndex:i]]) {
          return YES;
        }
      }
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    }
  }
  else {
    while (node != nil) {
      int to = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      IOSObjectArray *values = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).values;
      for (int i = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx; i <= to; i++) {
        if ([((IOSObjectArray *) NIL_CHK(values)) objectAtIndex:i] == nil) {
          return YES;
        }
      }
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    }
  }
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  if (entrySet__ == nil) {
    JreOperatorRetainedAssign(&entrySet__, [[[JavaUtilTreeMap_EntrySet alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return entrySet__;
}

- (id)firstKey {
  if (root_ != nil) {
    JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:root_]);
    return [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx];
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getWithId:(id)key {
  id<JavaLangComparable> object = comparator__ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) key]) : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else if (result == 0) {
      return [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:left_idx];
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        return [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:right_idx];
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            return [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:mid];
          }
          else {
            high = mid - 1;
          }
        }
        return nil;
      }
    }
  }
  return nil;
}

- (int)cmpWithJavaLangComparable:(id<JavaLangComparable>)object
                          withId:(id)key1
                          withId:(id)key2 {
  return object != nil ? [((id<JavaLangComparable>) NIL_CHK(object)) compareToWithId:key2] : [((id<JavaUtilComparator>) NIL_CHK(comparator__)) compareWithId:key1 withId:key2];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  if (comparator__ == nil) {
    [((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:endKey])) compareToWithId:endKey];
  }
  else {
    [comparator__ compareWithId:endKey withId:endKey];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithJavaUtilTreeMap:self withId:endKey] autorelease];
}

- (id<JavaUtilSet>)keySet {
  if (keySet__ == nil) {
    JreOperatorRetainedAssign(&keySet__, [[[JavaUtilTreeMap_KeySet alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return keySet__;
}

- (id)lastKey {
  if (root_ != nil) {
    JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:root_]);
    return [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx];
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

+ (JavaUtilTreeMap_Node *)minimumWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (x == nil) {
    return nil;
  }
  while (((JavaUtilTreeMap_Node *) NIL_CHK(x)).left != nil) {
    x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).left;
  }
  return x;
}

+ (JavaUtilTreeMap_Node *)maximumWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  if (x == nil) {
    return nil;
  }
  while (((JavaUtilTreeMap_Node *) NIL_CHK(x)).right != nil) {
    x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).right;
  }
  return x;
}

- (id)putWithId:(id)key
         withId:(id)value {
  if (root_ == nil) {
    JreOperatorRetainedAssign(&root_, [self createNodeWithId:key withId:value]);
    size__ = 1;
    modCount_++;
    return nil;
  }
  id<JavaLangComparable> object = comparator__ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) key]) : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  JavaUtilTreeMap_Node *prevNode = nil;
  int result = 0;
  while (node != nil) {
    prevNode = node;
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else if (result == 0) {
      id res = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:left_idx];
      [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:value];
      return res;
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        id res = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:right_idx];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:right_idx withObject:value];
        return res;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            id res = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:mid];
            [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:mid withObject:value];
            return res;
          }
          else {
            high = mid - 1;
          }
        }
        result = low;
        break;
      }
    }
  }
  size__++;
  modCount_++;
  if (node == nil) {
    if (prevNode == nil) {
      JreOperatorRetainedAssign(&root_, [self createNodeWithId:key withId:value]);
    }
    else if (prevNode.size < JavaUtilTreeMap_Node_NODE_SIZE) {
      if (result < 0) {
        [self appendFromLeftWithJavaUtilTreeMap_Node:prevNode withId:key withId:value];
      }
      else {
        [self appendFromRightWithJavaUtilTreeMap_Node:prevNode withId:key withId:value];
      }
    }
    else {
      JavaUtilTreeMap_Node *newNode = [self createNodeWithId:key withId:value];
      if (result < 0) {
        [self attachToLeftWithJavaUtilTreeMap_Node:prevNode withJavaUtilTreeMap_Node:newNode];
      }
      else {
        [self attachToRightWithJavaUtilTreeMap_Node:prevNode withJavaUtilTreeMap_Node:newNode];
      }
      [self balanceWithJavaUtilTreeMap_Node:newNode];
    }
  }
  else {
    if (node.size < JavaUtilTreeMap_Node_NODE_SIZE) {
      int left_idx = node.left_idx;
      int right_idx = node.right_idx;
      if (left_idx == 0 || ((right_idx != JavaUtilTreeMap_Node_NODE_SIZE - 1) && (right_idx - result <= result - left_idx))) {
        int right_idxPlus1 = right_idx + 1;
        [JavaLangSystem arraycopyWithId:node.keys withInt:result withId:node.keys withInt:result + 1 withInt:right_idxPlus1 - result];
        [JavaLangSystem arraycopyWithId:node.values withInt:result withId:node.values withInt:result + 1 withInt:right_idxPlus1 - result];
        node.right_idx = right_idxPlus1;
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:result withObject:key];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:result withObject:value];
      }
      else {
        int left_idxMinus1 = left_idx - 1;
        [JavaLangSystem arraycopyWithId:node.keys withInt:left_idx withId:node.keys withInt:left_idxMinus1 withInt:result - left_idx];
        [JavaLangSystem arraycopyWithId:node.values withInt:left_idx withId:node.values withInt:left_idxMinus1 withInt:result - left_idx];
        node.left_idx = left_idxMinus1;
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:result - 1 withObject:key];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:result - 1 withObject:value];
      }
      node.size++;
    }
    else {
      JavaUtilTreeMap_Node *previous = node.prev;
      JavaUtilTreeMap_Node *nextNode = node.next;
      BOOL removeFromStart;
      BOOL attachFromLeft = NO;
      JavaUtilTreeMap_Node *attachHere = nil;
      if (previous == nil) {
        if (nextNode != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(nextNode)).size < JavaUtilTreeMap_Node_NODE_SIZE) {
          removeFromStart = NO;
        }
        else {
          removeFromStart = YES;
          attachFromLeft = YES;
          attachHere = node;
        }
      }
      else if (nextNode == nil) {
        if (((JavaUtilTreeMap_Node *) NIL_CHK(previous)).size < JavaUtilTreeMap_Node_NODE_SIZE) {
          removeFromStart = YES;
        }
        else {
          removeFromStart = NO;
          attachFromLeft = NO;
          attachHere = node;
        }
      }
      else {
        if (((JavaUtilTreeMap_Node *) NIL_CHK(previous)).size < JavaUtilTreeMap_Node_NODE_SIZE) {
          if (nextNode.size < JavaUtilTreeMap_Node_NODE_SIZE) {
            removeFromStart = ((JavaUtilTreeMap_Node *) NIL_CHK(previous)).size < nextNode.size;
          }
          else {
            removeFromStart = YES;
          }
        }
        else {
          if (nextNode.size < JavaUtilTreeMap_Node_NODE_SIZE) {
            removeFromStart = NO;
          }
          else {
            if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).right == nil) {
              attachHere = node;
              attachFromLeft = NO;
              removeFromStart = NO;
            }
            else {
              attachHere = nextNode;
              attachFromLeft = YES;
              removeFromStart = NO;
            }
          }
        }
      }
      id movedKey;
      id movedValue;
      if (removeFromStart) {
        movedKey = [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:0];
        movedValue = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:0];
        int resMunus1 = result - 1;
        [JavaLangSystem arraycopyWithId:node.keys withInt:1 withId:node.keys withInt:0 withInt:resMunus1];
        [JavaLangSystem arraycopyWithId:node.values withInt:1 withId:node.values withInt:0 withInt:resMunus1];
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:resMunus1 withObject:key];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:resMunus1 withObject:value];
      }
      else {
        movedKey = [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:JavaUtilTreeMap_Node_NODE_SIZE - 1];
        movedValue = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:JavaUtilTreeMap_Node_NODE_SIZE - 1];
        [JavaLangSystem arraycopyWithId:node.keys withInt:result withId:node.keys withInt:result + 1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - 1 - result];
        [JavaLangSystem arraycopyWithId:node.values withInt:result withId:node.values withInt:result + 1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - 1 - result];
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:result withObject:key];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:result withObject:value];
      }
      if (attachHere == nil) {
        if (removeFromStart) {
          [self appendFromRightWithJavaUtilTreeMap_Node:previous withId:movedKey withId:movedValue];
        }
        else {
          [self appendFromLeftWithJavaUtilTreeMap_Node:nextNode withId:movedKey withId:movedValue];
        }
      }
      else {
        JavaUtilTreeMap_Node *newNode = [self createNodeWithId:movedKey withId:movedValue];
        if (attachFromLeft) {
          [self attachToLeftWithJavaUtilTreeMap_Node:attachHere withJavaUtilTreeMap_Node:newNode];
        }
        else {
          [self attachToRightWithJavaUtilTreeMap_Node:attachHere withJavaUtilTreeMap_Node:newNode];
        }
        [self balanceWithJavaUtilTreeMap_Node:newNode];
      }
    }
  }
  return nil;
}

- (void)appendFromLeftWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                        withId:(id)keyObj
                                        withId:(id)value {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx == 0) {
    int new_right = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx + 1;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:0 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:1 withInt:new_right];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:0 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:1 withInt:new_right];
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx = new_right;
  }
  else {
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx--;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size++;
  [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx withObject:keyObj];
  [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx withObject:value];
}

- (void)attachToLeftWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                    withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)newNode {
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).parent = node;
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left = newNode;
  JavaUtilTreeMap_Node *predecessor = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).prev = predecessor;
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).next = node;
  if (predecessor != nil) {
    predecessor.next = newNode;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev = newNode;
}

- (void)appendFromRightWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                         withId:(id)keyObj
                                         withId:(id)value {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx == JavaUtilTreeMap_Node_NODE_SIZE - 1) {
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int left_idxMinus1 = left_idx - 1;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idxMinus1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - left_idx];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idxMinus1 withInt:JavaUtilTreeMap_Node_NODE_SIZE - left_idx];
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx = left_idxMinus1;
  }
  else {
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx++;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size++;
  [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:keyObj];
  [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:value];
}

- (void)attachToRightWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)newNode {
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).parent = node;
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right = newNode;
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).prev = node;
  JavaUtilTreeMap_Node *successor = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
  ((JavaUtilTreeMap_Node *) NIL_CHK(newNode)).next = successor;
  if (successor != nil) {
    successor.prev = newNode;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next = newNode;
}

- (JavaUtilTreeMap_Node *)createNodeWithId:(id)keyObj
                                    withId:(id)value {
  JavaUtilTreeMap_Node *node = [[[JavaUtilTreeMap_Node alloc] init] autorelease];
  [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:0 withObject:keyObj];
  [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:0 withObject:value];
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx = 0;
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx = 0;
  ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size = 1;
  return node;
}

- (void)balanceWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y;
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).color = YES;
  while (x != root_ && ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color) {
    if (((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent == ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).left) {
      y = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).right;
      if (y != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(y)).color) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(y)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).color = YES;
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).parent;
      }
      else {
        if (x == ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).right) {
          x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
          [self leftRotateWithJavaUtilTreeMap_Node:x];
        }
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).color = YES;
        [self rightRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).parent];
      }
    }
    else {
      y = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).left;
      if (y != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(y)).color) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(y)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).color = YES;
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).parent;
      }
      else {
        if (x == ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).left) {
          x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
          [self rightRotateWithJavaUtilTreeMap_Node:x];
        }
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent.parent)).color = YES;
        [self leftRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).parent];
      }
    }
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(root_)).color = NO;
}

- (void)rightRotateWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).left;
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).left = ((JavaUtilTreeMap_Node *) NIL_CHK(y)).right;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(y)).right != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(y)).right.parent = x;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(y)).parent = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent == nil) {
    JreOperatorRetainedAssign(&root_, y);
  }
  else {
    if (x == ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.right) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.right = y;
    }
    else {
      ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.left = y;
    }
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(y)).right = x;
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent = y;
}

- (void)leftRotateWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *y = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).right;
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).right = ((JavaUtilTreeMap_Node *) NIL_CHK(y)).left;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(y)).left != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(y)).left.parent = x;
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(y)).parent = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent == nil) {
    JreOperatorRetainedAssign(&root_, y);
  }
  else {
    if (x == ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.left) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.left = y;
    }
    else {
      ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent.right = y;
    }
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(y)).left = x;
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent = y;
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  [super putAllWithJavaUtilMap:map];
}

- (id)removeWithId:(id)key {
  if (size__ == 0) {
    return nil;
  }
  id<JavaLangComparable> object = comparator__ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) key]) : nil;
  id keyK = (id) key;
  JavaUtilTreeMap_Node *node = root_;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else if (result == 0) {
      id value = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:left_idx];
      [self removeLeftmostWithJavaUtilTreeMap_Node:node];
      return value;
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        id value = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:right_idx];
        [self removeRightmostWithJavaUtilTreeMap_Node:node];
        return value;
      }
      else {
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [self cmpWithJavaLangComparable:object withId:keyK withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            id value = [((IOSObjectArray *) NIL_CHK(node.values)) objectAtIndex:mid];
            [self removeMiddleElementWithJavaUtilTreeMap_Node:node withInt:mid];
            return value;
          }
          else {
            high = mid - 1;
          }
        }
        return nil;
      }
    }
  }
  return nil;
}

- (void)removeLeftmostWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  int index = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).size == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - ((JavaUtilTreeMap_Node *) NIL_CHK(node.prev)).right_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
    int len = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).keys withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).values withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx += len;
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).next != nil && (((JavaUtilTreeMap_Node *) NIL_CHK(node.next)).left_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    int len = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
    int next_new_left = ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx - len;
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx = next_new_left;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).keys withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).values withInt:next_new_left withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).size += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:index withObject:nil];
    [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:index withObject:nil];
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx++;
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
    JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
    if (prev != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size == 1) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size++;
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx--;
      [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
      [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
      [self deleteNodeWithJavaUtilTreeMap_Node:prev];
    }
  }
  modCount_++;
  size__--;
}

- (void)removeRightmostWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  int index = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).size == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - ((JavaUtilTreeMap_Node *) NIL_CHK(node.prev)).right_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).keys withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).values withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx += len;
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).next != nil && (((JavaUtilTreeMap_Node *) NIL_CHK(node.next)).left_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int len = index - left_idx;
    int next_new_left = ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx - len;
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx = next_new_left;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).keys withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).values withInt:next_new_left withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).size += len;
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:index withObject:nil];
    [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:index withObject:nil];
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx--;
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
    JavaUtilTreeMap_Node *next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    if (next != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(next)).size == 1) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size++;
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx++;
      [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:[((IOSObjectArray *) NIL_CHK(next.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx]];
      [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:[((IOSObjectArray *) NIL_CHK(next.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx]];
      [self deleteNodeWithJavaUtilTreeMap_Node:next];
    }
  }
  modCount_++;
  size__--;
}

- (void)removeMiddleElementWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                            withInt:(int)index {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev != nil && (JavaUtilTreeMap_Node_NODE_SIZE - 1 - ((JavaUtilTreeMap_Node *) NIL_CHK(node.prev)).right_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).keys withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).values withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx += len;
    len = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).keys withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).values withInt:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx + 1 withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).right_idx += len;
    ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size += (((JavaUtilTreeMap_Node *) NIL_CHK(node)).size - 1);
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).next != nil && (((JavaUtilTreeMap_Node *) NIL_CHK(node.next)).left_idx) > ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size) {
    JavaUtilTreeMap_Node *next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int next_new_left = ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx - ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size + 1;
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx = next_new_left;
    int len = index - left_idx;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).keys withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).values withInt:next_new_left withInt:len];
    next_new_left += len;
    len = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).keys withInt:next_new_left withInt:len];
    [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(next)).values withInt:next_new_left withInt:len];
    ((JavaUtilTreeMap_Node *) NIL_CHK(next)).size += (((JavaUtilTreeMap_Node *) NIL_CHK(node)).size - 1);
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    int moveFromRight = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int moveFromLeft = index - left_idx;
    if (moveFromRight <= moveFromLeft) {
      [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index withInt:moveFromRight];
      [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index withInt:moveFromRight];
      JavaUtilTreeMap_Node *next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
      if (next != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(next)).size == 1) {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:[((IOSObjectArray *) NIL_CHK(next.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx]];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:[((IOSObjectArray *) NIL_CHK(next.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(next)).left_idx]];
        [self deleteNodeWithJavaUtilTreeMap_Node:next];
      }
      else {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:nil];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:nil];
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx--;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
      }
    }
    else {
      [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx + 1 withInt:moveFromLeft];
      [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx + 1 withInt:moveFromLeft];
      JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
      if (prev != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size == 1) {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
        [self deleteNodeWithJavaUtilTreeMap_Node:prev];
      }
      else {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:nil];
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx++;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
      }
    }
  }
  modCount_++;
  size__--;
}

- (void)removeFromIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                           withInt:(int)index {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).size == 1) {
    [self deleteNodeWithJavaUtilTreeMap_Node:node];
  }
  else {
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    if (index == left_idx) {
      JavaUtilTreeMap_Node *prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
      if (prev != nil && ((JavaUtilTreeMap_Node *) NIL_CHK(prev)).size == 1) {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:[((IOSObjectArray *) NIL_CHK(prev.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(prev)).left_idx]];
        [self deleteNodeWithJavaUtilTreeMap_Node:prev];
      }
      else {
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:nil];
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx++;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
      }
    }
    else if (index == ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx) {
      [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:index withObject:nil];
      [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:index withObject:nil];
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx--;
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
    }
    else {
      int moveFromRight = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx - index;
      int moveFromLeft = index - left_idx;
      if (moveFromRight <= moveFromLeft) {
        [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:index withInt:moveFromRight];
        [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index + 1 withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:index withInt:moveFromRight];
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:nil];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx withObject:nil];
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx--;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
      }
      else {
        [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys withInt:left_idx + 1 withInt:moveFromLeft];
        [JavaLangSystem arraycopyWithId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx withId:((JavaUtilTreeMap_Node *) NIL_CHK(node)).values withInt:left_idx + 1 withInt:moveFromLeft];
        [((IOSObjectArray *) NIL_CHK(node.keys)) replaceObjectAtIndex:left_idx withObject:nil];
        [((IOSObjectArray *) NIL_CHK(node.values)) replaceObjectAtIndex:left_idx withObject:nil];
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx++;
        ((JavaUtilTreeMap_Node *) NIL_CHK(node)).size--;
      }
    }
  }
  modCount_++;
  size__--;
}

- (void)deleteNodeWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).right == nil) {
    if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).left != nil) {
      [self attachToParentWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left];
    }
    else {
      [self attachNullToParentWithJavaUtilTreeMap_Node:node];
    }
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
  }
  else if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).left == nil) {
    [self attachToParentWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right];
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
  }
  else {
    JavaUtilTreeMap_Node *toMoveUp = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
    [self fixNextChainWithJavaUtilTreeMap_Node:node];
    if (((JavaUtilTreeMap_Node *) NIL_CHK(toMoveUp)).right == nil) {
      [self attachNullToParentWithJavaUtilTreeMap_Node:toMoveUp];
    }
    else {
      [self attachToParentWithJavaUtilTreeMap_Node:toMoveUp withJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(toMoveUp)).right];
    }
    ((JavaUtilTreeMap_Node *) NIL_CHK(toMoveUp)).left = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).left != nil) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left.parent = toMoveUp;
    }
    ((JavaUtilTreeMap_Node *) NIL_CHK(toMoveUp)).right = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
    if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).right != nil) {
      ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right.parent = toMoveUp;
    }
    [self attachToParentNoFixupWithJavaUtilTreeMap_Node:node withJavaUtilTreeMap_Node:toMoveUp];
    ((JavaUtilTreeMap_Node *) NIL_CHK(toMoveUp)).color = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).color;
  }
}

- (void)attachToParentNoFixupWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete
                             withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toConnect {
  JavaUtilTreeMap_Node *parent = ((JavaUtilTreeMap_Node *) NIL_CHK(toDelete)).parent;
  ((JavaUtilTreeMap_Node *) NIL_CHK(toConnect)).parent = parent;
  if (parent == nil) {
    JreOperatorRetainedAssign(&root_, toConnect);
  }
  else if (toDelete == parent.left) {
    parent.left = toConnect;
  }
  else {
    parent.right = toConnect;
  }
}

- (void)attachToParentWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete
                      withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toConnect {
  [self attachToParentNoFixupWithJavaUtilTreeMap_Node:toDelete withJavaUtilTreeMap_Node:toConnect];
  if (!((JavaUtilTreeMap_Node *) NIL_CHK(toDelete)).color) {
    [self fixupWithJavaUtilTreeMap_Node:toConnect];
  }
}

- (void)attachNullToParentWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)toDelete {
  JavaUtilTreeMap_Node *parent = ((JavaUtilTreeMap_Node *) NIL_CHK(toDelete)).parent;
  if (parent == nil) {
    JreOperatorRetainedAssign(&root_, nil);
  }
  else {
    if (toDelete == parent.left) {
      parent.left = nil;
    }
    else {
      parent.right = nil;
    }
    if (!((JavaUtilTreeMap_Node *) NIL_CHK(toDelete)).color) {
      [self fixupWithJavaUtilTreeMap_Node:parent];
    }
  }
}

- (void)fixNextChainWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node {
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev.next = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next;
  }
  if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).next != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(node)).next.prev = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
  }
}

- (void)fixupWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)x {
  JavaUtilTreeMap_Node *w;
  while (x != root_ && !((JavaUtilTreeMap_Node *) NIL_CHK(x)).color) {
    if (x == ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).left) {
      w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).right;
      if (w == nil) {
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
        continue;
      }
      if (((JavaUtilTreeMap_Node *) NIL_CHK(w)).color) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = YES;
        [self leftRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent];
        w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).right;
        if (w == nil) {
          x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
          continue;
        }
      }
      if ((((JavaUtilTreeMap_Node *) NIL_CHK(w)).left == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.left)).color) && (((JavaUtilTreeMap_Node *) NIL_CHK(w)).right == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.right)).color)) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = YES;
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
      }
      else {
        if (((JavaUtilTreeMap_Node *) NIL_CHK(w)).right == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.right)).color) {
          ((JavaUtilTreeMap_Node *) NIL_CHK(w.left)).color = NO;
          ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = YES;
          [self rightRotateWithJavaUtilTreeMap_Node:w];
          w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).right;
        }
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(w.right)).color = NO;
        [self leftRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent];
        x = root_;
      }
    }
    else {
      w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).left;
      if (w == nil) {
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
        continue;
      }
      if (((JavaUtilTreeMap_Node *) NIL_CHK(w)).color) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = YES;
        [self rightRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent];
        w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).left;
        if (w == nil) {
          x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
          continue;
        }
      }
      if ((((JavaUtilTreeMap_Node *) NIL_CHK(w)).left == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.left)).color) && (((JavaUtilTreeMap_Node *) NIL_CHK(w)).right == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.right)).color)) {
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = YES;
        x = ((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent;
      }
      else {
        if (((JavaUtilTreeMap_Node *) NIL_CHK(w)).left == nil || !((JavaUtilTreeMap_Node *) NIL_CHK(w.left)).color) {
          ((JavaUtilTreeMap_Node *) NIL_CHK(w.right)).color = NO;
          ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = YES;
          [self leftRotateWithJavaUtilTreeMap_Node:w];
          w = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).left;
        }
        ((JavaUtilTreeMap_Node *) NIL_CHK(w)).color = ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color;
        ((JavaUtilTreeMap_Node *) NIL_CHK(x.parent)).color = NO;
        ((JavaUtilTreeMap_Node *) NIL_CHK(w.left)).color = NO;
        [self rightRotateWithJavaUtilTreeMap_Node:((JavaUtilTreeMap_Node *) NIL_CHK(x)).parent];
        x = root_;
      }
    }
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(x)).color = NO;
}

- (int)size {
  return size__;
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  if (comparator__ == nil) {
    if ([((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self withId:endKey] autorelease];
    }
  }
  else {
    if ([comparator__ compareWithId:startKey withId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self withId:endKey] autorelease];
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  if (comparator__ == nil) {
    [((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:startKey];
  }
  else {
    [comparator__ compareWithId:startKey withId:startKey];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:self] autorelease];
}

- (id<JavaUtilCollection>)values {
  if (valuesCollection_ == nil) {
    JreOperatorRetainedAssign(&valuesCollection_, [[[JavaUtilTreeMap_ValuesCollection alloc] initWithJavaUtilTreeMap:self] autorelease]);
  }
  return valuesCollection_;
}

- (JavaUtilTreeMap_MapEntry *)newMapEntryWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                                          withInt:(int)offset OBJC_METHOD_FAMILY_NONE {
  return [[[JavaUtilTreeMap_MapEntry alloc] initWithJavaUtilTreeMap:self withJavaUtilTreeMap_Node:node withInt:offset] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&root_, nil);
  JreOperatorRetainedAssign(&entrySet__, nil);
  JreOperatorRetainedAssign(&comparator__, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap *typedCopy = (JavaUtilTreeMap *) copy;
  typedCopy.size_ = size__;
  typedCopy.comparator_ = comparator__;
  typedCopy.modCount = modCount_;
  typedCopy.entrySet_ = entrySet__;
  typedCopy.root = root_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:comparator__ name:@"comparator_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:entrySet__ name:@"entrySet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:root_ name:@"root"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_MapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilTreeMap *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize offset = offset_;
- (JavaUtilTreeMap_Node *)node {
  return node_;
}
- (void)setNode:(JavaUtilTreeMap_Node *)node {
  JreOperatorRetainedAssign(&node_, node);
}
@synthesize node = node_;
- (id)key {
  return key_;
}
- (void)setKey:(id)key {
  JreOperatorRetainedAssign(&key_, key);
}
@synthesize key = key_;

- (id)initJavaUtilTreeMap_MapEntryWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
                             withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                                              withInt:(int)offset {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    self.node = node;
    self.offset = offset;
    JreOperatorRetainedAssign(&key_, [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:offset]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)node
                      withInt:(int)offset {
  return [self initJavaUtilTreeMap_MapEntryWithJavaUtilTreeMap:outer$ withJavaUtilTreeMap_Node:node withInt:offset];
}

- (id)clone {
  @try {
    return (id) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id value = [self getValue];
    return (key_ == nil ? [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey] == nil : [NIL_CHK(key_) isEqual:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey]]) && (value == nil ? [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue] == nil : [NIL_CHK(value) isEqual:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue]]);
  }
  return NO;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  if ([((IOSObjectArray *) NIL_CHK(node_.keys)) objectAtIndex:offset_] == key_) {
    return [((IOSObjectArray *) NIL_CHK(node_.values)) objectAtIndex:offset_];
  }
  if ([this$0_ containsKeyWithId:key_]) {
    return [this$0_ getWithId:key_];
  }
  @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
}

- (NSUInteger)hash {
  id value = [self getValue];
  return (key_ == nil ? 0 : [NIL_CHK(key_) hash]) ^ (value == nil ? 0 : [NIL_CHK(value) hash]);
}

- (id)setValueWithId:(id)object {
  if ([((IOSObjectArray *) NIL_CHK(node_.keys)) objectAtIndex:offset_] == key_) {
    id res = [((IOSObjectArray *) NIL_CHK(node_.values)) objectAtIndex:offset_];
    [((IOSObjectArray *) NIL_CHK(node_.values)) replaceObjectAtIndex:offset_ withObject:object];
    return res;
  }
  if ([this$0_ containsKeyWithId:key_]) {
    return [this$0_ putWithId:key_ withId:object];
  }
  @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", key_, [self getValue]];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&key_, nil);
  JreOperatorRetainedAssign(&node_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_MapEntry *typedCopy = (JavaUtilTreeMap_MapEntry *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.offset = offset_;
  typedCopy.node = node_;
  typedCopy.key = key_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:node_ name:@"node"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:key_ name:@"key"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_Node

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap_Node *)prev {
  return prev_;
}
@synthesize prev = prev_;
- (JavaUtilTreeMap_Node *)next {
  return next_;
}
- (void)setNext:(JavaUtilTreeMap_Node *)next {
  JreOperatorRetainedAssign(&next_, next);
}
@synthesize next = next_;
- (JavaUtilTreeMap_Node *)parent {
  return parent_;
}
@synthesize parent = parent_;
- (JavaUtilTreeMap_Node *)left {
  return left_;
}
- (void)setLeft:(JavaUtilTreeMap_Node *)left {
  JreOperatorRetainedAssign(&left_, left);
}
@synthesize left = left_;
- (JavaUtilTreeMap_Node *)right {
  return right_;
}
- (void)setRight:(JavaUtilTreeMap_Node *)right {
  JreOperatorRetainedAssign(&right_, right);
}
@synthesize right = right_;
- (IOSObjectArray *)values {
  return values_;
}
- (void)setValues:(IOSObjectArray *)values {
  JreOperatorRetainedAssign(&values_, values);
}
@synthesize values = values_;
- (IOSObjectArray *)keys {
  return keys_;
}
- (void)setKeys:(IOSObjectArray *)keys {
  JreOperatorRetainedAssign(&keys_, keys);
}
@synthesize keys = keys_;
@synthesize left_idx = left_idx_;
@synthesize right_idx = right_idx_;
@synthesize size = size_;
@synthesize color = color_;

+ (int)NODE_SIZE {
  return JavaUtilTreeMap_Node_NODE_SIZE;
}

- (id)init {
  if ((self = [super init])) {
    left_idx_ = 0;
    right_idx_ = -1;
    size_ = 0;
    JreOperatorRetainedAssign(&keys_, (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]] autorelease]);
    JreOperatorRetainedAssign(&values_, (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (JavaUtilTreeMap_Node *)cloneWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)parent {
  JavaUtilTreeMap_Node *clone = (JavaUtilTreeMap_Node *) [super clone];
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).keys = (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]] autorelease];
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).values = (IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:JavaUtilTreeMap_Node_NODE_SIZE type:[IOSClass classWithClass:[NSObject class]]] autorelease];
  [JavaLangSystem arraycopyWithId:keys_ withInt:0 withId:((JavaUtilTreeMap_Node *) NIL_CHK(clone)).keys withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(keys_)) count]];
  [JavaLangSystem arraycopyWithId:values_ withInt:0 withId:((JavaUtilTreeMap_Node *) NIL_CHK(clone)).values withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(values_)) count]];
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).left_idx = left_idx_;
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).right_idx = right_idx_;
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).parent = parent;
  if (left_ != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).left = [left_ cloneWithJavaUtilTreeMap_Node:clone];
  }
  if (right_ != nil) {
    ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).right = [right_ cloneWithJavaUtilTreeMap_Node:clone];
  }
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).prev = nil;
  ((JavaUtilTreeMap_Node *) NIL_CHK(clone)).next = nil;
  return clone;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&keys_, nil);
  JreOperatorRetainedAssign(&values_, nil);
  JreOperatorRetainedAssign(&right_, nil);
  JreOperatorRetainedAssign(&left_, nil);
  JreOperatorRetainedAssign(&next_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_Node *typedCopy = (JavaUtilTreeMap_Node *) copy;
  typedCopy.prev = prev_;
  typedCopy.next = next_;
  typedCopy.parent = parent_;
  typedCopy.left = left_;
  typedCopy.right = right_;
  typedCopy.values = values_;
  typedCopy.keys = keys_;
  typedCopy.left_idx = left_idx_;
  typedCopy.right_idx = right_idx_;
  typedCopy.size = size_;
  typedCopy.color = color_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:next_ name:@"next"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:left_ name:@"left"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:right_ name:@"right"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:values_ name:@"values"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:keys_ name:@"keys"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_AbstractMapIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)backingMap {
  return backingMap_;
}
- (void)setBackingMap:(JavaUtilTreeMap *)backingMap {
  JreOperatorRetainedAssign(&backingMap_, backingMap);
}
@synthesize backingMap = backingMap_;
@synthesize expectedModCount = expectedModCount_;
- (JavaUtilTreeMap_Node *)node {
  return node_;
}
- (void)setNode:(JavaUtilTreeMap_Node *)node {
  JreOperatorRetainedAssign(&node_, node);
}
@synthesize node = node_;
- (JavaUtilTreeMap_Node *)lastNode {
  return lastNode_;
}
- (void)setLastNode:(JavaUtilTreeMap_Node *)lastNode {
  JreOperatorRetainedAssign(&lastNode_, lastNode);
}
@synthesize lastNode = lastNode_;
@synthesize offset = offset_;
@synthesize lastOffset = lastOffset_;

- (id)initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                        withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                         withInt:(int)startOffset {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&backingMap_, map);
    expectedModCount_ = ((JavaUtilTreeMap *) NIL_CHK(map)).modCount;
    JreOperatorRetainedAssign(&node_, startNode);
    offset_ = startOffset;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                        withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode {
  return JreMemDebugAdd([self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startNode != nil ? ((JavaUtilTreeMap_Node *) NIL_CHK(startNode)).right_idx - ((JavaUtilTreeMap_Node *) NIL_CHK(startNode)).left_idx : 0]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode {
  return [self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([self initJavaUtilTreeMap_AbstractMapIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:[JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(map)).root]]);
}

- (BOOL)hasNext {
  return node_ != nil;
}

- (void)makeNext {
  if (expectedModCount_ != ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount) {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
  else if (node_ == nil) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  JreOperatorRetainedAssign(&lastNode_, node_);
  lastOffset_ = offset_;
  if (offset_ != 0) {
    offset_--;
  }
  else {
    JreOperatorRetainedAssign(&node_, ((JavaUtilTreeMap_Node *) NIL_CHK(node_)).next);
    if (node_ != nil) {
      offset_ = node_.right_idx - node_.left_idx;
    }
  }
}

- (void)remove {
  if (expectedModCount_ == ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount) {
    if (lastNode_ != nil) {
      int idx = lastNode_.right_idx - lastOffset_;
      [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) removeFromIteratorWithJavaUtilTreeMap_Node:lastNode_ withInt:idx];
      JreOperatorRetainedAssign(&lastNode_, nil);
      expectedModCount_++;
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&lastNode_, nil);
  JreOperatorRetainedAssign(&node_, nil);
  JreOperatorRetainedAssign(&backingMap_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_AbstractMapIterator *typedCopy = (JavaUtilTreeMap_AbstractMapIterator *) copy;
  typedCopy.backingMap = backingMap_;
  typedCopy.expectedModCount = expectedModCount_;
  typedCopy.node = node_;
  typedCopy.lastNode = lastNode_;
  typedCopy.offset = offset_;
  typedCopy.lastOffset = lastOffset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:node_ name:@"node"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lastNode_ name:@"lastNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_UnboundedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedEntryIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                           withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                            withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedEntryIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id<JavaUtilMap_Entry>)next {
  [self makeNext];
  int idx = ((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_;
  return ((JavaUtilTreeMap_MapEntry *) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) newMapEntryWithJavaUtilTreeMap_Node:lastNode_ withInt:idx]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_UnboundedKeyIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedKeyIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                         withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                          withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedKeyIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id)next {
  [self makeNext];
  return [((IOSObjectArray *) NIL_CHK(lastNode_.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_UnboundedValueIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_UnboundedValueIteratorWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                           withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                            withInt:(int)startOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset]);
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
     withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                      withInt:(int)startOffset {
  return [self initJavaUtilTreeMap_UnboundedValueIteratorWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:startNode withInt:startOffset];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap:map]);
}

- (id)next {
  [self makeNext];
  return [((IOSObjectArray *) NIL_CHK(lastNode_.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_BoundedMapIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap_Node *)finalNode {
  return finalNode_;
}
- (void)setFinalNode:(JavaUtilTreeMap_Node *)finalNode {
  JreOperatorRetainedAssign(&finalNode_, finalNode);
}
@synthesize finalNode = finalNode_;
@synthesize finalOffset = finalOffset_;

- (id)initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                             withInt:(int)startOffset
                                                 withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                            withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                             withInt:(int)finalOffset {
  if ((self = [super initWithJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode == nil ? nil : startNode withInt:startOffset])) {
    self.finalNode = finalNode;
    self.finalOffset = finalOffset;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return JreMemDebugAdd([self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startNode != nil ? ((JavaUtilTreeMap_Node *) NIL_CHK(startNode)).right_idx - ((JavaUtilTreeMap_Node *) NIL_CHK(startNode)).left_idx : 0 withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode {
  return JreMemDebugAdd([self initJavaUtilTreeMap_BoundedMapIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:((JavaUtilTreeMap_Node *) NIL_CHK(finalNode)).right_idx - ((JavaUtilTreeMap_Node *) NIL_CHK(finalNode)).left_idx]);
}

- (void)makeBoundedNext {
  [self makeNext];
  if (lastNode_ == finalNode_ && lastOffset_ == finalOffset_) {
    JreOperatorRetainedAssign(&node_, nil);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&finalNode_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_BoundedMapIterator *typedCopy = (JavaUtilTreeMap_BoundedMapIterator *) copy;
  typedCopy.finalNode = finalNode_;
  typedCopy.finalOffset = finalOffset_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:finalNode_ name:@"finalNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_BoundedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedEntryIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                               withInt:(int)startOffset
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                              withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                               withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedEntryIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id<JavaUtilMap_Entry>)next {
  [self makeBoundedNext];
  int idx = ((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_;
  return ((JavaUtilTreeMap_MapEntry *) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) newMapEntryWithJavaUtilTreeMap_Node:lastNode_ withInt:idx]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_BoundedKeyIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedKeyIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                             withInt:(int)startOffset
                                                 withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                            withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                             withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedKeyIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)next {
  [self makeBoundedNext];
  return [((IOSObjectArray *) NIL_CHK(lastNode_.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_BoundedValueIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initJavaUtilTreeMap_BoundedValueIteratorWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                                                               withInt:(int)startOffset
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)map
                                              withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                                                               withInt:(int)finalOffset {
  return JreMemDebugAdd([super initWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset]);
}

- (id)initWithJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)startNode
                           withInt:(int)startOffset
               withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withJavaUtilTreeMap_Node:(JavaUtilTreeMap_Node *)finalNode
                           withInt:(int)finalOffset {
  return [self initJavaUtilTreeMap_BoundedValueIteratorWithJavaUtilTreeMap_Node:startNode withInt:startOffset withJavaUtilTreeMap:map withJavaUtilTreeMap_Node:finalNode withInt:finalOffset];
}

- (id)next {
  [self makeBoundedNext];
  return [((IOSObjectArray *) NIL_CHK(lastNode_.values)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(lastNode_)).right_idx - lastOffset_];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilTreeMap_SubMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)backingMap {
  return backingMap_;
}
- (void)setBackingMap:(JavaUtilTreeMap *)backingMap {
  JreOperatorRetainedAssign(&backingMap_, backingMap);
}
@synthesize backingMap = backingMap_;
@synthesize hasStart = hasStart_;
@synthesize hasEnd = hasEnd_;
- (id)startKey {
  return startKey_;
}
- (void)setStartKey:(id)startKey {
  JreOperatorRetainedAssign(&startKey_, startKey);
}
@synthesize startKey = startKey_;
- (id)endKey {
  return endKey_;
}
- (void)setEndKey:(id)endKey {
  JreOperatorRetainedAssign(&endKey_, endKey);
}
@synthesize endKey = endKey_;
- (id<JavaUtilSet>)entrySet_ {
  return entrySet__;
}
- (void)setEntrySet_:(id<JavaUtilSet>)entrySet_ {
  JreOperatorRetainedAssign(&entrySet__, entrySet_);
}
@synthesize entrySet_ = entrySet__;
@synthesize firstKeyModCount = firstKeyModCount_;
@synthesize lastKeyModCount = lastKeyModCount_;
- (JavaUtilTreeMap_Node *)firstKeyNode {
  return firstKeyNode_;
}
- (void)setFirstKeyNode:(JavaUtilTreeMap_Node *)firstKeyNode {
  JreOperatorRetainedAssign(&firstKeyNode_, firstKeyNode);
}
@synthesize firstKeyNode = firstKeyNode_;
@synthesize firstKeyIndex = firstKeyIndex_;
- (JavaUtilTreeMap_Node *)lastKeyNode {
  return lastKeyNode_;
}
- (void)setLastKeyNode:(JavaUtilTreeMap_Node *)lastKeyNode {
  JreOperatorRetainedAssign(&lastKeyNode_, lastKeyNode);
}
@synthesize lastKeyNode = lastKeyNode_;
@synthesize lastKeyIndex = lastKeyIndex_;

- (id)initWithId:(id)start
withJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&entrySet__, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JreOperatorRetainedAssign(&backingMap_, map);
    hasStart_ = YES;
    JreOperatorRetainedAssign(&startKey_, start);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithId:(id)start
withJavaUtilTreeMap:(JavaUtilTreeMap *)map
          withId:(id)end {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&entrySet__, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JreOperatorRetainedAssign(&backingMap_, map);
    hasStart_ = hasEnd_ = YES;
    JreOperatorRetainedAssign(&startKey_, start);
    JreOperatorRetainedAssign(&endKey_, end);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map
                       withId:(id)end {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&entrySet__, nil);
    firstKeyModCount_ = -1;
    lastKeyModCount_ = -1;
    JreOperatorRetainedAssign(&backingMap_, map);
    hasEnd_ = YES;
    JreOperatorRetainedAssign(&endKey_, end);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)checkRangeWithId:(id)key {
  id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_;
  if (cmp == nil) {
    id<JavaLangComparable> object = ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:key]);
    if (hasStart_ && [((id<JavaLangComparable>) NIL_CHK(object)) compareToWithId:startKey_] < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (hasEnd_ && [((id<JavaLangComparable>) NIL_CHK(object)) compareToWithId:endKey_] > 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
  else {
    if (hasStart_ && [((id<JavaUtilComparator>) ((id<JavaUtilComparator>) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) comparator])) compareWithId:key withId:startKey_] < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (hasEnd_ && [((id<JavaUtilComparator>) ((id<JavaUtilComparator>) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) comparator])) compareWithId:key withId:endKey_] > 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
  }
}

- (BOOL)isInRangeWithId:(id)key {
  id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_;
  if (cmp == nil) {
    id<JavaLangComparable> object = ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:key]);
    if (hasStart_ && [((id<JavaLangComparable>) NIL_CHK(object)) compareToWithId:startKey_] < 0) {
      return NO;
    }
    if (hasEnd_ && [((id<JavaLangComparable>) NIL_CHK(object)) compareToWithId:endKey_] >= 0) {
      return NO;
    }
  }
  else {
    if (hasStart_ && [cmp compareWithId:key withId:startKey_] < 0) {
      return NO;
    }
    if (hasEnd_ && [cmp compareWithId:key withId:endKey_] >= 0) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)checkUpperBoundWithId:(id)key {
  if (hasEnd_) {
    id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_;
    if (cmp == nil) {
      return ([((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:key])) compareToWithId:endKey_] < 0);
    }
    return ([((id<JavaUtilComparator>) NIL_CHK(cmp)) compareWithId:key withId:endKey_] < 0);
  }
  return YES;
}

- (BOOL)checkLowerBoundWithId:(id)key {
  if (hasStart_) {
    id<JavaUtilComparator> cmp = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_;
    if (cmp == nil) {
      return ([((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:key])) compareToWithId:startKey_] >= 0);
    }
    return ([((id<JavaUtilComparator>) NIL_CHK(cmp)) compareWithId:key withId:startKey_] >= 0);
  }
  return YES;
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) comparator]);
}

- (BOOL)containsKeyWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) containsKeyWithId:key];
  }
  return NO;
}

- (void)clear {
  [((id<JavaUtilSet>) [self keySet]) clear];
}

- (BOOL)containsValueWithId:(id)value {
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [[self values] iterator]);
  if (value != nil) {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([value isEqual:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([((id<JavaUtilIterator>) NIL_CHK(it)) next] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  if (entrySet__ == nil) {
    JreOperatorRetainedAssign(&entrySet__, [[[JavaUtilTreeMap_SubMapEntrySet alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return entrySet__;
}

- (void)setFirstKey {
  if (firstKeyModCount_ == ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount) {
    return;
  }
  id<JavaLangComparable> object = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) startKey_]) : nil;
  id key = (id) startKey_;
  JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root;
  JavaUtilTreeMap_Node *foundNode = nil;
  int foundIndex = -1;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result < 0) {
      foundNode = node;
      foundIndex = left_idx;
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else if (result == 0) {
      foundNode = node;
      foundIndex = left_idx;
      break;
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        foundNode = node;
        foundIndex = right_idx;
        break;
      }
      else {
        foundNode = node;
        foundIndex = right_idx;
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            low = mid + 1;
          }
          else if (result == 0) {
            foundNode = node;
            foundIndex = mid;
            goto break_TOP_LOOP;
          }
          else {
            foundNode = node;
            foundIndex = mid;
            high = mid - 1;
          }
        }
        goto break_TOP_LOOP;
      }
    }
  }
  break_TOP_LOOP: ;
  if (foundNode != nil && ![self checkUpperBoundWithId:[((IOSObjectArray *) NIL_CHK(foundNode.keys)) objectAtIndex:foundIndex]]) {
    foundNode = nil;
  }
  JreOperatorRetainedAssign(&firstKeyNode_, foundNode);
  firstKeyIndex_ = foundIndex;
  firstKeyModCount_ = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount;
}

- (id)firstKey {
  if (((JavaUtilTreeMap *) NIL_CHK(backingMap_)).size_ > 0) {
    if (!hasStart_) {
      JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root]);
      if (node != nil && [self checkUpperBoundWithId:[((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx]]) {
        return [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx];
      }
    }
    else {
      [self setFirstKey];
      if (firstKeyNode_ != nil) {
        return [((IOSObjectArray *) NIL_CHK(firstKeyNode_.keys)) objectAtIndex:firstKeyIndex_];
      }
    }
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) getWithId:key];
  }
  return nil;
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  [self checkRangeWithId:endKey];
  if (hasStart_) {
    return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey_ withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
}

- (BOOL)isEmpty {
  if (hasStart_) {
    [self setFirstKey];
    return firstKeyNode_ == nil;
  }
  else {
    [self setLastKey];
    return lastKeyNode_ == nil;
  }
}

- (id<JavaUtilSet>)keySet {
  if (keySet__ == nil) {
    JreOperatorRetainedAssign(&keySet__, [[[JavaUtilTreeMap_SubMapKeySet alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return keySet__;
}

- (void)setLastKey {
  if (lastKeyModCount_ == ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount) {
    return;
  }
  id<JavaLangComparable> object = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).comparator_ == nil ? ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:(id) endKey_]) : nil;
  id key = (id) endKey_;
  JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root;
  JavaUtilTreeMap_Node *foundNode = nil;
  int foundIndex = -1;
  while (node != nil) {
    IOSObjectArray *keys = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).keys;
    int left_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx;
    int result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:left_idx]];
    if (result <= 0) {
      node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).left;
    }
    else {
      int right_idx = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx;
      if (left_idx != right_idx) {
        result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:right_idx]];
      }
      if (result > 0) {
        foundNode = node;
        foundIndex = right_idx;
        node = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right;
      }
      else if (result == 0) {
        if (((JavaUtilTreeMap_Node *) NIL_CHK(node)).left_idx == ((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx) {
          foundNode = ((JavaUtilTreeMap_Node *) NIL_CHK(node)).prev;
          if (foundNode != nil) {
            foundIndex = foundNode.right_idx - 1;
          }
        }
        else {
          foundNode = node;
          foundIndex = right_idx - 1;
        }
        break;
      }
      else {
        foundNode = node;
        foundIndex = left_idx;
        int low = left_idx + 1, mid = 0, high = right_idx - 1;
        while (low <= high) {
          mid = (int) (((unsigned int) (low + high)) >> 1);
          result = [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) cmpWithJavaLangComparable:object withId:key withId:[((IOSObjectArray *) NIL_CHK(keys)) objectAtIndex:mid]];
          if (result > 0) {
            foundNode = node;
            foundIndex = mid;
            low = mid + 1;
          }
          else if (result == 0) {
            foundNode = node;
            foundIndex = mid - 1;
            goto break_TOP_LOOP;
          }
          else {
            high = mid - 1;
          }
        }
        goto break_TOP_LOOP;
      }
    }
  }
  break_TOP_LOOP: ;
  if (foundNode != nil && ![self checkLowerBoundWithId:[((IOSObjectArray *) NIL_CHK(foundNode.keys)) objectAtIndex:foundIndex]]) {
    foundNode = nil;
  }
  JreOperatorRetainedAssign(&lastKeyNode_, foundNode);
  lastKeyIndex_ = foundIndex;
  lastKeyModCount_ = ((JavaUtilTreeMap *) NIL_CHK(backingMap_)).modCount;
}

- (id)lastKey {
  if (((JavaUtilTreeMap *) NIL_CHK(backingMap_)).size_ > 0) {
    if (!hasEnd_) {
      JavaUtilTreeMap_Node *node = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root]);
      if (node != nil && [self checkLowerBoundWithId:[((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx]]) {
        return [((IOSObjectArray *) NIL_CHK(node.keys)) objectAtIndex:((JavaUtilTreeMap_Node *) NIL_CHK(node)).right_idx];
      }
    }
    else {
      [self setLastKey];
      if (lastKeyNode_ != nil) {
        return [((IOSObjectArray *) NIL_CHK(lastKeyNode_.keys)) objectAtIndex:lastKeyIndex_];
      }
    }
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)putWithId:(id)key
         withId:(id)value {
  if ([self isInRangeWithId:key]) {
    return [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) putWithId:key withId:value];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id)removeWithId:(id)key {
  if ([self isInRangeWithId:(id) key]) {
    return [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) removeWithId:key];
  }
  return nil;
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  [self checkRangeWithId:startKey];
  [self checkRangeWithId:endKey];
  id<JavaUtilComparator> c = ((id<JavaUtilComparator>) [((JavaUtilTreeMap *) NIL_CHK(backingMap_)) comparator]);
  if (c == nil) {
    if ([((id<JavaLangComparable>) ((id<JavaLangComparable>) [JavaUtilTreeMap toComparableWithId:startKey])) compareToWithId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
    }
  }
  else {
    if ([c compareWithId:startKey withId:endKey] <= 0) {
      return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey] autorelease];
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  [self checkRangeWithId:startKey];
  if (hasEnd_) {
    return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_ withId:endKey_] autorelease];
  }
  return [[[JavaUtilTreeMap_SubMap alloc] initWithId:startKey withJavaUtilTreeMap:backingMap_] autorelease];
}

- (id<JavaUtilCollection>)values {
  if (valuesCollection_ == nil) {
    JreOperatorRetainedAssign(&valuesCollection_, [[[JavaUtilTreeMap_SubMapValuesCollection alloc] initWithJavaUtilTreeMap_SubMap:self] autorelease]);
  }
  return valuesCollection_;
}

- (int)size {
  JavaUtilTreeMap_Node *from, *to;
  int fromIndex, toIndex;
  if (hasStart_) {
    [self setFirstKey];
    from = firstKeyNode_;
    fromIndex = firstKeyIndex_;
  }
  else {
    from = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root]);
    fromIndex = from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).left_idx;
  }
  if (from == nil) {
    return 0;
  }
  if (hasEnd_) {
    [self setLastKey];
    to = lastKeyNode_;
    toIndex = lastKeyIndex_;
  }
  else {
    to = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap maximumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(backingMap_)).root]);
    toIndex = to == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(to)).right_idx;
  }
  if (to == nil) {
    return 0;
  }
  if (from == to) {
    return toIndex - fromIndex + 1;
  }
  int sum = 0;
  while (from != to) {
    sum += (((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex + 1);
    from = ((JavaUtilTreeMap_Node *) NIL_CHK(from)).next;
    fromIndex = ((JavaUtilTreeMap_Node *) NIL_CHK(from)).left_idx;
  }
  return sum + toIndex - fromIndex + 1;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&lastKeyNode_, nil);
  JreOperatorRetainedAssign(&firstKeyNode_, nil);
  JreOperatorRetainedAssign(&entrySet__, nil);
  JreOperatorRetainedAssign(&endKey_, nil);
  JreOperatorRetainedAssign(&startKey_, nil);
  JreOperatorRetainedAssign(&backingMap_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_SubMap *typedCopy = (JavaUtilTreeMap_SubMap *) copy;
  typedCopy.backingMap = backingMap_;
  typedCopy.hasStart = hasStart_;
  typedCopy.hasEnd = hasEnd_;
  typedCopy.startKey = startKey_;
  typedCopy.endKey = endKey_;
  typedCopy.entrySet_ = entrySet__;
  typedCopy.firstKeyModCount = firstKeyModCount_;
  typedCopy.lastKeyModCount = lastKeyModCount_;
  typedCopy.firstKeyNode = firstKeyNode_;
  typedCopy.firstKeyIndex = firstKeyIndex_;
  typedCopy.lastKeyNode = lastKeyNode_;
  typedCopy.lastKeyIndex = lastKeyIndex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:startKey_ name:@"startKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:endKey_ name:@"endKey"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:entrySet__ name:@"entrySet_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:firstKeyNode_ name:@"firstKeyNode"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lastKeyNode_ name:@"lastKeyNode"]];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap_SubMap *)subMap {
  return subMap_;
}
@synthesize subMap = subMap_;

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)map {
  if ((self = [super init])) {
    subMap_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasStart) {
    [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setFirstKey];
    from = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyNode;
    fromIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyIndex;
  }
  else {
    from = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(subMap_.backingMap)).root]);
    fromIndex = from != nil ? ((JavaUtilTreeMap_Node *) NIL_CHK(from)).left_idx : 0;
  }
  if (!((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasEnd) {
    return [[[JavaUtilTreeMap_UnboundedEntryIterator alloc] initWithJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex] autorelease];
  }
  [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setLastKey];
  JavaUtilTreeMap_Node *to = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyNode;
  int toIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyIndex;
  return [[[JavaUtilTreeMap_BoundedEntryIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex withJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(to)).right_idx - toIndex] autorelease];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) size];
}

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey];
    if ([((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) isInRangeWithId:key]) {
      id v1 = [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) getWithId:key], v2 = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue];
      return v1 == nil ? (v2 == nil && [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) containsKeyWithId:key]) : [NIL_CHK(v1) isEqual:v2];
    }
  }
  return NO;
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey];
    [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) removeWithId:key];
    return YES;
  }
  return NO;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_SubMapEntrySet *typedCopy = (JavaUtilTreeMap_SubMapEntrySet *) copy;
  typedCopy.subMap = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapKeySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap_SubMap *)subMap {
  return subMap_;
}
@synthesize subMap = subMap_;

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)map {
  if ((self = [super init])) {
    subMap_ = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) containsKeyWithId:object];
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) isEmpty];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) size];
}

- (BOOL)removeWithId:(id)object {
  if ([((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) containsKeyWithId:object]) {
    [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) removeWithId:object];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasStart) {
    [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setFirstKey];
    from = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyNode;
    fromIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyIndex;
  }
  else {
    from = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(subMap_.backingMap)).root]);
    fromIndex = from != nil ? ((JavaUtilTreeMap_Node *) NIL_CHK(from)).left_idx : 0;
  }
  if (!((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasEnd) {
    return [[[JavaUtilTreeMap_UnboundedKeyIterator alloc] initWithJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex] autorelease];
  }
  [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setLastKey];
  JavaUtilTreeMap_Node *to = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyNode;
  int toIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyIndex;
  return [[[JavaUtilTreeMap_BoundedKeyIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex withJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(to)).right_idx - toIndex] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_SubMapKeySet *typedCopy = (JavaUtilTreeMap_SubMapKeySet *) copy;
  typedCopy.subMap = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_SubMapValuesCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap_SubMap *)subMap {
  return subMap_;
}
@synthesize subMap = subMap_;

- (id)initWithJavaUtilTreeMap_SubMap:(JavaUtilTreeMap_SubMap *)subMap {
  if ((self = [super init])) {
    self.subMap = subMap;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEmpty {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  JavaUtilTreeMap_Node *from;
  int fromIndex;
  if (((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasStart) {
    [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setFirstKey];
    from = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyNode;
    fromIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).firstKeyIndex;
  }
  else {
    from = ((JavaUtilTreeMap_Node *) [JavaUtilTreeMap minimumWithJavaUtilTreeMap_Node:((JavaUtilTreeMap *) NIL_CHK(subMap_.backingMap)).root]);
    fromIndex = from != nil ? ((JavaUtilTreeMap_Node *) NIL_CHK(from)).left_idx : 0;
  }
  if (!((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).hasEnd) {
    return [[[JavaUtilTreeMap_UnboundedValueIterator alloc] initWithJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex] autorelease];
  }
  [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) setLastKey];
  JavaUtilTreeMap_Node *to = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyNode;
  int toIndex = ((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).lastKeyIndex;
  return [[[JavaUtilTreeMap_BoundedValueIterator alloc] initWithJavaUtilTreeMap_Node:from withInt:from == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(from)).right_idx - fromIndex withJavaUtilTreeMap:((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)).backingMap withJavaUtilTreeMap_Node:to withInt:to == nil ? 0 : ((JavaUtilTreeMap_Node *) NIL_CHK(to)).right_idx - toIndex] autorelease];
}

- (int)size {
  return [((JavaUtilTreeMap_SubMap *) NIL_CHK(subMap_)) size];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_SubMapValuesCollection *typedCopy = (JavaUtilTreeMap_SubMapValuesCollection *) copy;
  typedCopy.subMap = subMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_EntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)this$0 {
  return this$0_;
}
@synthesize this$0 = this$0_;

- (int)size {
  return this$0_.size_;
}

- (void)clear {
  [this$0_ clear];
}

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey];
    id v1 = [this$0_ getWithId:key], v2 = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue];
    return v1 == nil ? (v2 == nil && [this$0_ containsKeyWithId:key]) : [NIL_CHK(v1) isEqual:v2];
  }
  return NO;
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    id key = [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey];
    [this$0_ removeWithId:key];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedEntryIterator alloc] initWithJavaUtilTreeMap:this$0_] autorelease];
}

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)outer$ {
  if ((self = [super init])) {
    this$0_ = outer$;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_EntrySet *typedCopy = (JavaUtilTreeMap_EntrySet *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_KeySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)map {
  return map_;
}
@synthesize map = map_;

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    self.map = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap *) NIL_CHK(map_)) containsKeyWithId:object];
}

- (int)size {
  return ((JavaUtilTreeMap *) NIL_CHK(map_)).size_;
}

- (void)clear {
  [((JavaUtilTreeMap *) NIL_CHK(map_)) clear];
}

- (BOOL)removeWithId:(id)object {
  if ([self containsWithId:object]) {
    [((JavaUtilTreeMap *) NIL_CHK(map_)) removeWithId:object];
    return YES;
  }
  return NO;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedKeyIterator alloc] initWithJavaUtilTreeMap:map_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_KeySet *typedCopy = (JavaUtilTreeMap_KeySet *) copy;
  typedCopy.map = map_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
@implementation JavaUtilTreeMap_ValuesCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilTreeMap *)map {
  return map_;
}
@synthesize map = map_;

- (id)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)map {
  if ((self = [super init])) {
    self.map = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return [((JavaUtilTreeMap *) NIL_CHK(map_)) containsValueWithId:object];
}

- (int)size {
  return ((JavaUtilTreeMap *) NIL_CHK(map_)).size_;
}

- (void)clear {
  [((JavaUtilTreeMap *) NIL_CHK(map_)) clear];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilTreeMap_UnboundedValueIterator alloc] initWithJavaUtilTreeMap:map_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeMap_ValuesCollection *typedCopy = (JavaUtilTreeMap_ValuesCollection *) copy;
  typedCopy.map = map_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
