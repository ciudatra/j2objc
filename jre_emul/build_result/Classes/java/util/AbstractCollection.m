//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/AbstractCollection.java
//
//  Created by retechretech on 13-3-15.
//

#import "IOSObjectArray.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/AbstractCollection.h"
#import "java/util/Collection.h"
#import "java/util/Iterator.h"
#import "java/lang/NullPointerException.h"

@implementation JavaUtilAbstractCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return JreMemDebugAdd([super init]);
}

- (BOOL)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    if ([self addWithId:((id) [((id<JavaUtilIterator>) NIL_CHK(it)) next])]) {
      result = YES;
    }
  }
  return result;
}

- (void)clear {
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
  }
}

- (BOOL)containsWithId:(id)object {
  id<JavaUtilIterator> it = [self iterator];
  if (object != nil) {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([object isEqual:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([((id<JavaUtilIterator>) NIL_CHK(it)) next] == nil) {
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    if (![self containsWithId:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
      return NO;
    }
  }
  return YES;
}

- (BOOL)isEmpty {
  return [self size] == 0;
}

- (id<JavaUtilIterator>)iterator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)removeWithId:(id)object {
  id<JavaUtilIterator> it = [self iterator];
  if (object != nil) {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([object isEqual:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
        [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
        return YES;
      }
    }
  }
  else {
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      if ([((id<JavaUtilIterator>) NIL_CHK(it)) next] == nil) {
        [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
        return YES;
      }
    }
  }
  return NO;
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    if ([((id<JavaUtilCollection>) NIL_CHK(collection)) containsWithId:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
      [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
      result = YES;
    }
  }
  return result;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  BOOL result = NO;
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    if (![((id<JavaUtilCollection>) NIL_CHK(collection)) containsWithId:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
      [((id<JavaUtilIterator>) NIL_CHK(it)) remove];
      result = YES;
    }
  }
  return result;
}

- (int)size {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)toArray   {
    IOSObjectArray *result =
    [[IOSObjectArray alloc] initWithLength:[self size]
    type:[IOSClass classWithClass:[NSObject class]]];
    #if ! __has_feature(objc_arc)
    [result autorelease];
    #endif
    return [self toArrayWithNSObjectArray:result];
  }

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents   {
    if (!contents) {
      id exception = [[JavaLangNullPointerException alloc] init];
      #if ! __has_feature(objc_arc)
      [exception autorelease];
      #endif
      @throw exception;
      return nil;
    }
    if ([contents count] < [self size]) {
      contents =
      [[IOSObjectArray alloc] initWithLength:[self size]
      type:[IOSClass classWithClass:[NSObject class]]];
      #if ! __has_feature(objc_arc)
      [contents autorelease];
      #endif
    }
    NSUInteger i = 0;
    id<JavaUtilIterator> it = [self iterator];
    while ([it hasNext]) {
      [contents replaceObjectAtIndex:i++ withObject:[it next]];
    }
    return contents;
  }

- (NSString *)description {
  if ([self isEmpty]) {
    return @"[]";
  }
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] initWithInt:[self size] * 16] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithUnichar:'['];
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    id next = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    if (next != self) {
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithId:next];
    }
    else {
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithNSString:@"(this Collection)"];
    }
    if ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithNSString:@", "];
    }
  }
  [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(buffer)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
