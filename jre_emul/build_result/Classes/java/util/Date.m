//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/Date.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSObjectArray.h"
#import "java/lang/AssertionError.h"
#import "java/lang/Character.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/System.h"
#import "java/util/Calendar.h"
#import "java/util/Date.h"
#import "java/util/GregorianCalendar.h"
#import "java/util/Locale.h"
#import "java/util/TimeZone.h"

@implementation JavaUtilDate

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

static int JavaUtilDate_creationYear_;

@synthesize milliseconds = milliseconds_;

+ (int)creationYear {
  return JavaUtilDate_creationYear_;
}

+ (int *)creationYearRef {
  return &JavaUtilDate_creationYear_;
}

- (id)init {
  return JreMemDebugAdd([self initJavaUtilDateWithLongInt:[JavaLangSystem currentTimeMillis]]);
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day {
  if ((self = [super init])) {
    JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithBOOL:NO] autorelease];
    [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:1900 + year withInt:month withInt:day];
    milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute {
  if ((self = [super init])) {
    JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithBOOL:NO] autorelease];
    [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:1900 + year withInt:month withInt:day withInt:hour withInt:minute];
    milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithInt:(int)year
          withInt:(int)month
          withInt:(int)day
          withInt:(int)hour
          withInt:(int)minute
          withInt:(int)second {
  if ((self = [super init])) {
    JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithBOOL:NO] autorelease];
    [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:1900 + year withInt:month withInt:day withInt:hour withInt:minute withInt:second];
    milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaUtilDateWithLongInt:(long long int)milliseconds {
  if ((self = [super init])) {
    self.milliseconds = milliseconds;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithLongInt:(long long int)milliseconds {
  return [self initJavaUtilDateWithLongInt:milliseconds];
}

- (id)initWithNSString:(NSString *)string {
  if ((self = [super init])) {
    milliseconds_ = [JavaUtilDate parseWithNSString:string];
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)afterWithJavaUtilDate:(JavaUtilDate *)date {
  return milliseconds_ > ((JavaUtilDate *) NIL_CHK(date)).milliseconds;
}

- (BOOL)beforeWithJavaUtilDate:(JavaUtilDate *)date {
  return milliseconds_ < ((JavaUtilDate *) NIL_CHK(date)).milliseconds;
}

- (id)clone {
  @try {
    return (id) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] initWithId:e] autorelease];
  }
}

- (int)compareToWithId:(JavaUtilDate *)date {
  if (date != nil && ![date isKindOfClass:[JavaUtilDate class]]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  if (milliseconds_ < ((JavaUtilDate *) NIL_CHK(date)).milliseconds) {
    return -1;
  }
  if (milliseconds_ == ((JavaUtilDate *) NIL_CHK(date)).milliseconds) {
    return 0;
  }
  return 1;
}

- (BOOL)isEqual:(id)object {
  return (object == self) || ([object isKindOfClass:[JavaUtilDate class]]) && (milliseconds_ == ((JavaUtilDate *) object).milliseconds);
}

- (int)getDate {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_DATE];
}

- (int)getDay {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_DAY_OF_WEEK] - 1;
}

- (int)getHours {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_HOUR_OF_DAY];
}

- (int)getMinutes {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_MINUTE];
}

- (int)getMonth {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_MONTH];
}

- (int)getSeconds {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_SECOND];
}

- (long long int)getTime {
  return milliseconds_;
}

- (int)getTimezoneOffset {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  return -([((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getWithInt:JavaUtilCalendar_DST_OFFSET]) / 60000;
}

- (int)getYear {
  return [((JavaUtilCalendar *) [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease]) getWithInt:JavaUtilCalendar_YEAR] - 1900;
}

- (NSUInteger)hash {
  return (int) ((long long) (((unsigned long long) milliseconds_) >> 32)) ^ (int) milliseconds_;
}

+ (int)parseWithNSString:(NSString *)string
       withNSStringArray:(IOSObjectArray *)array {
  for (int i = 0, alength = (int) [((IOSObjectArray *) NIL_CHK(array)) count], slength = [NIL_CHK(string) length]; i < alength; i++) {
    if ([NIL_CHK(string) regionMatches:YES thisOffset:0 aString:((NSString *) [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]) otherOffset:0 count:slength]) {
      return i;
    }
  }
  return -1;
}

+ (long long int)parseWithNSString:(NSString *)string {
  if (string == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"The string argument is null"] autorelease];
  }
  unichar sign = 0;
  int commentLevel = 0;
  int offset = 0, length = [NIL_CHK(string) length], state = 0;
  int year = -1, month = -1, date = -1;
  int hour = -1, minute = -1, second = -1, zoneOffset = 0, minutesOffset = 0;
  BOOL zone = NO;
  int PAD = 0, LETTERS = 1, NUMBERS = 2;
  JavaLangStringBuilder *buffer = [[[JavaLangStringBuilder alloc] init] autorelease];
  while (offset <= length) {
    unichar next = offset < length ? [NIL_CHK(string) charAtWithInt:offset] : 0x000d;
    offset++;
    if (next == '(') {
      commentLevel++;
    }
    if (commentLevel > 0) {
      if (next == ')') {
        commentLevel--;
      }
      if (commentLevel == 0) {
        next = ' ';
      }
      else {
        continue;
      }
    }
    int nextState = PAD;
    if ('a' <= next && next <= 'z' || 'A' <= next && next <= 'Z') {
      nextState = LETTERS;
    }
    else if ('0' <= next && next <= '9') {
      nextState = NUMBERS;
    }
    else if (![JavaLangCharacter isSpaceWithUnichar:next] && [@",+-:/" indexOf:next] == -1) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    if (state == NUMBERS && nextState != NUMBERS) {
      int digit = [JavaLangInteger parseIntWithNSString:[((JavaLangStringBuilder *) NIL_CHK(buffer)) description]];
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) setLengthWithInt:0];
      if (sign == '+' || sign == '-') {
        if (zoneOffset == 0) {
          zone = YES;
          if (next == ':') {
            minutesOffset = sign == '-' ? -[JavaLangInteger parseIntWithNSString:[NIL_CHK(string) substring:offset endIndex:offset + 2]] : [JavaLangInteger parseIntWithNSString:[NIL_CHK(string) substring:offset endIndex:offset + 2]];
            offset += 2;
          }
          zoneOffset = sign == '-' ? -digit : digit;
          sign = 0;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if (digit >= 70) {
        if (year == -1 && ([JavaLangCharacter isSpaceWithUnichar:next] || next == ',' || next == '/' || next == 0x000d)) {
          year = digit;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if (next == ':') {
        if (hour == -1) {
          hour = digit;
        }
        else if (minute == -1) {
          minute = digit;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if (next == '/') {
        if (month == -1) {
          month = digit - 1;
        }
        else if (date == -1) {
          date = digit;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if ([JavaLangCharacter isSpaceWithUnichar:next] || next == ',' || next == '-' || next == 0x000d) {
        if (hour != -1 && minute == -1) {
          minute = digit;
        }
        else if (minute != -1 && second == -1) {
          second = digit;
        }
        else if (date == -1) {
          date = digit;
        }
        else if (year == -1) {
          year = digit;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if (year == -1 && month != -1 && date != -1) {
        year = digit;
      }
      else {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
    }
    else if (state == LETTERS && nextState != LETTERS) {
      NSString *text = [[((JavaLangStringBuilder *) NIL_CHK(buffer)) description] uppercaseStringWithJRELocale:[JavaUtilLocale US]];
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) setLengthWithInt:0];
      if ([NIL_CHK(text) length] == 1) {
        @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
      }
      if ([NIL_CHK(text) isEqual:@"AM"]) {
        if (hour == 12) {
          hour = 0;
        }
        else if (hour < 1 || hour > 12) {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
      else if ([NIL_CHK(text) isEqual:@"PM"]) {
        if (hour == 12) {
          hour = 0;
        }
        else if (hour < 1 || hour > 12) {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
        hour += 12;
      }
      else {
        IOSObjectArray *weekdays = [IOSObjectArray arrayWithObjects:(id[]){ @"Sunday", @"Monday", @"Tuesday", @"Wednesday", @"Thursday", @"Friday", @"Saturday" } count:7 type:[IOSClass classWithClass:[NSString class]]];
        IOSObjectArray *months = [IOSObjectArray arrayWithObjects:(id[]){ @"January", @"February", @"March", @"April", @"May", @"June", @"July", @"August", @"September", @"October", @"November", @"December" } count:12 type:[IOSClass classWithClass:[NSString class]]];
        int value;
        if ([JavaUtilDate parseWithNSString:text withNSStringArray:weekdays] != -1) {
        }
        else if (month == -1 && (month = [JavaUtilDate parseWithNSString:text withNSStringArray:months]) != -1) {
        }
        else if ([NIL_CHK(text) isEqual:@"GMT"] || [NIL_CHK(text) isEqual:@"UT"] || [NIL_CHK(text) isEqual:@"UTC"]) {
          zone = YES;
          zoneOffset = 0;
        }
        else if ((value = [JavaUtilDate zoneWithNSString:text]) != 0) {
          zone = YES;
          zoneOffset = value;
        }
        else {
          @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
        }
      }
    }
    if (next == '+' || (year != -1 && next == '-')) {
      sign = next;
    }
    else if (![JavaLangCharacter isSpaceWithUnichar:next] && next != ',' && nextState != NUMBERS) {
      sign = 0;
    }
    if (nextState == LETTERS || nextState == NUMBERS) {
      [((JavaLangStringBuilder *) NIL_CHK(buffer)) appendWithUnichar:next];
    }
    state = nextState;
  }
  if (year != -1 && month != -1 && date != -1) {
    if (hour == -1) {
      hour = 0;
    }
    if (minute == -1) {
      minute = 0;
    }
    if (second == -1) {
      second = 0;
    }
    if (year < (JavaUtilDate_creationYear_ - 80)) {
      year += 2000;
    }
    else if (year < 100) {
      year += 1900;
    }
    minute -= minutesOffset;
    if (zone) {
      if (zoneOffset >= 24 || zoneOffset <= -24) {
        hour -= zoneOffset / 100;
        minute -= zoneOffset % 100;
      }
      else {
        hour -= zoneOffset;
      }
      return [JavaUtilDate UTCWithInt:year - 1900 withInt:month withInt:date withInt:hour withInt:minute withInt:second];
    }
    return [((JavaUtilDate *) [[[JavaUtilDate alloc] initWithInt:year - 1900 withInt:month withInt:date withInt:hour withInt:minute withInt:second] autorelease]) getTime];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (void)setDateWithInt:(int)day {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_DATE withInt:day];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

- (void)setHoursWithInt:(int)hour {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:hour];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

- (void)setMinutesWithInt:(int)minute {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MINUTE withInt:minute];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

- (void)setMonthWithInt:(int)month {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MONTH withInt:month];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

- (void)setSecondsWithInt:(int)second {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_SECOND withInt:second];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

- (void)setTimeWithLongInt:(long long int)milliseconds {
  self.milliseconds = milliseconds;
}

- (void)setYearWithInt:(int)year {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithLongInt:milliseconds_] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_YEAR withInt:year + 1900];
  milliseconds_ = [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

+ (void)appendTwoDigitsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                         withInt:(int)n {
  if (n < 10) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'0'];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:n];
}

+ (long long int)UTCWithInt:(int)year
                    withInt:(int)month
                    withInt:(int)day
                    withInt:(int)hour
                    withInt:(int)minute
                    withInt:(int)second {
  JavaUtilGregorianCalendar *cal = [[[JavaUtilGregorianCalendar alloc] initWithBOOL:NO] autorelease];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setTimeZoneWithJavaUtilTimeZone:[JavaUtilTimeZone getTimeZoneWithNSString:@"GMT"]];
  [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) setWithInt:1900 + year withInt:month withInt:day withInt:hour withInt:minute withInt:second];
  return [((JavaUtilGregorianCalendar *) NIL_CHK(cal)) getTimeInMillis];
}

+ (int)zoneWithNSString:(NSString *)text {
  if ([NIL_CHK(text) isEqual:@"EST"]) {
    return -5;
  }
  if ([NIL_CHK(text) isEqual:@"EDT"]) {
    return -4;
  }
  if ([NIL_CHK(text) isEqual:@"CST"]) {
    return -6;
  }
  if ([NIL_CHK(text) isEqual:@"CDT"]) {
    return -5;
  }
  if ([NIL_CHK(text) isEqual:@"MST"]) {
    return -7;
  }
  if ([NIL_CHK(text) isEqual:@"MDT"]) {
    return -6;
  }
  if ([NIL_CHK(text) isEqual:@"PST"]) {
    return -8;
  }
  if ([NIL_CHK(text) isEqual:@"PDT"]) {
    return -7;
  }
  return 0;
}

+ (void)initialize {
  if (self == [JavaUtilDate class]) {
    JavaUtilDate_creationYear_ = [((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) getYear];
  }
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilDate *typedCopy = (JavaUtilDate *) copy;
  typedCopy.milliseconds = milliseconds_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  return result;
}

@end
