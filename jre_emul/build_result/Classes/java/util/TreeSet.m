//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/TreeSet.java
//
//  Created by retechretech on 13-4-19.
//

#import "java/lang/Boolean.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/Comparable.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/util/Collection.h"
#import "java/util/Comparator.h"
#import "java/util/Iterator.h"
#import "java/util/Set.h"
#import "java/util/SortedMap.h"
#import "java/util/SortedSet.h"
#import "java/util/TreeMap.h"
#import "java/util/TreeSet.h"

@implementation JavaUtilTreeSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedMap>)backingMap {
  return backingMap_;
}
- (void)setBackingMap:(id<JavaUtilSortedMap>)backingMap {
  JreOperatorRetainedAssign(&backingMap_, backingMap);
}
@synthesize backingMap = backingMap_;

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if ((self = [super init])) {
    self.backingMap = map;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaUtilTreeSet {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&backingMap_, [[[JavaUtilTreeMap alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return [self initJavaUtilTreeSet];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [self initJavaUtilTreeSet])) {
    [self addAllWithJavaUtilCollection:collection];
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initJavaUtilTreeSetWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&backingMap_, [[[JavaUtilTreeMap alloc] initWithJavaUtilComparator:comparator] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [self initJavaUtilTreeSetWithJavaUtilComparator:comparator];
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if ((self = [self initJavaUtilTreeSetWithJavaUtilComparator:[((id<JavaUtilSortedSet>) NIL_CHK(set)) comparator]])) {
    id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilSortedSet>) NIL_CHK(set)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
      [self addWithId:[((id<JavaUtilIterator>) NIL_CHK(it)) next]];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(id)object {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) putWithId:object withId:[JavaLangBoolean getTRUE]] == nil;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return (BOOL) [super addAllWithJavaUtilCollection:collection];
}

- (void)clear {
  [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) clear];
}

- (id)clone {
  @try {
    JavaUtilTreeSet *clone = (JavaUtilTreeSet *) [super clone];
    if ([(id) backingMap_ isKindOfClass:[JavaUtilTreeMap class]]) {
      ((JavaUtilTreeSet *) NIL_CHK(clone)).backingMap = (id<JavaUtilSortedMap>) [((JavaUtilTreeMap *) backingMap_) clone];
    }
    else {
      ((JavaUtilTreeSet *) NIL_CHK(clone)).backingMap = [[[JavaUtilTreeMap alloc] initWithJavaUtilSortedMap:backingMap_] autorelease];
    }
    return clone;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) comparator]);
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) containsKeyWithId:object];
}

- (id)first {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) firstKey];
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)end {
  id<JavaUtilComparator> c = ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) comparator]);
  if (c == nil) {
    [((id<JavaLangComparable>) end) compareToWithId:end];
  }
  else {
    [c compareWithId:end withId:end];
  }
  return [[[JavaUtilTreeSet alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) headMapWithId:end])] autorelease];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) keySet]) iterator]);
}

- (id)last {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) lastKey];
}

- (BOOL)removeWithId:(id)object {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) removeWithId:object] != nil;
}

- (int)size {
  return [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) size];
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end {
  id<JavaUtilComparator> c = ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) comparator]);
  if (c == nil) {
    if ([((id<JavaLangComparable>) start) compareToWithId:end] <= 0) {
      return [[[JavaUtilTreeSet alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) subMapWithId:start withId:end])] autorelease];
    }
  }
  else {
    if ([c compareWithId:start withId:end] <= 0) {
      return [[[JavaUtilTreeSet alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) subMapWithId:start withId:end])] autorelease];
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)start {
  id<JavaUtilComparator> c = ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) comparator]);
  if (c == nil) {
    [((id<JavaLangComparable>) start) compareToWithId:start];
  }
  else {
    [c compareWithId:start withId:start];
  }
  return [[[JavaUtilTreeSet alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(backingMap_)) tailMapWithId:start])] autorelease];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&backingMap_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilTreeSet *typedCopy = (JavaUtilTreeSet *) copy;
  typedCopy.backingMap = backingMap_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingMap_ name:@"backingMap"]];
  return result;
}

@end
