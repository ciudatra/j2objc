//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/Collections.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/Boolean.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Comparable.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/ArrayList.h"
#import "java/util/Arrays.h"
#import "java/util/Collection.h"
#import "java/util/Collections.h"
#import "java/util/Comparator.h"
#import "java/util/Deque.h"
#import "java/util/Enumeration.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/ListIterator.h"
#import "java/util/Map.h"
#import "java/util/NoSuchElementException.h"
#import "java/util/Queue.h"
#import "java/util/Random.h"
#import "java/util/RandomAccess.h"
#import "java/util/Set.h"
#import "java/util/SortedMap.h"
#import "java/util/SortedSet.h"

@implementation JavaUtilCollections

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_LIST_ name:@"JavaUtilCollections_EMPTY_LIST_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_SET_ name:@"JavaUtilCollections_EMPTY_SET_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_EMPTY_MAP_ name:@"JavaUtilCollections_EMPTY_MAP_"]];
  return result;
}

static id<JavaUtilList> JavaUtilCollections_EMPTY_LIST_;
static id<JavaUtilSet> JavaUtilCollections_EMPTY_SET_;
static id<JavaUtilMap> JavaUtilCollections_EMPTY_MAP_;

+ (id<JavaUtilList>)EMPTY_LIST {
  return JavaUtilCollections_EMPTY_LIST_;
}

+ (id<JavaUtilSet>)EMPTY_SET {
  return JavaUtilCollections_EMPTY_SET_;
}

+ (id<JavaUtilMap>)EMPTY_MAP {
  return JavaUtilCollections_EMPTY_MAP_;
}

- (id)init {
  return (self = JreMemDebugAdd([super init]));
}

+ (int)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                             withId:(id)object {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilList>) NIL_CHK(list)) isEmpty]) {
    return -1;
  }
  if (!([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)])) {
    id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
    while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
      int result;
      if ((result = -[((id<JavaLangComparable>) [((id<JavaUtilListIterator>) NIL_CHK(it)) next]) compareToWithId:object]) <= 0) {
        if (result == 0) {
          return [((id<JavaUtilListIterator>) NIL_CHK(it)) previousIndex];
        }
        return -[((id<JavaUtilListIterator>) NIL_CHK(it)) previousIndex] - 1;
      }
    }
    return -[((id<JavaUtilList>) NIL_CHK(list)) size] - 1;
  }
  int low = 0, mid = [((id<JavaUtilList>) NIL_CHK(list)) size], high = mid - 1, result = -1;
  while (low <= high) {
    mid = (low + high) >> 1;
    if ((result = -[((id<JavaLangComparable>) [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:mid]) compareToWithId:object]) > 0) {
      low = mid + 1;
    }
    else if (result == 0) {
      return mid;
    }
    else {
      high = mid - 1;
    }
  }
  return -mid - (result < 0 ? 1 : 2);
}

+ (int)binarySearchWithJavaUtilList:(id<JavaUtilList>)list
                             withId:(id)object
             withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (comparator == nil) {
    return [JavaUtilCollections binarySearchWithJavaUtilList:(id<JavaUtilList>) list withId:object];
  }
  if (!([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)])) {
    id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
    while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
      int result;
      if ((result = -[((id<JavaUtilComparator>) NIL_CHK(comparator)) compareWithId:((id) [((id<JavaUtilListIterator>) NIL_CHK(it)) next]) withId:object]) <= 0) {
        if (result == 0) {
          return [((id<JavaUtilListIterator>) NIL_CHK(it)) previousIndex];
        }
        return -[((id<JavaUtilListIterator>) NIL_CHK(it)) previousIndex] - 1;
      }
    }
    return -[((id<JavaUtilList>) NIL_CHK(list)) size] - 1;
  }
  int low = 0, mid = [((id<JavaUtilList>) NIL_CHK(list)) size], high = mid - 1, result = -1;
  while (low <= high) {
    mid = (low + high) >> 1;
    if ((result = -[((id<JavaUtilComparator>) NIL_CHK(comparator)) compareWithId:((id) [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:mid]) withId:object]) > 0) {
      low = mid + 1;
    }
    else if (result == 0) {
      return mid;
    }
    else {
      high = mid - 1;
    }
  }
  return -mid - (result < 0 ? 1 : 2);
}

+ (void)copy__WithJavaUtilList:(id<JavaUtilList>)destination
              withJavaUtilList:(id<JavaUtilList>)source OBJC_METHOD_FAMILY_NONE {
  if (destination == nil || source == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilList>) NIL_CHK(destination)) size] < [((id<JavaUtilList>) NIL_CHK(source)) size]) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Source size %d does not fit into destination", [((id<JavaUtilList>) NIL_CHK(source)) size]]] autorelease];
  }
  id<JavaUtilIterator> srcIt = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(source)) iterator]);
  id<JavaUtilListIterator> destIt = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(destination)) listIterator]);
  while ([((id<JavaUtilIterator>) NIL_CHK(srcIt)) hasNext]) {
    @try {
      [((id<JavaUtilListIterator>) NIL_CHK(destIt)) next];
    }
    @catch (JavaUtilNoSuchElementException *e) {
      @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Source size %d does not fit into destination", [((id<JavaUtilList>) NIL_CHK(source)) size]]] autorelease];
    }
    [((id<JavaUtilListIterator>) NIL_CHK(destIt)) setWithId:((id) [((id<JavaUtilIterator>) NIL_CHK(srcIt)) next])];
  }
}

+ (id<JavaUtilEnumeration>)enumerationWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilCollection> c = collection;
  return [[[JavaUtilCollections_$1 alloc] initWithJavaUtilCollection:c] autorelease];
}

+ (void)fillWithJavaUtilList:(id<JavaUtilList>)list
                      withId:(id)object {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
  while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
    [((id<JavaUtilListIterator>) NIL_CHK(it)) next];
    [((id<JavaUtilListIterator>) NIL_CHK(it)) setWithId:object];
  }
}

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
  id max = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    id next = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    if ([NIL_CHK(max) compareToWithId:next] < 0) {
      max = next;
    }
  }
  return max;
}

+ (id)maxWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    id result = (id) [JavaUtilCollections maxWithJavaUtilCollection:(id<JavaUtilCollection>) collection];
    return result;
  }
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
  id max = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    id next = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    if ([((id<JavaUtilComparator>) NIL_CHK(comparator)) compareWithId:max withId:next] < 0) {
      max = next;
    }
  }
  return max;
}

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
  id min = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    id next = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    if ([NIL_CHK(min) compareToWithId:next] > 0) {
      min = next;
    }
  }
  return min;
}

+ (id)minWithJavaUtilCollection:(id<JavaUtilCollection>)collection
         withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    id result = (id) [JavaUtilCollections minWithJavaUtilCollection:(id<JavaUtilCollection>) collection];
    return result;
  }
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
  id min = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    id next = [((id<JavaUtilIterator>) NIL_CHK(it)) next];
    if ([((id<JavaUtilComparator>) NIL_CHK(comparator)) compareWithId:min withId:next] > 0) {
      min = next;
    }
  }
  return min;
}

+ (id<JavaUtilList>)nCopiesWithInt:(int)length
                            withId:(id)object {
  return [[[JavaUtilCollections_CopiesList alloc] initWithInt:length withId:object] autorelease];
}

+ (void)reverseWithJavaUtilList:(id<JavaUtilList>)list {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int size = [((id<JavaUtilList>) NIL_CHK(list)) size];
  id<JavaUtilListIterator> front = (id<JavaUtilListIterator>) ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
  id<JavaUtilListIterator> back = (id<JavaUtilListIterator>) ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIteratorWithInt:size]);
  for (int i = 0; i < size / 2; i++) {
    id frontNext = [((id<JavaUtilListIterator>) NIL_CHK(front)) next];
    id backPrev = [((id<JavaUtilListIterator>) NIL_CHK(back)) previous];
    [((id<JavaUtilListIterator>) NIL_CHK(front)) setWithId:backPrev];
    [((id<JavaUtilListIterator>) NIL_CHK(back)) setWithId:frontNext];
  }
}

+ (id<JavaUtilComparator>)reverseOrder {
  return (id<JavaUtilComparator>) [JavaUtilCollections_ReverseComparator INSTANCE];
}

+ (id<JavaUtilComparator>)reverseOrderWithJavaUtilComparator:(id<JavaUtilComparator>)c {
  if (c == nil) {
    return ((id<JavaUtilComparator>) [JavaUtilCollections reverseOrder]);
  }
  if ([(id) c isKindOfClass:[JavaUtilCollections_ReverseComparatorWithComparator class]]) {
    return ((JavaUtilCollections_ReverseComparatorWithComparator *) c).comparator;
  }
  return [[[JavaUtilCollections_ReverseComparatorWithComparator alloc] initWithJavaUtilComparator:c] autorelease];
}

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list {
  [JavaUtilCollections shuffleWithJavaUtilList:list withJavaUtilRandom:[[[JavaUtilRandom alloc] init] autorelease]];
}

+ (void)shuffleWithJavaUtilList:(id<JavaUtilList>)list
             withJavaUtilRandom:(JavaUtilRandom *)random {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  id<JavaUtilList> objectList = (id<JavaUtilList>) list;
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    for (int i = [((id<JavaUtilList>) NIL_CHK(objectList)) size] - 1; i > 0; i--) {
      int index = [((JavaUtilRandom *) NIL_CHK(random)) nextIntWithInt:i + 1];
      [((id<JavaUtilList>) NIL_CHK(objectList)) setWithInt:index withId:[((id<JavaUtilList>) NIL_CHK(objectList)) setWithInt:i withId:[((id<JavaUtilList>) NIL_CHK(objectList)) getWithInt:index]]];
    }
  }
  else {
    IOSObjectArray *array = [((id<JavaUtilList>) NIL_CHK(objectList)) toArray];
    for (int i = (int) [((IOSObjectArray *) NIL_CHK(array)) count] - 1; i > 0; i--) {
      int index = [((JavaUtilRandom *) NIL_CHK(random)) nextIntWithInt:i + 1];
      id temp = [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i];
      [((IOSObjectArray *) NIL_CHK(array)) replaceObjectAtIndex:i withObject:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:index]];
      [((IOSObjectArray *) NIL_CHK(array)) replaceObjectAtIndex:index withObject:temp];
    }
    int i = 0;
    id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(objectList)) listIterator]);
    while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
      [((id<JavaUtilListIterator>) NIL_CHK(it)) next];
      [((id<JavaUtilListIterator>) NIL_CHK(it)) setWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i++]];
    }
  }
}

+ (id<JavaUtilSet>)singletonWithId:(id)object {
  return [[[JavaUtilCollections_SingletonSet alloc] initWithId:object] autorelease];
}

+ (id<JavaUtilList>)singletonListWithId:(id)object {
  return [[[JavaUtilCollections_SingletonList alloc] initWithId:object] autorelease];
}

+ (id<JavaUtilMap>)singletonMapWithId:(id)key
                               withId:(id)value {
  return [[[JavaUtilCollections_SingletonMap alloc] initWithId:key withId:value] autorelease];
}

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list {
  IOSObjectArray *array = [((id<JavaUtilList>) NIL_CHK(list)) toArray];
  [JavaUtilArrays sortWithNSObjectArray:array];
  int i = 0;
  id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
  while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
    [((id<JavaUtilListIterator>) NIL_CHK(it)) next];
    [((id<JavaUtilListIterator>) NIL_CHK(it)) setWithId:(id) [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i++]];
  }
}

+ (void)sortWithJavaUtilList:(id<JavaUtilList>)list
      withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  IOSObjectArray *array = [((id<JavaUtilList>) NIL_CHK(list)) toArrayWithNSObjectArray:(IOSObjectArray *) [[[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(list)) size] type:[IOSClass classWithClass:[NSObject class]]] autorelease]];
  [JavaUtilArrays sortWithNSObjectArray:array withJavaUtilComparator:comparator];
  int i = 0;
  id<JavaUtilListIterator> it = ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list)) listIterator]);
  while ([((id<JavaUtilListIterator>) NIL_CHK(it)) hasNext]) {
    [((id<JavaUtilListIterator>) NIL_CHK(it)) next];
    [((id<JavaUtilListIterator>) NIL_CHK(it)) setWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i++]];
  }
}

+ (void)swapWithJavaUtilList:(id<JavaUtilList>)list
                     withInt:(int)index1
                     withInt:(int)index2 {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int size = [((id<JavaUtilList>) NIL_CHK(list)) size];
  if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (index1 == index2) {
    return;
  }
  id<JavaUtilList> rawList = (id<JavaUtilList>) list;
  [((id<JavaUtilList>) NIL_CHK(rawList)) setWithInt:index2 withId:[((id<JavaUtilList>) NIL_CHK(rawList)) setWithInt:index1 withId:[((id<JavaUtilList>) NIL_CHK(rawList)) getWithInt:index2]]];
}

+ (BOOL)replaceAllWithJavaUtilList:(id<JavaUtilList>)list
                            withId:(id)obj
                            withId:(id)obj2 {
  int index;
  BOOL found = NO;
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  while ((index = [((id<JavaUtilList>) NIL_CHK(list)) indexOfWithId:obj]) > -1) {
    found = YES;
    [((id<JavaUtilList>) NIL_CHK(list)) setWithInt:index withId:obj2];
  }
  return found;
}

+ (void)rotateWithJavaUtilList:(id<JavaUtilList>)lst
                       withInt:(int)dist {
  if (lst == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  id<JavaUtilList> list = (id<JavaUtilList>) lst;
  int size = [((id<JavaUtilList>) NIL_CHK(list)) size];
  if (size == 0) {
    return;
  }
  int normdist;
  if (dist > 0) {
    normdist = dist % size;
  }
  else {
    normdist = size - ((dist % size) * (-1));
  }
  if (normdist == 0 || normdist == size) {
    return;
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    id temp = [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:0];
    int index = 0, beginIndex = 0;
    for (int i = 0; i < size; i++) {
      index = (index + normdist) % size;
      temp = [((id<JavaUtilList>) NIL_CHK(list)) setWithInt:index withId:temp];
      if (index == beginIndex) {
        index = ++beginIndex;
        temp = [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:beginIndex];
      }
    }
  }
  else {
    int divideIndex = (size - normdist) % size;
    id<JavaUtilList> sublist1 = ((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list)) subListWithInt:0 withInt:divideIndex]);
    id<JavaUtilList> sublist2 = ((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list)) subListWithInt:divideIndex withInt:size]);
    [JavaUtilCollections reverseWithJavaUtilList:sublist1];
    [JavaUtilCollections reverseWithJavaUtilList:sublist2];
    [JavaUtilCollections reverseWithJavaUtilList:list];
  }
}

+ (int)indexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                     withJavaUtilList:(id<JavaUtilList>)sublist {
  if (list == nil || sublist == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int size = [((id<JavaUtilList>) NIL_CHK(list)) size];
  int sublistSize = [((id<JavaUtilList>) NIL_CHK(sublist)) size];
  if (sublistSize > size) {
    return -1;
  }
  if (sublistSize == 0) {
    return 0;
  }
  id firstObj = [((id<JavaUtilList>) NIL_CHK(sublist)) getWithInt:0];
  int index = [((id<JavaUtilList>) NIL_CHK(list)) indexOfWithId:firstObj];
  if (index == -1) {
    return -1;
  }
  while (index < size && (size - index >= sublistSize)) {
    id<JavaUtilListIterator> listIt = [((id<JavaUtilList>) NIL_CHK(list)) listIteratorWithInt:index];
    if ((firstObj == nil) ? [((id<JavaUtilListIterator>) NIL_CHK(listIt)) next] == nil : [NIL_CHK(firstObj) isEqual:[((id<JavaUtilListIterator>) NIL_CHK(listIt)) next]]) {
      id<JavaUtilListIterator> sublistIt = [((id<JavaUtilList>) NIL_CHK(sublist)) listIteratorWithInt:1];
      BOOL difFound = NO;
      while ([((id<JavaUtilListIterator>) NIL_CHK(sublistIt)) hasNext]) {
        id element = [((id<JavaUtilListIterator>) NIL_CHK(sublistIt)) next];
        if (![((id<JavaUtilListIterator>) NIL_CHK(listIt)) hasNext]) {
          return -1;
        }
        if ((element == nil) ? [((id<JavaUtilListIterator>) NIL_CHK(listIt)) next] != nil : ![NIL_CHK(element) isEqual:[((id<JavaUtilListIterator>) NIL_CHK(listIt)) next]]) {
          difFound = YES;
          break;
        }
      }
      if (!difFound) {
        return index;
      }
    }
    index++;
  }
  return -1;
}

+ (int)lastIndexOfSubListWithJavaUtilList:(id<JavaUtilList>)list
                         withJavaUtilList:(id<JavaUtilList>)sublist {
  if (list == nil || sublist == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int sublistSize = [((id<JavaUtilList>) NIL_CHK(sublist)) size];
  int size = [((id<JavaUtilList>) NIL_CHK(list)) size];
  if (sublistSize > size) {
    return -1;
  }
  if (sublistSize == 0) {
    return size;
  }
  id lastObj = [((id<JavaUtilList>) NIL_CHK(sublist)) getWithInt:sublistSize - 1];
  int index = [((id<JavaUtilList>) NIL_CHK(list)) lastIndexOfWithId:lastObj];
  while ((index > -1) && (index + 1 >= sublistSize)) {
    id<JavaUtilListIterator> listIt = [((id<JavaUtilList>) NIL_CHK(list)) listIteratorWithInt:index + 1];
    if ((lastObj == nil) ? [((id<JavaUtilListIterator>) NIL_CHK(listIt)) previous] == nil : [NIL_CHK(lastObj) isEqual:[((id<JavaUtilListIterator>) NIL_CHK(listIt)) previous]]) {
      id<JavaUtilListIterator> sublistIt = [((id<JavaUtilList>) NIL_CHK(sublist)) listIteratorWithInt:sublistSize - 1];
      BOOL difFound = NO;
      while ([((id<JavaUtilListIterator>) NIL_CHK(sublistIt)) hasPrevious]) {
        id element = [((id<JavaUtilListIterator>) NIL_CHK(sublistIt)) previous];
        if (![((id<JavaUtilListIterator>) NIL_CHK(listIt)) hasPrevious]) {
          return -1;
        }
        if ((element == nil) ? [((id<JavaUtilListIterator>) NIL_CHK(listIt)) previous] != nil : ![NIL_CHK(element) isEqual:[((id<JavaUtilListIterator>) NIL_CHK(listIt)) previous]]) {
          difFound = YES;
          break;
        }
      }
      if (!difFound) {
        return [((id<JavaUtilListIterator>) NIL_CHK(listIt)) nextIndex];
      }
    }
    index--;
  }
  return -1;
}

+ (JavaUtilArrayList *)listWithJavaUtilEnumeration:(id<JavaUtilEnumeration>)enumeration {
  JavaUtilArrayList *list = [[[JavaUtilArrayList alloc] init] autorelease];
  while ([((id<JavaUtilEnumeration>) NIL_CHK(enumeration)) hasMoreElements]) {
    [((JavaUtilArrayList *) NIL_CHK(list)) addWithId:[((id<JavaUtilEnumeration>) NIL_CHK(enumeration)) nextElement]];
  }
  return list;
}

+ (id<JavaUtilCollection>)synchronizedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedCollection alloc] initWithJavaUtilCollection:collection] autorelease];
}

+ (id<JavaUtilList>)synchronizedListWithJavaUtilList:(id<JavaUtilList>)list {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_SynchronizedRandomAccessList alloc] initWithJavaUtilList:list] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedList alloc] initWithJavaUtilList:list] autorelease];
}

+ (id<JavaUtilMap>)synchronizedMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedMap alloc] initWithJavaUtilMap:map] autorelease];
}

+ (id<JavaUtilSet>)synchronizedSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:set] autorelease];
}

+ (id<JavaUtilSortedMap>)synchronizedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:map] autorelease];
}

+ (id<JavaUtilSortedSet>)synchronizedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:set] autorelease];
}

+ (id<JavaUtilCollection>)unmodifiableCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableCollection alloc] initWithJavaUtilCollection:(id<JavaUtilCollection>) collection] autorelease];
}

+ (id<JavaUtilList>)unmodifiableListWithJavaUtilList:(id<JavaUtilList>)list {
  if (list == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_UnmodifiableRandomAccessList alloc] initWithJavaUtilList:(id<JavaUtilList>) list] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableList alloc] initWithJavaUtilList:(id<JavaUtilList>) list] autorelease];
}

+ (id<JavaUtilMap>)unmodifiableMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableMap alloc] initWithJavaUtilMap:(id<JavaUtilMap>) map] autorelease];
}

+ (id<JavaUtilSet>)unmodifiableSetWithJavaUtilSet:(id<JavaUtilSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSet alloc] initWithJavaUtilSet:(id<JavaUtilSet>) set] autorelease];
}

+ (id<JavaUtilSortedMap>)unmodifiableSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if (map == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>) map] autorelease];
}

+ (id<JavaUtilSortedSet>)unmodifiableSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if (set == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:set] autorelease];
}

+ (int)frequencyWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                withId:(id)o {
  if (c == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(c)) isEmpty]) {
    return 0;
  }
  int result = 0;
  id<JavaUtilIterator> itr = [((id<JavaUtilCollection>) NIL_CHK(c)) iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(itr)) hasNext]) {
    id e = [((id<JavaUtilIterator>) NIL_CHK(itr)) next];
    if (o == nil ? e == nil : [NIL_CHK(o) isEqual:e]) {
      result++;
    }
  }
  return result;
}

+ (id<JavaUtilList>)emptyList {
  return JavaUtilCollections_EMPTY_LIST_;
}

+ (id<JavaUtilSet>)emptySet {
  return JavaUtilCollections_EMPTY_SET_;
}

+ (id<JavaUtilMap>)emptyMap {
  return JavaUtilCollections_EMPTY_MAP_;
}

+ (id<JavaUtilCollection>)checkedCollectionWithJavaUtilCollection:(id<JavaUtilCollection>)c
                                                     withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedCollection alloc] initWithJavaUtilCollection:c withIOSClass:type] autorelease];
}

+ (id<JavaUtilMap>)checkedMapWithJavaUtilMap:(id<JavaUtilMap>)m
                                withIOSClass:(IOSClass *)keyType
                                withIOSClass:(IOSClass *)valueType {
  return [[[JavaUtilCollections_CheckedMap alloc] initWithJavaUtilMap:m withIOSClass:keyType withIOSClass:valueType] autorelease];
}

+ (id<JavaUtilList>)checkedListWithJavaUtilList:(id<JavaUtilList>)list
                                   withIOSClass:(IOSClass *)type {
  if ([(id) list conformsToProtocol: @protocol(JavaUtilRandomAccess)]) {
    return [[[JavaUtilCollections_CheckedRandomAccessList alloc] initWithJavaUtilList:list withIOSClass:type] autorelease];
  }
  return [[[JavaUtilCollections_CheckedList alloc] initWithJavaUtilList:list withIOSClass:type] autorelease];
}

+ (id<JavaUtilSet>)checkedSetWithJavaUtilSet:(id<JavaUtilSet>)s
                                withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedSet alloc] initWithJavaUtilSet:s withIOSClass:type] autorelease];
}

+ (id<JavaUtilSortedMap>)checkedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                                                  withIOSClass:(IOSClass *)keyType
                                                  withIOSClass:(IOSClass *)valueType {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:m withIOSClass:keyType withIOSClass:valueType] autorelease];
}

+ (id<JavaUtilSortedSet>)checkedSortedSetWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                                                  withIOSClass:(IOSClass *)type {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:s withIOSClass:type] autorelease];
}

+ (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c
                   withNSObjectArray:(IOSObjectArray *)a {
  BOOL modified = NO;
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(a)) count]; i++) {
    modified |= [((id<JavaUtilCollection>) NIL_CHK(c)) addWithId:[((IOSObjectArray *) NIL_CHK(a)) objectAtIndex:i]];
  }
  return modified;
}

+ (BOOL)disjointWithJavaUtilCollection:(id<JavaUtilCollection>)c1
                withJavaUtilCollection:(id<JavaUtilCollection>)c2 {
  if (([(id) c1 conformsToProtocol: @protocol(JavaUtilSet)]) && !([(id) c2 conformsToProtocol: @protocol(JavaUtilSet)]) || ([((id<JavaUtilCollection>) NIL_CHK(c2)) size]) > [((id<JavaUtilCollection>) NIL_CHK(c1)) size]) {
    id<JavaUtilCollection> tmp = c1;
    c1 = c2;
    c2 = tmp;
  }
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) NIL_CHK(c1)) iterator];
  while ([((id<JavaUtilIterator>) NIL_CHK(it)) hasNext]) {
    if ([((id<JavaUtilCollection>) NIL_CHK(c2)) containsWithId:[((id<JavaUtilIterator>) NIL_CHK(it)) next]]) {
      return NO;
    }
  }
  return YES;
}

+ (id)checkTypeWithId:(id)obj
         withIOSClass:(IOSClass *)type {
  if (obj != nil && ![NIL_CHK(type) isInstance:obj]) {
    @throw [[[JavaLangClassCastException alloc] initWithNSString:[NSString stringWithFormat:@"Attempt to insert %@element into collection with an element type %@", [NIL_CHK(obj) getClass], type]] autorelease];
  }
  return obj;
}

+ (id<JavaUtilSet>)newSetFromMapWithJavaUtilMap:(id<JavaUtilMap>)map OBJC_METHOD_FAMILY_NONE {
  if ([((id<JavaUtilMap>) NIL_CHK(map)) isEmpty]) {
    return [[[JavaUtilCollections_SetFromMap alloc] initWithJavaUtilMap:map] autorelease];
  }
  @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
}

+ (id<JavaUtilQueue>)asLifoQueueWithJavaUtilDeque:(id<JavaUtilDeque>)deque {
  return [[[JavaUtilCollections_AsLIFOQueue alloc] initWithJavaUtilDeque:deque] autorelease];
}

+ (void)initialize {
  if (self == [JavaUtilCollections class]) {
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_LIST_, [[[JavaUtilCollections_EmptyList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_SET_, [[[JavaUtilCollections_EmptySet alloc] init] autorelease]);
    JreOperatorRetainedAssign(&JavaUtilCollections_EMPTY_MAP_, [[[JavaUtilCollections_EmptyMap alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_CopiesList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize n = n_;
- (id)element {
  return element_;
}
- (void)setElement:(id)element {
  JreOperatorRetainedAssign(&element_, element);
}
@synthesize element = element_;

- (id)initWithInt:(int)length
           withId:(id)object {
  if ((self = [super init])) {
    if (length < 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
    }
    n_ = length;
    JreOperatorRetainedAssign(&element_, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [NIL_CHK(element_) isEqual:object];
}

- (int)size {
  return n_;
}

- (id)getWithInt:(int)location {
  if (0 <= location && location < n_) {
    return element_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&element_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CopiesList *typedCopy = (JavaUtilCollections_CopiesList *) copy;
  typedCopy.n = n_;
  typedCopy.element = element_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_EmptyList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  return NO;
}

- (int)size {
  return 0;
}

- (id)getWithInt:(int)location {
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_EmptySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsWithId:(id)object {
  return NO;
}

- (int)size {
  return 0;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_EmptySet_$1 alloc] initWithJavaUtilCollections_EmptySet:self] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_EmptySet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_EmptySet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_EmptySet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (BOOL)hasNext {
  return NO;
}

- (id)next {
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_EmptySet:(JavaUtilCollections_EmptySet *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_EmptySet_$1 *typedCopy = (JavaUtilCollections_EmptySet_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_EmptyMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (BOOL)containsKeyWithId:(id)key {
  return NO;
}

- (BOOL)containsValueWithId:(id)value {
  return NO;
}

- (id<JavaUtilSet>)entrySet {
  return [JavaUtilCollections EMPTY_SET];
}

- (id)getWithId:(id)key {
  return nil;
}

- (id<JavaUtilSet>)keySet {
  return [JavaUtilCollections EMPTY_SET];
}

- (id<JavaUtilCollection>)values {
  return [JavaUtilCollections EMPTY_LIST];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_ReverseComparator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilCollections_ReverseComparator_INSTANCE_ name:@"JavaUtilCollections_ReverseComparator_INSTANCE_"]];
  return result;
}

static JavaUtilCollections_ReverseComparator * JavaUtilCollections_ReverseComparator_INSTANCE_;

+ (JavaUtilCollections_ReverseComparator *)INSTANCE {
  return JavaUtilCollections_ReverseComparator_INSTANCE_;
}

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  id<JavaLangComparable> c2 = (id<JavaLangComparable>) o2;
  return [((id<JavaLangComparable>) NIL_CHK(c2)) compareToWithId:o1];
}

+ (void)initialize {
  if (self == [JavaUtilCollections_ReverseComparator class]) {
    JreOperatorRetainedAssign(&JavaUtilCollections_ReverseComparator_INSTANCE_, [[[JavaUtilCollections_ReverseComparator alloc] init] autorelease]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_ReverseComparatorWithComparator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilComparator>)comparator {
  return comparator_;
}
- (void)setComparator:(id<JavaUtilComparator>)comparator {
  JreOperatorRetainedAssign(&comparator_, comparator);
}
@synthesize comparator = comparator_;

- (id)initWithJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if ((self = [super init])) {
    self.comparator = comparator;
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)compareWithId:(id)o1
              withId:(id)o2 {
  return [((id<JavaUtilComparator>) NIL_CHK(comparator_)) compareWithId:o2 withId:o1];
}

- (BOOL)isEqual:(id)o {
  return [o isKindOfClass:[JavaUtilCollections_ReverseComparatorWithComparator class]] && [((id<JavaUtilComparator>) NIL_CHK(((JavaUtilCollections_ReverseComparatorWithComparator *) o).comparator)) isEqual:comparator_];
}

- (NSUInteger)hash {
  return ~[((id<JavaUtilComparator>) NIL_CHK(comparator_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&comparator_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_ReverseComparatorWithComparator *typedCopy = (JavaUtilCollections_ReverseComparatorWithComparator *) copy;
  typedCopy.comparator = comparator_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:comparator_ name:@"comparator"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)element {
  return element_;
}
- (void)setElement:(id)element {
  JreOperatorRetainedAssign(&element_, element);
}
@synthesize element = element_;

- (id)initWithId:(id)object {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&element_, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [NIL_CHK(element_) isEqual:object];
}

- (int)size {
  return 1;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_SingletonSet_$1 alloc] initWithJavaUtilCollections_SingletonSet:self] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&element_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonSet *typedCopy = (JavaUtilCollections_SingletonSet *) copy;
  typedCopy.element = element_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonSet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_SingletonSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_SingletonSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize hasNext_ = hasNext__;

- (BOOL)hasNext {
  return hasNext__;
}

- (id)next {
  if (hasNext__) {
    hasNext__ = NO;
    return this$0_.element;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonSet:(JavaUtilCollections_SingletonSet *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    hasNext__ = YES;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonSet_$1 *typedCopy = (JavaUtilCollections_SingletonSet_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.hasNext_ = hasNext__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)element {
  return element_;
}
- (void)setElement:(id)element {
  JreOperatorRetainedAssign(&element_, element);
}
@synthesize element = element_;

- (id)initWithId:(id)object {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&element_, object);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  return element_ == nil ? object == nil : [NIL_CHK(element_) isEqual:object];
}

- (id)getWithInt:(int)location {
  if (location == 0) {
    return element_;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (int)size {
  return 1;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&element_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonList *typedCopy = (JavaUtilCollections_SingletonList *) copy;
  typedCopy.element = element_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:element_ name:@"element"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)k {
  return k_;
}
- (void)setK:(id)k {
  JreOperatorRetainedAssign(&k_, k);
}
@synthesize k = k_;
- (id)v {
  return v_;
}
- (void)setV:(id)v {
  JreOperatorRetainedAssign(&v_, v);
}
@synthesize v = v_;

- (id)initWithId:(id)key
          withId:(id)value {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&k_, key);
    JreOperatorRetainedAssign(&v_, value);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsKeyWithId:(id)key {
  return k_ == nil ? key == nil : [NIL_CHK(k_) isEqual:key];
}

- (BOOL)containsValueWithId:(id)value {
  return v_ == nil ? value == nil : [NIL_CHK(v_) isEqual:value];
}

- (id)getWithId:(id)key {
  if ([self containsKeyWithId:key]) {
    return v_;
  }
  return nil;
}

- (int)size {
  return 1;
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_SingletonMap_$1 alloc] initWithJavaUtilCollections_SingletonMap:self] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&v_, nil);
  JreOperatorRetainedAssign(&k_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonMap *typedCopy = (JavaUtilCollections_SingletonMap *) copy;
  typedCopy.k = k_;
  typedCopy.v = v_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:k_ name:@"k"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:v_ name:@"v"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_SingletonMap *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_SingletonMap *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (BOOL)containsWithId:(id)object {
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    return [this$0_ containsKeyWithId:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey]] && [this$0_ containsValueWithId:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue]];
  }
  return NO;
}

- (int)size {
  return 1;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_SingletonMap_$1_$1 alloc] initWithJavaUtilCollections_SingletonMap_$1:self] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonMap:(JavaUtilCollections_SingletonMap *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonMap_$1 *typedCopy = (JavaUtilCollections_SingletonMap_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_SingletonMap_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_SingletonMap_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize hasNext_ = hasNext__;

- (BOOL)hasNext {
  return hasNext__;
}

- (id<JavaUtilMap_Entry>)next {
  if (!hasNext__) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  hasNext__ = NO;
  return [[[JavaUtilCollections_SingletonMap_$1_$1_$1 alloc] initWithJavaUtilCollections_SingletonMap_$1_$1:self withId:this$0_.this$0.k withId:this$0_.this$0.v] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonMap_$1:(JavaUtilCollections_SingletonMap_$1 *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    hasNext__ = YES;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonMap_$1_$1 *typedCopy = (JavaUtilCollections_SingletonMap_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.hasNext_ = hasNext__;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SingletonMap_$1_$1_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_SingletonMap_$1_$1 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_SingletonMap_$1_$1 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (id)setValueWithId:(id)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_SingletonMap_$1_$1:(JavaUtilCollections_SingletonMap_$1_$1 *)outer$2
                                              withId:(id)arg$0
                                              withId:(id)arg$1 {
  if ((self = [super initWithId:arg$0 withId:arg$1])) {
    JreOperatorRetainedAssign(&this$0_, outer$2);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SingletonMap_$1_$1_$1 *typedCopy = (JavaUtilCollections_SingletonMap_$1_$1_$1 *) copy;
  typedCopy.this$0 = this$0_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilCollection>)c {
  return c_;
}
- (void)setC:(id<JavaUtilCollection>)c {
  JreOperatorRetainedAssign(&c_, c);
}
@synthesize c = c_;
- (id)mutex {
  return mutex_;
}
- (void)setMutex:(id)mutex {
  JreOperatorRetainedAssign(&mutex_, mutex);
}
@synthesize mutex = mutex_;

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&c_, collection);
    JreOperatorRetainedAssign(&mutex_, self);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection
                          withId:(id)mutex {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&c_, collection);
    self.mutex = mutex;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) addWithId:object];
  }
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) addAllWithJavaUtilCollection:collection];
  }
}

- (void)clear {
  @synchronized (mutex_) {
    [((id<JavaUtilCollection>) NIL_CHK(c_)) clear];
  }
}

- (BOOL)containsWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsWithId:object];
  }
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsAllWithJavaUtilCollection:collection];
  }
}

- (BOOL)isEmpty {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEmpty];
  }
}

- (id<JavaUtilIterator>)iterator {
  @synchronized (mutex_) {
    return ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(c_)) iterator]);
  }
}

- (BOOL)removeWithId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) removeWithId:object];
  }
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) removeAllWithJavaUtilCollection:collection];
  }
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) retainAllWithJavaUtilCollection:collection];
  }
}

- (int)size {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) size];
  }
}

- (IOSObjectArray *)toArray {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArray];
  }
}

- (NSString *)description {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) description];
  }
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArrayWithNSObjectArray:array];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&mutex_, nil);
  JreOperatorRetainedAssign(&c_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SynchronizedCollection *typedCopy = (JavaUtilCollections_SynchronizedCollection *) copy;
  typedCopy.c = c_;
  typedCopy.mutex = mutex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mutex_ name:@"mutex"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilList>)list {
  return list_;
}
- (void)setList:(id<JavaUtilList>)list {
  JreOperatorRetainedAssign(&list_, list);
}
@synthesize list = list_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  if ((self = [super initWithJavaUtilCollection:l])) {
    JreOperatorRetainedAssign(&list_, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
                    withId:(id)mutex {
  if ((self = [super initWithJavaUtilCollection:l withId:mutex])) {
    JreOperatorRetainedAssign(&list_, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  @synchronized (mutex_) {
    [((id<JavaUtilList>) NIL_CHK(list_)) addWithInt:location withId:object];
  }
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) addAllWithInt:location withJavaUtilCollection:collection];
  }
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) isEqual:object];
  }
}

- (id)getWithInt:(int)location {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) getWithInt:location];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) hash];
  }
}

- (int)indexOfWithId:(id)object {
  int size;
  IOSObjectArray *array;
  @synchronized (mutex_) {
    size = [((id<JavaUtilList>) NIL_CHK(list_)) size];
    array = [[[IOSObjectArray alloc] initWithLength:size type:[IOSClass classWithClass:[NSObject class]]] autorelease];
    [((id<JavaUtilList>) NIL_CHK(list_)) toArrayWithNSObjectArray:array];
  }
  if (nil != object) for (int i = 0; i < size; i++) {
    if ([object isEqual:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]]) {
      return i;
    }
  }
  else {
    for (int i = 0; i < size; i++) {
      if (nil == [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]) {
        return i;
      }
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  int size;
  IOSObjectArray *array;
  @synchronized (mutex_) {
    size = [((id<JavaUtilList>) NIL_CHK(list_)) size];
    array = [[[IOSObjectArray alloc] initWithLength:size type:[IOSClass classWithClass:[NSObject class]]] autorelease];
    [((id<JavaUtilList>) NIL_CHK(list_)) toArrayWithNSObjectArray:array];
  }
  if (nil != object) for (int i = size - 1; i >= 0; i--) {
    if ([object isEqual:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]]) {
      return i;
    }
  }
  else {
    for (int i = size - 1; i >= 0; i--) {
      if (nil == [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]) {
        return i;
      }
    }
  }
  return -1;
}

- (id<JavaUtilListIterator>)listIterator {
  @synchronized (mutex_) {
    return ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list_)) listIterator]);
  }
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  @synchronized (mutex_) {
    return ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(list_)) listIteratorWithInt:location]);
  }
}

- (id)removeWithInt:(int)location {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) removeWithInt:location];
  }
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilList>) NIL_CHK(list_)) setWithInt:location withId:object];
  }
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedList alloc] initWithJavaUtilList:((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list_)) subListWithInt:start withInt:end]) withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&list_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SynchronizedList *typedCopy = (JavaUtilCollections_SynchronizedList *) copy;
  typedCopy.list = list_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  return JreMemDebugAdd([super initWithJavaUtilList:l]);
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
                    withId:(id)mutex {
  return JreMemDebugAdd([super initWithJavaUtilList:l withId:mutex]);
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedRandomAccessList alloc] initWithJavaUtilList:((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list_)) subListWithInt:start withInt:end]) withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_SynchronizedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap>)m {
  return m_;
}
- (void)setM:(id<JavaUtilMap>)m {
  JreOperatorRetainedAssign(&m_, m);
}
@synthesize m = m_;
- (id)mutex {
  return mutex_;
}
- (void)setMutex:(id)mutex {
  JreOperatorRetainedAssign(&mutex_, mutex);
}
@synthesize mutex = mutex_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&m_, map);
    JreOperatorRetainedAssign(&mutex_, self);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map
                   withId:(id)mutex {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&m_, map);
    self.mutex = mutex;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)clear {
  @synchronized (mutex_) {
    [((id<JavaUtilMap>) NIL_CHK(m_)) clear];
  }
}

- (BOOL)containsKeyWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) containsKeyWithId:key];
  }
}

- (BOOL)containsValueWithId:(id)value {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) containsValueWithId:value];
  }
}

- (id<JavaUtilSet>)entrySet {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) entrySet]) withId:mutex_] autorelease];
  }
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) isEqual:object];
  }
}

- (id)getWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) getWithId:key];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) hash];
  }
}

- (BOOL)isEmpty {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) isEmpty];
  }
}

- (id<JavaUtilSet>)keySet {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSet alloc] initWithJavaUtilSet:((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) keySet]) withId:mutex_] autorelease];
  }
}

- (id)putWithId:(id)key
         withId:(id)value {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) putWithId:key withId:value];
  }
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  @synchronized (mutex_) {
    [((id<JavaUtilMap>) NIL_CHK(m_)) putAllWithJavaUtilMap:map];
  }
}

- (id)removeWithId:(id)key {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) removeWithId:key];
  }
}

- (int)size {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) size];
  }
}

- (id<JavaUtilCollection>)values {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedCollection alloc] initWithJavaUtilCollection:((id<JavaUtilCollection>) [((id<JavaUtilMap>) NIL_CHK(m_)) values]) withId:mutex_] autorelease];
  }
}

- (NSString *)description {
  @synchronized (mutex_) {
    return [((id<JavaUtilMap>) NIL_CHK(m_)) description];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&mutex_, nil);
  JreOperatorRetainedAssign(&m_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SynchronizedMap *typedCopy = (JavaUtilCollections_SynchronizedMap *) copy;
  typedCopy.m = m_;
  typedCopy.mutex = mutex_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mutex_ name:@"mutex"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedMap>)sm {
  return sm_;
}
- (void)setSm:(id<JavaUtilSortedMap>)sm {
  JreOperatorRetainedAssign(&sm_, sm);
}
@synthesize sm = sm_;

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if ((self = [super initWithJavaUtilMap:map])) {
    JreOperatorRetainedAssign(&sm_, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                         withId:(id)mutex {
  if ((self = [super initWithJavaUtilMap:map withId:mutex])) {
    JreOperatorRetainedAssign(&sm_, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  @synchronized (mutex_) {
    return ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) comparator]);
  }
}

- (id)firstKey {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) firstKey];
  }
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)endKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) headMapWithId:endKey]) withId:mutex_] autorelease];
  }
}

- (id)lastKey {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) lastKey];
  }
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)startKey
                               withId:(id)endKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) subMapWithId:startKey withId:endKey]) withId:mutex_] autorelease];
  }
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)startKey {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) tailMapWithId:startKey]) withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&sm_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SynchronizedSortedMap *typedCopy = (JavaUtilCollections_SynchronizedSortedMap *) copy;
  typedCopy.sm = sm_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_SynchronizedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set]);
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set
                   withId:(id)mutex {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set withId:mutex]);
}

- (BOOL)isEqual:(id)object {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEqual:object];
  }
}

- (NSUInteger)hash {
  @synchronized (mutex_) {
    return [((id<JavaUtilCollection>) NIL_CHK(c_)) hash];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_SynchronizedSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedSet>)ss {
  return ss_;
}
- (void)setSs:(id<JavaUtilSortedSet>)ss {
  JreOperatorRetainedAssign(&ss_, ss);
}
@synthesize ss = ss_;

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if ((self = [super initWithJavaUtilSet:set])) {
    JreOperatorRetainedAssign(&ss_, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set
                         withId:(id)mutex {
  if ((self = [super initWithJavaUtilSet:set withId:mutex])) {
    JreOperatorRetainedAssign(&ss_, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  @synchronized (mutex_) {
    return ((id<JavaUtilComparator>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) comparator]);
  }
}

- (id)first {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) first];
  }
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) headSetWithId:end]) withId:mutex_] autorelease];
  }
}

- (id)last {
  @synchronized (mutex_) {
    return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) last];
  }
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) subSetWithId:start withId:end]) withId:mutex_] autorelease];
  }
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)start {
  @synchronized (mutex_) {
    return [[[JavaUtilCollections_SynchronizedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) tailSetWithId:start]) withId:mutex_] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&ss_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SynchronizedSortedSet *typedCopy = (JavaUtilCollections_SynchronizedSortedSet *) copy;
  typedCopy.ss = ss_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableCollection_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_UnmodifiableCollection *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_UnmodifiableCollection *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (id<JavaUtilIterator>)iterator {
  return iterator_;
}
- (void)setIterator:(id<JavaUtilIterator>)iterator {
  JreOperatorRetainedAssign(&iterator_, iterator);
}
@synthesize iterator = iterator_;

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) NIL_CHK(iterator_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilIterator>) NIL_CHK(iterator_)) next];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableCollection:(JavaUtilCollections_UnmodifiableCollection *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    JreOperatorRetainedAssign(&iterator_, ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(this$0_.c)) iterator]));
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&iterator_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableCollection_$1 *typedCopy = (JavaUtilCollections_UnmodifiableCollection_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.iterator = iterator_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilCollection>)c {
  return c_;
}
- (void)setC:(id<JavaUtilCollection>)c {
  JreOperatorRetainedAssign(&c_, c);
}
@synthesize c = c_;

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&c_, collection);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)clear {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_UnmodifiableCollection_$1 alloc] initWithJavaUtilCollections_UnmodifiableCollection:self] autorelease];
}

- (BOOL)removeWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (int)size {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) size];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArrayWithNSObjectArray:array];
}

- (NSString *)description {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&c_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableCollection *typedCopy = (JavaUtilCollections_UnmodifiableCollection *) copy;
  typedCopy.c = c_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilList>)list {
  return list_;
}
- (void)setList:(id<JavaUtilList>)list {
  JreOperatorRetainedAssign(&list_, list);
}
@synthesize list = list_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  if ((self = [super initWithJavaUtilCollection:l])) {
    JreOperatorRetainedAssign(&list_, l);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilList>) NIL_CHK(list_)) isEqual:object];
}

- (id)getWithInt:(int)location {
  return [((id<JavaUtilList>) NIL_CHK(list_)) getWithInt:location];
}

- (NSUInteger)hash {
  return [((id<JavaUtilList>) NIL_CHK(list_)) hash];
}

- (int)indexOfWithId:(id)object {
  return [((id<JavaUtilList>) NIL_CHK(list_)) indexOfWithId:object];
}

- (int)lastIndexOfWithId:(id)object {
  return [((id<JavaUtilList>) NIL_CHK(list_)) lastIndexOfWithId:object];
}

- (id<JavaUtilListIterator>)listIterator {
  return [self listIteratorWithInt:0];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  return [[[JavaUtilCollections_UnmodifiableList_$1 alloc] initWithJavaUtilCollections_UnmodifiableList:self withInt:location] autorelease];
}

- (id)removeWithInt:(int)location {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  return [[[JavaUtilCollections_UnmodifiableList alloc] initWithJavaUtilList:((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list_)) subListWithInt:start withInt:end])] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&list_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableList *typedCopy = (JavaUtilCollections_UnmodifiableList *) copy;
  typedCopy.list = list_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l {
  return JreMemDebugAdd([super initWithJavaUtilList:l]);
}

- (id<JavaUtilList>)subListWithInt:(int)start
                           withInt:(int)end {
  return [[[JavaUtilCollections_UnmodifiableRandomAccessList alloc] initWithJavaUtilList:((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(list_)) subListWithInt:start withInt:end])] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_UnmodifiableList_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_UnmodifiableList *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_UnmodifiableList *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (id<JavaUtilListIterator>)iterator {
  return iterator_;
}
- (void)setIterator:(id<JavaUtilListIterator>)iterator {
  JreOperatorRetainedAssign(&iterator_, iterator);
}
@synthesize iterator = iterator_;
@synthesize val$location = val$location_;

- (void)addWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)hasNext {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) hasNext];
}

- (BOOL)hasPrevious {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) hasPrevious];
}

- (id)next {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) next];
}

- (int)nextIndex {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) nextIndex];
}

- (id)previous {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) previous];
}

- (int)previousIndex {
  return [((id<JavaUtilListIterator>) NIL_CHK(iterator_)) previousIndex];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)setWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableList:(JavaUtilCollections_UnmodifiableList *)outer$1
                                           withInt:(int)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$1);
    val$location_ = outer$0;
    JreOperatorRetainedAssign(&iterator_, ((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(this$0_.list)) listIteratorWithInt:val$location_]));
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&iterator_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableList_$1 *typedCopy = (JavaUtilCollections_UnmodifiableList_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.iterator = iterator_;
  typedCopy.val$location = val$location_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilCollection:set]);
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEqual:object];
}

- (NSUInteger)hash {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)set {
  return JreMemDebugAdd([super initWithJavaUtilSet:set]);
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1 alloc] initWithJavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet:self] autorelease];
}

- (IOSObjectArray *)toArray {
  int length = [((id<JavaUtilCollection>) NIL_CHK(c_)) size];
  IOSObjectArray *result = [[[IOSObjectArray alloc] initWithLength:length type:[IOSClass classWithClass:[NSObject class]]] autorelease];
  id<JavaUtilIterator> it = [self iterator];
  for (int i = length; --i >= 0; ) {
    [((IOSObjectArray *) NIL_CHK(result)) replaceObjectAtIndex:i withObject:[((id<JavaUtilIterator>) NIL_CHK(it)) next]];
  }
  return result;
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents   {
    if (!contents) {
      id exception = [[JavaLangNullPointerException alloc] init];
      #if ! __has_feature(objc_arc)
      [exception autorelease];
      #endif
      @throw exception;
      return nil;
    }
    if ([contents count] < [self size]) {
      contents =
      [[IOSObjectArray alloc] initWithLength:[self size]
      type:[IOSClass classWithClass:[NSObject class]]];
      #if ! __has_feature(objc_arc)
      [contents autorelease];
      #endif
    }
    NSUInteger i = 0;
    id<JavaUtilIterator> it = [self iterator];
    while ([it hasNext]) {
      [contents replaceObjectAtIndex:i++ withObject:[it next]];
    }
    return contents;
  }

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap_Entry>)mapEntry {
  return mapEntry_;
}
- (void)setMapEntry:(id<JavaUtilMap_Entry>)mapEntry {
  JreOperatorRetainedAssign(&mapEntry_, mapEntry);
}
@synthesize mapEntry = mapEntry_;

- (id)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)entry {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&mapEntry_, entry);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(mapEntry_)) isEqual:object];
}

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(mapEntry_)) getKey];
}

- (id)getValue {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(mapEntry_)) getValue];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(mapEntry_)) hash];
}

- (id)setValueWithId:(id)object {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (NSString *)description {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(mapEntry_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&mapEntry_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry *typedCopy = (JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry *) copy;
  typedCopy.mapEntry = mapEntry_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:mapEntry_ name:@"mapEntry"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (id<JavaUtilIterator>)iterator {
  return iterator_;
}
- (void)setIterator:(id<JavaUtilIterator>)iterator {
  JreOperatorRetainedAssign(&iterator_, iterator);
}
@synthesize iterator = iterator_;

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) NIL_CHK(iterator_)) hasNext];
}

- (id<JavaUtilMap_Entry>)next {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_UnmodifiableMapEntry alloc] initWithJavaUtilMap_Entry:((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iterator_)) next])] autorelease];
}

- (void)remove {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)initWithJavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet:(JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet *)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$0);
    JreOperatorRetainedAssign(&iterator_, ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(this$0_.c)) iterator]));
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&iterator_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1 *typedCopy = (JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.iterator = iterator_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:iterator_ name:@"iterator"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap>)m {
  return m_;
}
- (void)setM:(id<JavaUtilMap>)m {
  JreOperatorRetainedAssign(&m_, m);
}
@synthesize m = m_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&m_, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)clear {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) containsKeyWithId:key];
}

- (BOOL)containsValueWithId:(id)value {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) containsValueWithId:value];
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_UnmodifiableMap_UnmodifiableEntrySet alloc] initWithJavaUtilSet:((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) entrySet])] autorelease];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) isEqual:object];
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) getWithId:key];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) hash];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) isEmpty];
}

- (id<JavaUtilSet>)keySet {
  return [[[JavaUtilCollections_UnmodifiableSet alloc] initWithJavaUtilSet:((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) keySet])] autorelease];
}

- (id)putWithId:(id)key
         withId:(id)value {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (id)removeWithId:(id)key {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (int)size {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) size];
}

- (id<JavaUtilCollection>)values {
  return [[[JavaUtilCollections_UnmodifiableCollection alloc] initWithJavaUtilCollection:((id<JavaUtilCollection>) [((id<JavaUtilMap>) NIL_CHK(m_)) values])] autorelease];
}

- (NSString *)description {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&m_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableMap *typedCopy = (JavaUtilCollections_UnmodifiableMap *) copy;
  typedCopy.m = m_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedMap>)sm {
  return sm_;
}
- (void)setSm:(id<JavaUtilSortedMap>)sm {
  JreOperatorRetainedAssign(&sm_, sm);
}
@synthesize sm = sm_;

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map {
  if ((self = [super initWithJavaUtilMap:map])) {
    JreOperatorRetainedAssign(&sm_, map);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) comparator]);
}

- (id)firstKey {
  return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) firstKey];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)before {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) headMapWithId:before])] autorelease];
}

- (id)lastKey {
  return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) lastKey];
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)start
                               withId:(id)end {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) subMapWithId:start withId:end])] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)after {
  return [[[JavaUtilCollections_UnmodifiableSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) tailMapWithId:after])] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&sm_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableSortedMap *typedCopy = (JavaUtilCollections_UnmodifiableSortedMap *) copy;
  typedCopy.sm = sm_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_UnmodifiableSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedSet>)ss {
  return ss_;
}
- (void)setSs:(id<JavaUtilSortedSet>)ss {
  JreOperatorRetainedAssign(&ss_, ss);
}
@synthesize ss = ss_;

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)set {
  if ((self = [super initWithJavaUtilSet:set])) {
    JreOperatorRetainedAssign(&ss_, set);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) comparator]);
}

- (id)first {
  return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) first];
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)before {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) headSetWithId:before])] autorelease];
}

- (id)last {
  return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) last];
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)start
                               withId:(id)end {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) subSetWithId:start withId:end])] autorelease];
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)after {
  return [[[JavaUtilCollections_UnmodifiableSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) tailSetWithId:after])] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&ss_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_UnmodifiableSortedSet *typedCopy = (JavaUtilCollections_UnmodifiableSortedSet *) copy;
  typedCopy.ss = ss_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedListIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilListIterator>)i {
  return i_;
}
- (void)setI:(id<JavaUtilListIterator>)i {
  JreOperatorRetainedAssign(&i_, i);
}
@synthesize i = i_;
- (IOSClass *)type {
  return type_;
}
- (void)setType:(IOSClass *)type {
  JreOperatorRetainedAssign(&type_, type);
}
@synthesize type = type_;

- (id)initWithJavaUtilListIterator:(id<JavaUtilListIterator>)i
                      withIOSClass:(IOSClass *)type {
  if ((self = [super init])) {
    self.i = i;
    self.type = type;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)hasNext {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) hasNext];
}

- (id)next {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) next];
}

- (void)remove {
  [((id<JavaUtilListIterator>) NIL_CHK(i_)) remove];
}

- (BOOL)hasPrevious {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) hasPrevious];
}

- (id)previous {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) previous];
}

- (int)nextIndex {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) nextIndex];
}

- (int)previousIndex {
  return [((id<JavaUtilListIterator>) NIL_CHK(i_)) previousIndex];
}

- (void)setWithId:(id)obj {
  [((id<JavaUtilListIterator>) NIL_CHK(i_)) setWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)addWithId:(id)obj {
  [((id<JavaUtilListIterator>) NIL_CHK(i_)) addWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&type_, nil);
  JreOperatorRetainedAssign(&i_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedListIterator *typedCopy = (JavaUtilCollections_CheckedListIterator *) copy;
  typedCopy.i = i_;
  typedCopy.type = type_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:i_ name:@"i"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:type_ name:@"type"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedCollection

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilCollection>)c {
  return c_;
}
- (void)setC:(id<JavaUtilCollection>)c {
  JreOperatorRetainedAssign(&c_, c);
}
@synthesize c = c_;
- (IOSClass *)type {
  return type_;
}
- (void)setType:(IOSClass *)type {
  JreOperatorRetainedAssign(&type_, type);
}
@synthesize type = type_;

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)c
                    withIOSClass:(IOSClass *)type {
  if ((self = [super init])) {
    if (c == nil || type == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.c = c;
    self.type = type;
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)size {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEmpty];
}

- (BOOL)containsWithId:(id)obj {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsWithId:obj];
}

- (id<JavaUtilIterator>)iterator {
  id<JavaUtilIterator> i = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(c_)) iterator]);
  if ([(id) i conformsToProtocol: @protocol(JavaUtilListIterator)]) {
    i = [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:(id<JavaUtilListIterator>) i withIOSClass:type_] autorelease];
  }
  return i;
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)arr {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) toArrayWithNSObjectArray:arr];
}

- (BOOL)addWithId:(id)obj {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) addWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (BOOL)removeWithId:(id)obj {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) removeWithId:obj];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) containsAllWithJavaUtilCollection:c1];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  IOSObjectArray *array = [((id<JavaUtilCollection>) NIL_CHK(c1)) toArray];
  {
    IOSObjectArray *a__ = array;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id o = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
      [JavaUtilCollections checkTypeWithId:o withIOSClass:type_];
    }
  }
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) addAllWithJavaUtilCollection:(id<JavaUtilList>) ((id<JavaUtilList>) [JavaUtilArrays asListWithNSObjectArray:array])];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) removeAllWithJavaUtilCollection:c1];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) retainAllWithJavaUtilCollection:c1];
}

- (void)clear {
  [((id<JavaUtilCollection>) NIL_CHK(c_)) clear];
}

- (NSString *)description {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&type_, nil);
  JreOperatorRetainedAssign(&c_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedCollection *typedCopy = (JavaUtilCollections_CheckedCollection *) copy;
  typedCopy.c = c_;
  typedCopy.type = type_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:c_ name:@"c"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:type_ name:@"type"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilList>)l {
  return l_;
}
- (void)setL:(id<JavaUtilList>)l {
  JreOperatorRetainedAssign(&l_, l);
}
@synthesize l = l_;

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
              withIOSClass:(IOSClass *)type {
  if ((self = [super initWithJavaUtilCollection:l withIOSClass:type])) {
    self.l = l;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)addAllWithInt:(int)index
withJavaUtilCollection:(id<JavaUtilCollection>)c1 {
  IOSObjectArray *array = [((id<JavaUtilCollection>) NIL_CHK(c1)) toArray];
  {
    IOSObjectArray *a__ = array;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id o = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
      [JavaUtilCollections checkTypeWithId:o withIOSClass:type_];
    }
  }
  return [((id<JavaUtilList>) NIL_CHK(l_)) addAllWithInt:index withJavaUtilCollection:(id<JavaUtilList>) ((id<JavaUtilList>) [JavaUtilArrays asListWithNSObjectArray:array])];
}

- (id)getWithInt:(int)index {
  return [((id<JavaUtilList>) NIL_CHK(l_)) getWithInt:index];
}

- (id)setWithInt:(int)index
          withId:(id)obj {
  return [((id<JavaUtilList>) NIL_CHK(l_)) setWithInt:index withId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (void)addWithInt:(int)index
            withId:(id)obj {
  [((id<JavaUtilList>) NIL_CHK(l_)) addWithInt:index withId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:type_]];
}

- (id)removeWithInt:(int)index {
  return [((id<JavaUtilList>) NIL_CHK(l_)) removeWithInt:index];
}

- (int)indexOfWithId:(id)obj {
  return [((id<JavaUtilList>) NIL_CHK(l_)) indexOfWithId:obj];
}

- (int)lastIndexOfWithId:(id)obj {
  return [((id<JavaUtilList>) NIL_CHK(l_)) lastIndexOfWithId:obj];
}

- (id<JavaUtilListIterator>)listIterator {
  return [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(l_)) listIterator]) withIOSClass:type_] autorelease];
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)index {
  return [[[JavaUtilCollections_CheckedListIterator alloc] initWithJavaUtilListIterator:((id<JavaUtilListIterator>) [((id<JavaUtilList>) NIL_CHK(l_)) listIteratorWithInt:index]) withIOSClass:type_] autorelease];
}

- (id<JavaUtilList>)subListWithInt:(int)fromIndex
                           withInt:(int)toIndex {
  return ((id<JavaUtilList>) [JavaUtilCollections checkedListWithJavaUtilList:((id<JavaUtilList>) [((id<JavaUtilList>) NIL_CHK(l_)) subListWithInt:fromIndex withInt:toIndex]) withIOSClass:type_]);
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilList>) NIL_CHK(l_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilList>) NIL_CHK(l_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&l_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedList *typedCopy = (JavaUtilCollections_CheckedList *) copy;
  typedCopy.l = l_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:l_ name:@"l"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedRandomAccessList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilList:(id<JavaUtilList>)l
              withIOSClass:(IOSClass *)type {
  return JreMemDebugAdd([super initWithJavaUtilList:l withIOSClass:type]);
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap_Entry>)e {
  return e_;
}
- (void)setE:(id<JavaUtilMap_Entry>)e {
  JreOperatorRetainedAssign(&e_, e);
}
@synthesize e = e_;
- (IOSClass *)valueType {
  return valueType_;
}
- (void)setValueType:(IOSClass *)valueType {
  JreOperatorRetainedAssign(&valueType_, valueType);
}
@synthesize valueType = valueType_;

- (id)initWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)e
                   withIOSClass:(IOSClass *)valueType {
  if ((self = [super init])) {
    if (e == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.e = e;
    self.valueType = valueType;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)getKey {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(e_)) getKey];
}

- (id)getValue {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(e_)) getValue];
}

- (id)setValueWithId:(id)obj {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(e_)) setValueWithId:[JavaUtilCollections checkTypeWithId:obj withIOSClass:valueType_]];
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(e_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap_Entry>) NIL_CHK(e_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&valueType_, nil);
  JreOperatorRetainedAssign(&e_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedMap_CheckedEntry *typedCopy = (JavaUtilCollections_CheckedMap_CheckedEntry *) copy;
  typedCopy.e = e_;
  typedCopy.valueType = valueType_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:e_ name:@"e"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntrySet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSet>)s {
  return s_;
}
- (void)setS:(id<JavaUtilSet>)s {
  JreOperatorRetainedAssign(&s_, s);
}
@synthesize s = s_;
- (IOSClass *)valueType {
  return valueType_;
}
- (void)setValueType:(IOSClass *)valueType {
  JreOperatorRetainedAssign(&valueType_, valueType);
}
@synthesize valueType = valueType_;

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)s
             withIOSClass:(IOSClass *)valueType {
  if ((self = [super init])) {
    self.s = s;
    self.valueType = valueType;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator alloc] initWithJavaUtilIterator:((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(s_)) iterator]) withIOSClass:valueType_] autorelease];
}

- (IOSObjectArray *)toArray   {
    IOSClass *type = [IOSClass classWithClass:[NSObject class]];
    IOSObjectArray *result =
    [[IOSObjectArray alloc] initWithLength:[self size] type:type];
    AUTORELEASE(result);
    return [self toArrayWithNSObjectArray:result];
  }

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents   {
    NSUInteger i = 0;
    id<JavaUtilIterator> it = [self iterator];
    while ([it hasNext]) {
      [contents replaceObjectAtIndex:i++ withObject:[it next]];
    }
    return contents;
  }

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) retainAllWithJavaUtilCollection:c];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) removeAllWithJavaUtilCollection:c];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) containsAllWithJavaUtilCollection:c];
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)removeWithId:(id)o {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) removeWithId:o];
}

- (BOOL)containsWithId:(id)o {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) containsWithId:o];
}

- (BOOL)addWithId:(id<JavaUtilMap_Entry>)o {
  @throw [[[JavaLangUnsupportedOperationException alloc] init] autorelease];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) isEmpty];
}

- (void)clear {
  [((id<JavaUtilSet>) NIL_CHK(s_)) clear];
}

- (int)size {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) size];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) hash];
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilSet>) NIL_CHK(s_)) isEqual:object];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&valueType_, nil);
  JreOperatorRetainedAssign(&s_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedMap_CheckedEntrySet *typedCopy = (JavaUtilCollections_CheckedMap_CheckedEntrySet *) copy;
  typedCopy.s = s_;
  typedCopy.valueType = valueType_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:s_ name:@"s"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilIterator>)i {
  return i_;
}
- (void)setI:(id<JavaUtilIterator>)i {
  JreOperatorRetainedAssign(&i_, i);
}
@synthesize i = i_;
- (IOSClass *)valueType {
  return valueType_;
}
- (void)setValueType:(IOSClass *)valueType {
  JreOperatorRetainedAssign(&valueType_, valueType);
}
@synthesize valueType = valueType_;

- (id)initWithJavaUtilIterator:(id<JavaUtilIterator>)i
                  withIOSClass:(IOSClass *)valueType {
  if ((self = [super init])) {
    self.i = i;
    self.valueType = valueType;
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)hasNext {
  return [((id<JavaUtilIterator>) NIL_CHK(i_)) hasNext];
}

- (void)remove {
  [((id<JavaUtilIterator>) NIL_CHK(i_)) remove];
}

- (id<JavaUtilMap_Entry>)next {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntry alloc] initWithJavaUtilMap_Entry:((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(i_)) next]) withIOSClass:valueType_] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&valueType_, nil);
  JreOperatorRetainedAssign(&i_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator *typedCopy = (JavaUtilCollections_CheckedMap_CheckedEntrySet_CheckedEntryIterator *) copy;
  typedCopy.i = i_;
  typedCopy.valueType = valueType_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:i_ name:@"i"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)initWithJavaUtilSet:(id<JavaUtilSet>)s
             withIOSClass:(IOSClass *)type {
  return JreMemDebugAdd([super initWithJavaUtilCollection:s withIOSClass:type]);
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilCollection>) NIL_CHK(c_)) hash];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilCollections_CheckedSortedSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedSet>)ss {
  return ss_;
}
- (void)setSs:(id<JavaUtilSortedSet>)ss {
  JreOperatorRetainedAssign(&ss_, ss);
}
@synthesize ss = ss_;

- (id)initWithJavaUtilSortedSet:(id<JavaUtilSortedSet>)s
                   withIOSClass:(IOSClass *)type {
  if ((self = [super initWithJavaUtilSet:s withIOSClass:type])) {
    self.ss = s;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) comparator]);
}

- (id<JavaUtilSortedSet>)subSetWithId:(id)fromElement
                               withId:(id)toElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) subSetWithId:fromElement withId:toElement]) withIOSClass:type_] autorelease];
}

- (id<JavaUtilSortedSet>)headSetWithId:(id)toElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) headSetWithId:toElement]) withIOSClass:type_] autorelease];
}

- (id<JavaUtilSortedSet>)tailSetWithId:(id)fromElement {
  return [[[JavaUtilCollections_CheckedSortedSet alloc] initWithJavaUtilSortedSet:((id<JavaUtilSortedSet>) [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) tailSetWithId:fromElement]) withIOSClass:type_] autorelease];
}

- (id)first {
  return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) first];
}

- (id)last {
  return [((id<JavaUtilSortedSet>) NIL_CHK(ss_)) last];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&ss_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedSortedSet *typedCopy = (JavaUtilCollections_CheckedSortedSet *) copy;
  typedCopy.ss = ss_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:ss_ name:@"ss"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap>)m {
  return m_;
}
- (void)setM:(id<JavaUtilMap>)m {
  JreOperatorRetainedAssign(&m_, m);
}
@synthesize m = m_;
- (IOSClass *)keyType {
  return keyType_;
}
- (void)setKeyType:(IOSClass *)keyType {
  JreOperatorRetainedAssign(&keyType_, keyType);
}
@synthesize keyType = keyType_;
- (IOSClass *)valueType {
  return valueType_;
}
- (void)setValueType:(IOSClass *)valueType {
  JreOperatorRetainedAssign(&valueType_, valueType);
}
@synthesize valueType = valueType_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)m
             withIOSClass:(IOSClass *)keyType
             withIOSClass:(IOSClass *)valueType {
  if ((self = [super init])) {
    if (m == nil || keyType == nil || valueType == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    self.m = m;
    self.keyType = keyType;
    self.valueType = valueType;
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)size {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) size];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) isEmpty];
}

- (BOOL)containsKeyWithId:(id)key {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) containsKeyWithId:key];
}

- (BOOL)containsValueWithId:(id)value {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) containsValueWithId:value];
}

- (id)getWithId:(id)key {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) getWithId:key];
}

- (id)putWithId:(id)key
         withId:(id)value {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) putWithId:[JavaUtilCollections checkTypeWithId:key withIOSClass:keyType_] withId:[JavaUtilCollections checkTypeWithId:value withIOSClass:valueType_]];
}

- (id)removeWithId:(id)key {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) removeWithId:key];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)map {
  int size = [((id<JavaUtilMap>) NIL_CHK(map)) size];
  if (size == 0) {
    return;
  }
  IOSObjectArray *entries = [[[IOSObjectArray alloc] initWithLength:size type:[IOSClass classWithProtocol:@protocol(JavaUtilMap_Entry)]] autorelease];
  id<JavaUtilIterator> it = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(map)) entrySet]) iterator]);
  for (int i = 0; i < size; i++) {
    id<JavaUtilMap_Entry> e = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(it)) next]);
    [JavaUtilCollections checkTypeWithId:((id) [((id<JavaUtilMap_Entry>) NIL_CHK(e)) getKey]) withIOSClass:keyType_];
    [JavaUtilCollections checkTypeWithId:((id) [((id<JavaUtilMap_Entry>) NIL_CHK(e)) getValue]) withIOSClass:valueType_];
    [((IOSObjectArray *) NIL_CHK(entries)) replaceObjectAtIndex:i withObject:e];
  }
  for (int i = 0; i < size; i++) {
    [((id<JavaUtilMap>) NIL_CHK(m_)) putWithId:((id) [((id<JavaUtilMap_Entry>) [((IOSObjectArray *) NIL_CHK(entries)) objectAtIndex:i]) getKey]) withId:((id) [((id<JavaUtilMap_Entry>) [((IOSObjectArray *) NIL_CHK(entries)) objectAtIndex:i]) getValue])];
  }
}

- (void)clear {
  [((id<JavaUtilMap>) NIL_CHK(m_)) clear];
}

- (id<JavaUtilSet>)keySet {
  return ((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) keySet]);
}

- (id<JavaUtilCollection>)values {
  return ((id<JavaUtilCollection>) [((id<JavaUtilMap>) NIL_CHK(m_)) values]);
}

- (id<JavaUtilSet>)entrySet {
  return [[[JavaUtilCollections_CheckedMap_CheckedEntrySet alloc] initWithJavaUtilSet:((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(m_)) entrySet]) withIOSClass:valueType_] autorelease];
}

- (BOOL)isEqual:(id)obj {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) isEqual:obj];
}

- (NSUInteger)hash {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) hash];
}

- (NSString *)description {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&valueType_, nil);
  JreOperatorRetainedAssign(&keyType_, nil);
  JreOperatorRetainedAssign(&m_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedMap *typedCopy = (JavaUtilCollections_CheckedMap *) copy;
  typedCopy.m = m_;
  typedCopy.keyType = keyType_;
  typedCopy.valueType = valueType_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:keyType_ name:@"keyType"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:valueType_ name:@"valueType"]];
  return result;
}

@end
@implementation JavaUtilCollections_CheckedSortedMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilSortedMap>)sm {
  return sm_;
}
- (void)setSm:(id<JavaUtilSortedMap>)sm {
  JreOperatorRetainedAssign(&sm_, sm);
}
@synthesize sm = sm_;

- (id)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)m
                   withIOSClass:(IOSClass *)keyType
                   withIOSClass:(IOSClass *)valueType {
  if ((self = [super initWithJavaUtilMap:m withIOSClass:keyType withIOSClass:valueType])) {
    self.sm = m;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilComparator>)comparator {
  return ((id<JavaUtilComparator>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) comparator]);
}

- (id<JavaUtilSortedMap>)subMapWithId:(id)fromKey
                               withId:(id)toKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) subMapWithId:fromKey withId:toKey]) withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id<JavaUtilSortedMap>)headMapWithId:(id)toKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) headMapWithId:toKey]) withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id<JavaUtilSortedMap>)tailMapWithId:(id)fromKey {
  return [[[JavaUtilCollections_CheckedSortedMap alloc] initWithJavaUtilSortedMap:((id<JavaUtilSortedMap>) [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) tailMapWithId:fromKey]) withIOSClass:keyType_ withIOSClass:valueType_] autorelease];
}

- (id)firstKey {
  return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) firstKey];
}

- (id)lastKey {
  return [((id<JavaUtilSortedMap>) NIL_CHK(sm_)) lastKey];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&sm_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_CheckedSortedMap *typedCopy = (JavaUtilCollections_CheckedSortedMap *) copy;
  typedCopy.sm = sm_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:sm_ name:@"sm"]];
  return result;
}

@end
@implementation JavaUtilCollections_SetFromMap

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap>)m {
  return m_;
}
- (void)setM:(id<JavaUtilMap>)m {
  JreOperatorRetainedAssign(&m_, m);
}
@synthesize m = m_;
- (id<JavaUtilSet>)backingSet {
  return backingSet_;
}
- (void)setBackingSet:(id<JavaUtilSet>)backingSet {
  JreOperatorRetainedAssign(&backingSet_, backingSet);
}
@synthesize backingSet = backingSet_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&m_, map);
    JreOperatorRetainedAssign(&backingSet_, ((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(map)) keySet]));
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)isEqual:(id)object {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) isEqual:object];
}

- (NSUInteger)hash {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) hash];
}

- (BOOL)addWithId:(id)object {
  return ((JavaLangBoolean *) [((id<JavaUtilMap>) NIL_CHK(m_)) putWithId:object withId:[JavaLangBoolean getTRUE]]) == nil;
}

- (void)clear {
  [((id<JavaUtilMap>) NIL_CHK(m_)) clear];
}

- (NSString *)description {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) description];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) isEmpty];
}

- (BOOL)removeWithId:(id)object {
  return ((JavaLangBoolean *) [((id<JavaUtilMap>) NIL_CHK(m_)) removeWithId:object]) != nil;
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) retainAllWithJavaUtilCollection:collection];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  return [((id<JavaUtilSet>) NIL_CHK(backingSet_)) toArrayWithNSObjectArray:contents];
}

- (id<JavaUtilIterator>)iterator {
  return ((id<JavaUtilIterator>) [((id<JavaUtilSet>) NIL_CHK(backingSet_)) iterator]);
}

- (int)size {
  return [((id<JavaUtilMap>) NIL_CHK(m_)) size];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&backingSet_, nil);
  JreOperatorRetainedAssign(&m_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_SetFromMap *typedCopy = (JavaUtilCollections_SetFromMap *) copy;
  typedCopy.m = m_;
  typedCopy.backingSet = backingSet_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:m_ name:@"m"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:backingSet_ name:@"backingSet"]];
  return result;
}

@end
@implementation JavaUtilCollections_AsLIFOQueue

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilDeque>)q {
  return q_;
}
- (void)setQ:(id<JavaUtilDeque>)q {
  JreOperatorRetainedAssign(&q_, q);
}
@synthesize q = q_;

- (id)initWithJavaUtilDeque:(id<JavaUtilDeque>)deque {
  if ((self = [super init])) {
    self.q = deque;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return ((id<JavaUtilIterator>) [((id<JavaUtilDeque>) NIL_CHK(q_)) iterator]);
}

- (int)size {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) size];
}

- (BOOL)offerWithId:(id)o {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) offerFirstWithId:o];
}

- (id)peek {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) peekFirst];
}

- (id)poll {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) pollFirst];
}

- (BOOL)addWithId:(id)o {
  [((id<JavaUtilDeque>) NIL_CHK(q_)) pushWithId:o];
  return YES;
}

- (void)clear {
  [((id<JavaUtilDeque>) NIL_CHK(q_)) clear];
}

- (id)element {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) getFirst];
}

- (id)remove {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) pop];
}

- (BOOL)containsWithId:(id)object {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) containsWithId:object];
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) containsAllWithJavaUtilCollection:collection];
}

- (BOOL)isEmpty {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) isEmpty];
}

- (BOOL)removeWithId:(id)object {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) removeWithId:object];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) removeAllWithJavaUtilCollection:collection];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) retainAllWithJavaUtilCollection:collection];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)contents {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) toArrayWithNSObjectArray:contents];
}

- (NSString *)description {
  return [((id<JavaUtilDeque>) NIL_CHK(q_)) description];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&q_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_AsLIFOQueue *typedCopy = (JavaUtilCollections_AsLIFOQueue *) copy;
  typedCopy.q = q_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:q_ name:@"q"]];
  return result;
}

@end
@implementation JavaUtilCollections_$1

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilIterator>)it {
  return it_;
}
- (void)setIt:(id<JavaUtilIterator>)it {
  JreOperatorRetainedAssign(&it_, it);
}
@synthesize it = it_;
- (id<JavaUtilCollection>)val$c {
  return val$c_;
}
- (void)setVal$c:(id<JavaUtilCollection>)val$c {
  JreOperatorRetainedAssign(&val$c_, val$c);
}
@synthesize val$c = val$c_;

- (BOOL)hasMoreElements {
  return [((id<JavaUtilIterator>) NIL_CHK(it_)) hasNext];
}

- (id)nextElement {
  return [((id<JavaUtilIterator>) NIL_CHK(it_)) next];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)outer$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$c_, outer$0);
    JreOperatorRetainedAssign(&it_, ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(val$c_)) iterator]));
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&val$c_, nil);
  JreOperatorRetainedAssign(&it_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilCollections_$1 *typedCopy = (JavaUtilCollections_$1 *) copy;
  typedCopy.it = it_;
  typedCopy.val$c = val$c_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:it_ name:@"it"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:val$c_ name:@"val$c"]];
  return result;
}

@end
