//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/regex/Splitter.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSObjectArray.h"
#import "java/lang/Integer.h"
#import "java/util/ArrayList.h"
#import "java/util/List.h"
#import "java/util/regex/Matcher.h"
#import "java/util/regex/Pattern.h"
#import "java/util/regex/Splitter.h"

@implementation JavaUtilRegexSplitter

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:JavaUtilRegexSplitter_METACHARACTERS_ name:@"JavaUtilRegexSplitter_METACHARACTERS_"]];
  return result;
}

static NSString * JavaUtilRegexSplitter_METACHARACTERS_ = @"\\?*+[](){}^$.|";

+ (NSString *)METACHARACTERS {
  return JavaUtilRegexSplitter_METACHARACTERS_;
}

- (id)init {
  return (self = JreMemDebugAdd([super init]));
}

+ (IOSObjectArray *)fastSplitWithNSString:(NSString *)re
                             withNSString:(NSString *)input
                                  withInt:(int)limit {
  int len = [NIL_CHK(re) length];
  if (len == 0) {
    return nil;
  }
  unichar ch = [NIL_CHK(re) charAtWithInt:0];
  if (len == 1 && [NIL_CHK(JavaUtilRegexSplitter_METACHARACTERS_) indexOf:ch] == -1) {
  }
  else if (len == 2 && ch == '\\') {
    ch = [NIL_CHK(re) charAtWithInt:1];
    if ([NIL_CHK(JavaUtilRegexSplitter_METACHARACTERS_) indexOf:ch] == -1) {
      return nil;
    }
  }
  else {
    return nil;
  }
  if ([NIL_CHK(input) isEmpty]) {
    return [IOSObjectArray arrayWithObjects:(id[]){ @"" } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  JavaUtilArrayList *list = [[[JavaUtilArrayList alloc] init] autorelease];
  int maxSize = limit <= 0 ? JavaLangInteger_MAX_VALUE : limit;
  int begin = 0;
  int end;
  while ((end = [NIL_CHK(input) indexOf:ch fromIndex:begin]) != -1 && [((JavaUtilArrayList *) NIL_CHK(list)) size] + 1 < maxSize) {
    [((JavaUtilArrayList *) NIL_CHK(list)) addWithId:[NIL_CHK(input) substring:begin endIndex:end]];
    begin = end + 1;
  }
  return [JavaUtilRegexSplitter finishSplitWithJavaUtilList:list withNSString:input withInt:begin withInt:maxSize withInt:limit];
}

+ (IOSObjectArray *)splitWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                                     withNSString:(NSString *)re
                                     withNSString:(NSString *)input
                                          withInt:(int)limit {
  IOSObjectArray *fastResult = [JavaUtilRegexSplitter fastSplitWithNSString:re withNSString:input withInt:limit];
  if (fastResult != nil) {
    return fastResult;
  }
  if ([NIL_CHK(input) isEmpty]) {
    return [IOSObjectArray arrayWithObjects:(id[]){ @"" } count:1 type:[IOSClass classWithClass:[NSString class]]];
  }
  JavaUtilArrayList *list = [[[JavaUtilArrayList alloc] init] autorelease];
  int maxSize = limit <= 0 ? JavaLangInteger_MAX_VALUE : limit;
  JavaUtilRegexMatcher *matcher = [[[JavaUtilRegexMatcher alloc] initWithJavaUtilRegexPattern:pattern withJavaLangCharSequence:input] autorelease];
  int begin = 0;
  while ([((JavaUtilRegexMatcher *) NIL_CHK(matcher)) find] && [((JavaUtilArrayList *) NIL_CHK(list)) size] + 1 < maxSize) {
    [((JavaUtilArrayList *) NIL_CHK(list)) addWithId:[NIL_CHK(input) substring:begin endIndex:[((JavaUtilRegexMatcher *) NIL_CHK(matcher)) start]]];
    begin = [((JavaUtilRegexMatcher *) NIL_CHK(matcher)) end];
  }
  return [JavaUtilRegexSplitter finishSplitWithJavaUtilList:list withNSString:input withInt:begin withInt:maxSize withInt:limit];
}

+ (IOSObjectArray *)finishSplitWithJavaUtilList:(id<JavaUtilList>)list
                                   withNSString:(NSString *)input
                                        withInt:(int)begin
                                        withInt:(int)maxSize
                                        withInt:(int)limit {
  if (begin < [NIL_CHK(input) length]) {
    [((id<JavaUtilList>) NIL_CHK(list)) addWithId:[NIL_CHK(input) substring:begin]];
  }
  else if (limit != 0) {
    [((id<JavaUtilList>) NIL_CHK(list)) addWithId:@""];
  }
  if (limit == 0) {
    int i = [((id<JavaUtilList>) NIL_CHK(list)) size] - 1;
    while (i >= 0 && [((NSString *) [((id<JavaUtilList>) NIL_CHK(list)) getWithInt:i]) isEmpty]) {
      [((id<JavaUtilList>) NIL_CHK(list)) removeWithInt:i];
      i--;
    }
  }
  return [((id<JavaUtilList>) NIL_CHK(list)) toArrayWithNSObjectArray:[[[IOSObjectArray alloc] initWithLength:[((id<JavaUtilList>) NIL_CHK(list)) size] type:[IOSClass classWithClass:[NSString class]]] autorelease]];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
