//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/android/libcore/luni/src/main/java/java/util/regex/Pattern.java
//
//  Created by retechretech on 13-3-15.
//

#import "IOSObjectArray.h"
#import "java/lang/CharSequence.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/UnsupportedOperationException.h"
#import "java/util/regex/Matcher.h"
#import "java/util/regex/Pattern.h"
#import "java/util/regex/Splitter.h"
#import "java/util/regex/PatternSyntaxException.h"

@implementation JavaUtilRegexPattern

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (NSString *)pattern_ {
  return [[pattern__ retain] autorelease];
}
- (void)setPattern_:(NSString *)pattern_ {
  JreOperatorRetainedAssign(&pattern__, pattern_);
}
@synthesize pattern_ = pattern__;
@synthesize flags_ = flags__;
- (id)nativePattern {
  return [[nativePattern_ retain] autorelease];
}
- (void)setNativePattern:(id)nativePattern {
  JreOperatorRetainedAssign(&nativePattern_, nativePattern);
}
@synthesize nativePattern = nativePattern_;

+ (int)UNIX_LINES {
  return JavaUtilRegexPattern_UNIX_LINES;
}

+ (int)CASE_INSENSITIVE {
  return JavaUtilRegexPattern_CASE_INSENSITIVE;
}

+ (int)COMMENTS {
  return JavaUtilRegexPattern_COMMENTS;
}

+ (int)MULTILINE {
  return JavaUtilRegexPattern_MULTILINE;
}

+ (int)LITERAL {
  return JavaUtilRegexPattern_LITERAL;
}

+ (int)DOTALL {
  return JavaUtilRegexPattern_DOTALL;
}

+ (int)UNICODE_CASE {
  return JavaUtilRegexPattern_UNICODE_CASE;
}

+ (int)CANON_EQ {
  return JavaUtilRegexPattern_CANON_EQ;
}

- (JavaUtilRegexMatcher *)matcherWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [[[JavaUtilRegexMatcher alloc] initWithJavaUtilRegexPattern:self withJavaLangCharSequence:input] autorelease];
}

- (IOSObjectArray *)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)input
                                          withInt:(int)limit {
  return [JavaUtilRegexSplitter splitWithJavaUtilRegexPattern:self withNSString:pattern__ withNSString:[((id<JavaLangCharSequence>) NIL_CHK(input)) description] withInt:limit];
}

- (IOSObjectArray *)splitWithJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [self splitWithJavaLangCharSequence:input withInt:0];
}

- (NSString *)pattern {
  return pattern__;
}

- (NSString *)description {
  return pattern__;
}

- (int)flags {
  return flags__;
}

+ (JavaUtilRegexPattern *)compileWithNSString:(NSString *)regularExpression
                                      withInt:(int)flags {
  return [[[JavaUtilRegexPattern alloc] initWithNSString:regularExpression withInt:flags] autorelease];
}

+ (JavaUtilRegexPattern *)compileWithNSString:(NSString *)pattern {
  return [[[JavaUtilRegexPattern alloc] initWithNSString:pattern withInt:0] autorelease];
}

- (id)initWithNSString:(NSString *)pattern
               withInt:(int)flags {
  if ((self = [super init])) {
    if ((flags & ~JavaUtilRegexPattern_ALL_FLAGS) != 0) {
      @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"unknown flag"] autorelease];
    }
    if ((flags & JavaUtilRegexPattern_CANON_EQ) != 0) {
      @throw [[[JavaLangUnsupportedOperationException alloc] initWithNSString:@"CANON_EQ flag not supported"] autorelease];
    }
    self.pattern_ = pattern;
    self.flags_ = flags;
    [self compile];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)compile {
  if (pattern__ == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"pattern == null"] autorelease];
  }
  NSString *icuPattern = pattern__;
  if ((flags__ & JavaUtilRegexPattern_LITERAL) != 0) {
    icuPattern = [JavaUtilRegexPattern quoteWithNSString:pattern__];
  }
  int iosFlags = [self javaToIosFlags];
  [self compileImplWithNSString:icuPattern withInt:iosFlags];
}

- (int)javaToIosFlags {
  int iosFlags = 0;
  if ((flags__ & JavaUtilRegexPattern_CASE_INSENSITIVE) > 0) {
    iosFlags |= 1 << 0;
  }
  if ((flags__ & JavaUtilRegexPattern_COMMENTS) > 0) {
    iosFlags |= 1 << 1;
  }
  if ((flags__ & JavaUtilRegexPattern_LITERAL) > 0) {
    iosFlags |= 1 << 2;
  }
  if ((flags__ & JavaUtilRegexPattern_DOTALL) > 0) {
    iosFlags |= 1 << 3;
  }
  if ((flags__ & JavaUtilRegexPattern_MULTILINE) > 0) {
    iosFlags |= 1 << 4;
  }
  if ((flags__ & JavaUtilRegexPattern_UNIX_LINES) > 0) {
    iosFlags |= 1 << 5;
  }
  if ((flags__ & JavaUtilRegexPattern_UNICODE_CASE) > 0) {
    iosFlags |= 1 << 6;
  }
  return iosFlags;
}

+ (BOOL)matchesWithNSString:(NSString *)regularExpression
   withJavaLangCharSequence:(id<JavaLangCharSequence>)input {
  return [((JavaUtilRegexMatcher *) [[[JavaUtilRegexMatcher alloc] initWithJavaUtilRegexPattern:[[[JavaUtilRegexPattern alloc] initWithNSString:regularExpression withInt:0] autorelease] withJavaLangCharSequence:input] autorelease]) matches];
}

+ (NSString *)quoteWithNSString:(NSString *)string {
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] init] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"\\Q"];
  int apos = 0;
  int k;
  while ((k = [NIL_CHK(string) indexOfString:@"\\E" fromIndex:apos]) >= 0) {
    [[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[NIL_CHK(string) substring:apos endIndex:k + 2]] appendWithNSString:@"\\\\E\\Q"];
    apos = k + 2;
  }
  return [[[((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[NIL_CHK(string) substring:apos]] appendWithNSString:@"\\E"] description];
}

- (void)dealloc {
  @try {
    [self releaseNativePattern];
    JreOperatorRetainedAssign(&nativePattern_, nil);
    JreOperatorRetainedAssign(&pattern__, nil);
  }
  @finally {
    JreMemDebugRemove(self);
    [super dealloc];
  }
}

- (void)compileImplWithNSString:(NSString *)icuPattern
                        withInt:(int)iosFlags   {
    NSError *error = NULL;
    NSRegularExpression *regex =
    [NSRegularExpression regularExpressionWithPattern:icuPattern
    options:iosFlags
    error:&error];
    if (error != NULL) {
      id exception = AUTORELEASE([[JavaUtilRegexPatternSyntaxException alloc]
      initWithNSString:[error localizedDescription]
      withNSString:icuPattern
      withInt:-1]);
      @throw exception;
    }
    #if ! __has_feature(objc_arc)
    [regex retain];
    #endif
    nativePattern_ = regex;
  }

- (void)releaseNativePattern   {
    #if ! __has_feature(objc_arc)
    [nativePattern_ release];
    #endif
    nativePattern_ = 0;
  }

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilRegexPattern *typedCopy = (JavaUtilRegexPattern *) copy;
  typedCopy.pattern_ = pattern__;
  typedCopy.flags_ = flags__;
  typedCopy.nativePattern = nativePattern_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:pattern__ name:@"pattern_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nativePattern_ name:@"nativePattern"]];
  return result;
}

@end
