//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/java/util/regex/MatchResultImpl.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSIntArray.h"
#import "java/util/regex/MatchResultImpl.h"

@implementation JavaUtilRegexMatchResultImpl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (NSString *)text {
  return text_;
}
- (void)setText:(NSString *)text {
  JreOperatorRetainedAssign(&text_, text);
}
@synthesize text = text_;
- (IOSIntArray *)offsets {
  return offsets_;
}
- (void)setOffsets:(IOSIntArray *)offsets {
  JreOperatorRetainedAssign(&offsets_, offsets);
}
@synthesize offsets = offsets_;

- (id)initWithNSString:(NSString *)text
withJavaLangIntegerArray:(IOSIntArray *)offsets {
  if ((self = [super init])) {
    self.text = text;
    self.offsets = [((IOSIntArray *) NIL_CHK(offsets)) clone];
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)end {
  return [self endWithInt:0];
}

- (int)endWithInt:(int)group {
  return [((IOSIntArray *) NIL_CHK(offsets_)) intAtIndex:2 * group + 1];
}

- (NSString *)group {
  return [NIL_CHK(text_) substring:[self start] endIndex:[self end]];
}

- (NSString *)groupWithInt:(int)group {
  int from = [((IOSIntArray *) NIL_CHK(offsets_)) intAtIndex:group * 2];
  int to = [((IOSIntArray *) NIL_CHK(offsets_)) intAtIndex:(group * 2) + 1];
  if (from == -1 || to == -1) {
    return nil;
  }
  else {
    return [NIL_CHK(text_) substring:from endIndex:to];
  }
}

- (int)groupCount {
  return ((int) [((IOSIntArray *) NIL_CHK(offsets_)) count] / 2) - 1;
}

- (int)start {
  return [self startWithInt:0];
}

- (int)startWithInt:(int)group {
  return [((IOSIntArray *) NIL_CHK(offsets_)) intAtIndex:2 * group];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&offsets_, nil);
  JreOperatorRetainedAssign(&text_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilRegexMatchResultImpl *typedCopy = (JavaUtilRegexMatchResultImpl *) copy;
  typedCopy.text = text_;
  typedCopy.offsets = offsets_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:text_ name:@"text"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:offsets_ name:@"offsets"]];
  return result;
}

@end
