//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/MiniEnumSet.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Enum.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/Long.h"
#import "java/lang/NullPointerException.h"
#import "java/util/Collection.h"
#import "java/util/EnumSet.h"
#import "java/util/Iterator.h"
#import "java/util/MiniEnumSet.h"
#import "java/util/NoSuchElementException.h"

@implementation JavaUtilMiniEnumSet

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize size_ = size__;
- (IOSObjectArray *)enums {
  return enums_;
}
- (void)setEnums:(IOSObjectArray *)enums {
  JreOperatorRetainedAssign(&enums_, enums);
}
@synthesize enums = enums_;
@synthesize bits = bits_;

- (id)initWithIOSClass:(IOSClass *)elementType {
  if ((self = [super initWithIOSClass:elementType])) {
    JreOperatorRetainedAssign(&enums_, [NIL_CHK(elementType) getEnumConstants]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id<JavaUtilIterator>)iterator {
  return [[[JavaUtilMiniEnumSet_MiniEnumSetIterator alloc] initWithJavaUtilMiniEnumSet:self] autorelease];
}

- (int)size {
  return size__;
}

- (void)clear {
  bits_ = 0;
  size__ = 0;
}

- (BOOL)addWithId:(JavaLangEnum *)element {
  if (element == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (!([element isKindOfClass:[JavaLangEnum class]]) || ![self isValidTypeWithIOSClass:((IOSClass *) [NIL_CHK(element) getDeclaringClass])]) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
  long long int oldBits = bits_;
  long long int newBits = oldBits | (1LL << [NIL_CHK(element) ordinal]);
  if (oldBits != newBits) {
    bits_ = newBits;
    size__++;
    return YES;
  }
  return NO;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty]) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      @throw [[[JavaLangClassCastException alloc] init] autorelease];
    }
    JavaUtilMiniEnumSet *miniSet = (JavaUtilMiniEnumSet *) set;
    long long int oldBits = bits_;
    long long int newBits = oldBits | ((JavaUtilMiniEnumSet *) NIL_CHK(miniSet)).bits;
    bits_ = newBits;
    size__ = [JavaLangLong bitCountWithLongInt:newBits];
    return (oldBits != newBits);
  }
  return (BOOL) [super addAllWithJavaUtilCollection:collection];
}

- (BOOL)containsWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[NIL_CHK(object) getClass]]) {
    return NO;
  }
  JavaLangEnum *element = (JavaLangEnum *) object;
  int ordinal = [((JavaLangEnum *) NIL_CHK(element)) ordinal];
  return (bits_ & (1LL << ordinal)) != 0;
}

- (BOOL)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty]) {
    return YES;
  }
  if ([(id) collection isKindOfClass:[JavaUtilMiniEnumSet class]]) {
    JavaUtilMiniEnumSet *set = (JavaUtilMiniEnumSet *) collection;
    long long int setBits = ((JavaUtilMiniEnumSet *) NIL_CHK(set)).bits;
    return [self isValidTypeWithIOSClass:((JavaUtilMiniEnumSet *) NIL_CHK(set)).elementClass] && ((bits_ & setBits) == setBits);
  }
  return !([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) && [super containsAllWithJavaUtilCollection:collection];
}

- (BOOL)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if ([((id<JavaUtilCollection>) NIL_CHK(collection)) isEmpty]) {
    return NO;
  }
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      return NO;
    }
    JavaUtilMiniEnumSet *miniSet = (JavaUtilMiniEnumSet *) set;
    long long int oldBits = bits_;
    long long int newBits = oldBits & ~((JavaUtilMiniEnumSet *) NIL_CHK(miniSet)).bits;
    if (oldBits != newBits) {
      bits_ = newBits;
      size__ = [JavaLangLong bitCountWithLongInt:newBits];
      return YES;
    }
    return NO;
  }
  return (BOOL) [super removeAllWithJavaUtilCollection:collection];
}

- (BOOL)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ([(id) collection isKindOfClass:[JavaUtilEnumSet class]]) {
    JavaUtilEnumSet *set = (JavaUtilEnumSet *) collection;
    if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
      if (size__ > 0) {
        [self clear];
        return YES;
      }
      else {
        return NO;
      }
    }
    JavaUtilMiniEnumSet *miniSet = (JavaUtilMiniEnumSet *) set;
    long long int oldBits = bits_;
    long long int newBits = oldBits & ((JavaUtilMiniEnumSet *) NIL_CHK(miniSet)).bits;
    if (oldBits != newBits) {
      bits_ = newBits;
      size__ = [JavaLangLong bitCountWithLongInt:newBits];
      return YES;
    }
    return NO;
  }
  return (BOOL) [super retainAllWithJavaUtilCollection:collection];
}

- (BOOL)removeWithId:(id)object {
  if (object == nil || ![self isValidTypeWithIOSClass:[NIL_CHK(object) getClass]]) {
    return NO;
  }
  JavaLangEnum *element = (JavaLangEnum *) object;
  int ordinal = [((JavaLangEnum *) NIL_CHK(element)) ordinal];
  long long int oldBits = bits_;
  long long int newBits = oldBits & ~(1LL << ordinal);
  if (oldBits != newBits) {
    bits_ = newBits;
    size__--;
    return YES;
  }
  return NO;
}

- (BOOL)isEqual:(id)object {
  if (!([object isKindOfClass:[JavaUtilEnumSet class]])) {
    return (BOOL) [super isEqual:object];
  }
  JavaUtilEnumSet *set = (JavaUtilEnumSet *) object;
  if (![self isValidTypeWithIOSClass:((JavaUtilEnumSet *) NIL_CHK(set)).elementClass]) {
    return size__ == 0 && [((JavaUtilEnumSet *) NIL_CHK(set)) isEmpty];
  }
  return bits_ == ((JavaUtilMiniEnumSet *) set).bits;
}

- (void)complement {
  if ((int) [((IOSObjectArray *) NIL_CHK(enums_)) count] != 0) {
    bits_ = ~bits_;
    bits_ &= ((long long) (((unsigned long long) -1LL) >> (JavaUtilMiniEnumSet_MAX_ELEMENTS - (int) [((IOSObjectArray *) NIL_CHK(enums_)) count])));
    size__ = (int) [((IOSObjectArray *) NIL_CHK(enums_)) count] - size__;
  }
}

- (void)setRangeWithId:(JavaLangEnum *)start
                withId:(JavaLangEnum *)end {
  if (start == nil || end == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int length = [NIL_CHK(end) ordinal] - [NIL_CHK(start) ordinal] + 1;
  long long int range = ((long long) (((unsigned long long) -1LL) >> (JavaUtilMiniEnumSet_MAX_ELEMENTS - length))) << [NIL_CHK(start) ordinal];
  bits_ |= range;
  size__ = [JavaLangLong bitCountWithLongInt:bits_];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&enums_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilMiniEnumSet *typedCopy = (JavaUtilMiniEnumSet *) copy;
  typedCopy.size_ = size__;
  typedCopy.enums = enums_;
  typedCopy.bits = bits_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:enums_ name:@"enums"]];
  return result;
}

@end
@implementation JavaUtilMiniEnumSet_MiniEnumSetIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaUtilMiniEnumSet *)this$0 {
  return this$0_;
}
- (void)setThis$0:(JavaUtilMiniEnumSet *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
@synthesize currentBits = currentBits_;
@synthesize mask = mask_;
- (JavaLangEnum *)last {
  return last_;
}
- (void)setLast:(JavaLangEnum *)last {
  JreOperatorRetainedAssign(&last_, last);
}
@synthesize last = last_;

- (BOOL)hasNext {
  return mask_ != 0;
}

- (JavaLangEnum *)next {
  if (mask_ == 0) {
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  int ordinal = [JavaLangLong numberOfTrailingZerosWithLongInt:mask_];
  JreOperatorRetainedAssign(&last_, [((IOSObjectArray *) NIL_CHK(this$0_.enums)) objectAtIndex:ordinal]);
  currentBits_ &= ~mask_;
  mask_ = currentBits_ & -currentBits_;
  return last_;
}

- (void)remove {
  if (last_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
  }
  [this$0_ removeWithId:last_];
  JreOperatorRetainedAssign(&last_, nil);
}

- (id)initWithJavaUtilMiniEnumSet:(JavaUtilMiniEnumSet *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    currentBits_ = outer$.bits;
    mask_ = currentBits_ & -currentBits_;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&last_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilMiniEnumSet_MiniEnumSetIterator *typedCopy = (JavaUtilMiniEnumSet_MiniEnumSetIterator *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.currentBits = currentBits_;
  typedCopy.mask = mask_;
  typedCopy.last = last_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:this$0_ name:@"this$0"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:last_ name:@"last"]];
  return result;
}

@end
