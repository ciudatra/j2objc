//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: apache_harmony/classlib/modules/luni/src/main/java/java/util/Arrays.java
//
//  Created by retechretech on 13-4-14.
//

#import "IOSBooleanArray.h"
#import "IOSByteArray.h"
#import "IOSCharArray.h"
#import "IOSClass.h"
#import "IOSDoubleArray.h"
#import "IOSFloatArray.h"
#import "IOSIntArray.h"
#import "IOSLongArray.h"
#import "IOSObjectArray.h"
#import "IOSShortArray.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/ArrayStoreException.h"
#import "java/lang/AssertionError.h"
#import "java/lang/Boolean.h"
#import "java/lang/Byte.h"
#import "java/lang/Character.h"
#import "java/lang/ClassCastException.h"
#import "java/lang/Comparable.h"
#import "java/lang/Double.h"
#import "java/lang/Float.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/Math.h"
#import "java/lang/NegativeArraySizeException.h"
#import "java/lang/NullPointerException.h"
#import "java/lang/Short.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/System.h"
#import "java/lang/reflect/Array.h"
#import "java/util/Arrays.h"
#import "java/util/Comparator.h"
#import "java/util/List.h"

@implementation JavaUtilArrays

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)init {
  return (self = JreMemDebugAdd([super init]));
}

+ (id<JavaUtilList>)asListWithNSObjectArray:(IOSObjectArray *)array {
  return [[[JavaUtilArrays_ArrayList alloc] initWithNSObjectArray:array] autorelease];
}

+ (int)binarySearchWithJavaLangByteArray:(IOSByteArray *)array
                                withChar:(char)value {
  return [JavaUtilArrays binarySearchWithJavaLangByteArray:array withInt:0 withInt:(int) [((IOSByteArray *) NIL_CHK(array)) count] withChar:value];
}

+ (int)binarySearchWithJavaLangByteArray:(IOSByteArray *)array
                                 withInt:(int)startIndex
                                 withInt:(int)endIndex
                                withChar:(char)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSByteArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    char midVal = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangCharacterArray:(IOSCharArray *)array
                                  withUnichar:(unichar)value {
  return [JavaUtilArrays binarySearchWithJavaLangCharacterArray:array withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(array)) count] withUnichar:value];
}

+ (int)binarySearchWithJavaLangCharacterArray:(IOSCharArray *)array
                                      withInt:(int)startIndex
                                      withInt:(int)endIndex
                                  withUnichar:(unichar)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSCharArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    unichar midVal = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangDoubleArray:(IOSDoubleArray *)array
                                withDouble:(double)value {
  return [JavaUtilArrays binarySearchWithJavaLangDoubleArray:array withInt:0 withInt:(int) [((IOSDoubleArray *) NIL_CHK(array)) count] withDouble:value];
}

+ (int)binarySearchWithJavaLangDoubleArray:(IOSDoubleArray *)array
                                   withInt:(int)startIndex
                                   withInt:(int)endIndex
                                withDouble:(double)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSDoubleArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    double midVal = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else if (midVal != 0 && midVal == value) {
      return mid;
    }
    else {
      long long int midValBits = [JavaLangDouble doubleToLongBitsWithDouble:midVal];
      long long int valueBits = [JavaLangDouble doubleToLongBitsWithDouble:value];
      if (midValBits < valueBits) {
        lo = mid + 1;
      }
      else if (midValBits > valueBits) {
        hi = mid - 1;
      }
      else {
        return mid;
      }
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangFloatArray:(IOSFloatArray *)array
                                withFloat:(float)value {
  return [JavaUtilArrays binarySearchWithJavaLangFloatArray:array withInt:0 withInt:(int) [((IOSFloatArray *) NIL_CHK(array)) count] withFloat:value];
}

+ (int)binarySearchWithJavaLangFloatArray:(IOSFloatArray *)array
                                  withInt:(int)startIndex
                                  withInt:(int)endIndex
                                withFloat:(float)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSFloatArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    float midVal = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else if (midVal != 0 && midVal == value) {
      return mid;
    }
    else {
      int midValBits = [JavaLangFloat floatToIntBitsWithFloat:midVal];
      int valueBits = [JavaLangFloat floatToIntBitsWithFloat:value];
      if (midValBits < valueBits) {
        lo = mid + 1;
      }
      else if (midValBits > valueBits) {
        hi = mid - 1;
      }
      else {
        return mid;
      }
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangIntegerArray:(IOSIntArray *)array
                                    withInt:(int)value {
  return [JavaUtilArrays binarySearchWithJavaLangIntegerArray:array withInt:0 withInt:(int) [((IOSIntArray *) NIL_CHK(array)) count] withInt:value];
}

+ (int)binarySearchWithJavaLangIntegerArray:(IOSIntArray *)array
                                    withInt:(int)startIndex
                                    withInt:(int)endIndex
                                    withInt:(int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSIntArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midVal = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangLongArray:(IOSLongArray *)array
                             withLongInt:(long long int)value {
  return [JavaUtilArrays binarySearchWithJavaLangLongArray:array withInt:0 withInt:(int) [((IOSLongArray *) NIL_CHK(array)) count] withLongInt:value];
}

+ (int)binarySearchWithJavaLangLongArray:(IOSLongArray *)array
                                 withInt:(int)startIndex
                                 withInt:(int)endIndex
                             withLongInt:(long long int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSLongArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    long long int midVal = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withId:(id)value {
  return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withId:value];
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                             withInt:(int)startIndex
                             withInt:(int)endIndex
                              withId:(id)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midValCmp = [((id<JavaLangComparable>) [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:mid]) compareToWithId:value];
    if (midValCmp < 0) {
      lo = mid + 1;
    }
    else if (midValCmp > 0) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                              withId:(id)value
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withId:value withJavaUtilComparator:comparator];
}

+ (int)binarySearchWithNSObjectArray:(IOSObjectArray *)array
                             withInt:(int)startIndex
                             withInt:(int)endIndex
                              withId:(id)value
              withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    return [JavaUtilArrays binarySearchWithNSObjectArray:array withInt:startIndex withInt:endIndex withId:value];
  }
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    int midValCmp = [((id<JavaUtilComparator>) NIL_CHK(comparator)) compareWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:mid] withId:value];
    if (midValCmp < 0) {
      lo = mid + 1;
    }
    else if (midValCmp > 0) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (int)binarySearchWithJavaLangShortArray:(IOSShortArray *)array
                             withShortInt:(short int)value {
  return [JavaUtilArrays binarySearchWithJavaLangShortArray:array withInt:0 withInt:(int) [((IOSShortArray *) NIL_CHK(array)) count] withShortInt:value];
}

+ (int)binarySearchWithJavaLangShortArray:(IOSShortArray *)array
                                  withInt:(int)startIndex
                                  withInt:(int)endIndex
                             withShortInt:(short int)value {
  [JavaUtilArrays checkBinarySearchBoundsWithInt:startIndex withInt:endIndex withInt:(int) [((IOSShortArray *) NIL_CHK(array)) count]];
  int lo = startIndex;
  int hi = endIndex - 1;
  while (lo <= hi) {
    int mid = (int) (((unsigned int) (lo + hi)) >> 1);
    short int midVal = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:mid];
    if (midVal < value) {
      lo = mid + 1;
    }
    else if (midVal > value) {
      hi = mid - 1;
    }
    else {
      return mid;
    }
  }
  return ~lo;
}

+ (void)checkBinarySearchBoundsWithInt:(int)startIndex
                               withInt:(int)endIndex
                               withInt:(int)length {
  if (startIndex > endIndex) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (startIndex < 0 || endIndex > length) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
}

+ (void)fillWithJavaLangByteArray:(IOSByteArray *)array
                         withChar:(char)value {
  for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(array)) count]; i++) {
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:i withByte:value];
  }
}

+ (void)fillWithJavaLangByteArray:(IOSByteArray *)array
                          withInt:(int)start
                          withInt:(int)end
                         withChar:(char)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSByteArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:i withByte:value];
  }
}

+ (void)fillWithJavaLangShortArray:(IOSShortArray *)array
                      withShortInt:(short int)value {
  for (int i = 0; i < (int) [((IOSShortArray *) NIL_CHK(array)) count]; i++) {
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:i withShort:value];
  }
}

+ (void)fillWithJavaLangShortArray:(IOSShortArray *)array
                           withInt:(int)start
                           withInt:(int)end
                      withShortInt:(short int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSShortArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:i withShort:value];
  }
}

+ (void)fillWithJavaLangCharacterArray:(IOSCharArray *)array
                           withUnichar:(unichar)value {
  for (int i = 0; i < (int) [((IOSCharArray *) NIL_CHK(array)) count]; i++) {
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:i withChar:value];
  }
}

+ (void)fillWithJavaLangCharacterArray:(IOSCharArray *)array
                               withInt:(int)start
                               withInt:(int)end
                           withUnichar:(unichar)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSCharArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:i withChar:value];
  }
}

+ (void)fillWithJavaLangIntegerArray:(IOSIntArray *)array
                             withInt:(int)value {
  for (int i = 0; i < (int) [((IOSIntArray *) NIL_CHK(array)) count]; i++) {
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:i withInt:value];
  }
}

+ (void)fillWithJavaLangIntegerArray:(IOSIntArray *)array
                             withInt:(int)start
                             withInt:(int)end
                             withInt:(int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSIntArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:i withInt:value];
  }
}

+ (void)fillWithJavaLangLongArray:(IOSLongArray *)array
                      withLongInt:(long long int)value {
  for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(array)) count]; i++) {
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:i withLong:value];
  }
}

+ (void)fillWithJavaLangLongArray:(IOSLongArray *)array
                          withInt:(int)start
                          withInt:(int)end
                      withLongInt:(long long int)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSLongArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:i withLong:value];
  }
}

+ (void)fillWithJavaLangFloatArray:(IOSFloatArray *)array
                         withFloat:(float)value {
  for (int i = 0; i < (int) [((IOSFloatArray *) NIL_CHK(array)) count]; i++) {
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:i withFloat:value];
  }
}

+ (void)fillWithJavaLangFloatArray:(IOSFloatArray *)array
                           withInt:(int)start
                           withInt:(int)end
                         withFloat:(float)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSFloatArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:i withFloat:value];
  }
}

+ (void)fillWithJavaLangDoubleArray:(IOSDoubleArray *)array
                         withDouble:(double)value {
  for (int i = 0; i < (int) [((IOSDoubleArray *) NIL_CHK(array)) count]; i++) {
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:i withDouble:value];
  }
}

+ (void)fillWithJavaLangDoubleArray:(IOSDoubleArray *)array
                            withInt:(int)start
                            withInt:(int)end
                         withDouble:(double)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSDoubleArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:i withDouble:value];
  }
}

+ (void)fillWithJavaLangBooleanArray:(IOSBooleanArray *)array
                            withBOOL:(BOOL)value {
  for (int i = 0; i < (int) [((IOSBooleanArray *) NIL_CHK(array)) count]; i++) {
    [((IOSBooleanArray *) NIL_CHK(array)) replaceBooleanAtIndex:i withBoolean:value];
  }
}

+ (void)fillWithJavaLangBooleanArray:(IOSBooleanArray *)array
                             withInt:(int)start
                             withInt:(int)end
                            withBOOL:(BOOL)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSBooleanArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSBooleanArray *) NIL_CHK(array)) replaceBooleanAtIndex:i withBoolean:value];
  }
}

+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                       withId:(id)value {
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(array)) count]; i++) {
    [((IOSObjectArray *) NIL_CHK(array)) replaceObjectAtIndex:i withObject:value];
  }
}

+ (void)fillWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end
                       withId:(id)value {
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  for (int i = start; i < end; i++) {
    [((IOSObjectArray *) NIL_CHK(array)) replaceObjectAtIndex:i withObject:value];
  }
}

+ (int)hashCodeWithJavaLangBooleanArray:(IOSBooleanArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSBooleanArray *a__ = array;
    int n__ = (int) [((IOSBooleanArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      BOOL element = [((IOSBooleanArray *) NIL_CHK(a__)) booleanAtIndex:i__];
      hashCode = 31 * hashCode + (element ? 1231 : 1237);
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangIntegerArray:(IOSIntArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSIntArray *a__ = array;
    int n__ = (int) [((IOSIntArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      int element = [((IOSIntArray *) NIL_CHK(a__)) intAtIndex:i__];
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangShortArray:(IOSShortArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSShortArray *a__ = array;
    int n__ = (int) [((IOSShortArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      short int element = [((IOSShortArray *) NIL_CHK(a__)) shortAtIndex:i__];
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangCharacterArray:(IOSCharArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSCharArray *a__ = array;
    int n__ = (int) [((IOSCharArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      unichar element = [((IOSCharArray *) NIL_CHK(a__)) charAtIndex:i__];
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangByteArray:(IOSByteArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSByteArray *a__ = array;
    int n__ = (int) [((IOSByteArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      char element = [((IOSByteArray *) NIL_CHK(a__)) byteAtIndex:i__];
      hashCode = 31 * hashCode + element;
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangLongArray:(IOSLongArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSLongArray *a__ = array;
    int n__ = (int) [((IOSLongArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      long long int elementValue = [((IOSLongArray *) NIL_CHK(a__)) longAtIndex:i__];
      hashCode = 31 * hashCode + (int) (elementValue ^ ((long long) (((unsigned long long) elementValue) >> 32)));
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangFloatArray:(IOSFloatArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSFloatArray *a__ = array;
    int n__ = (int) [((IOSFloatArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      float element = [((IOSFloatArray *) NIL_CHK(a__)) floatAtIndex:i__];
      hashCode = 31 * hashCode + [JavaLangFloat floatToIntBitsWithFloat:element];
    }
  }
  return hashCode;
}

+ (int)hashCodeWithJavaLangDoubleArray:(IOSDoubleArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSDoubleArray *a__ = array;
    int n__ = (int) [((IOSDoubleArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      double element = [((IOSDoubleArray *) NIL_CHK(a__)) doubleAtIndex:i__];
      long long int v = [JavaLangDouble doubleToLongBitsWithDouble:element];
      hashCode = 31 * hashCode + (int) (v ^ ((long long) (((unsigned long long) v) >> 32)));
    }
  }
  return hashCode;
}

+ (int)hashCodeWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return 0;
  }
  int hashCode = 1;
  {
    IOSObjectArray *a__ = array;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id element = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
      int elementHashCode;
      if (element == nil) {
        elementHashCode = 0;
      }
      else {
        elementHashCode = [(element) hash];
      }
      hashCode = 31 * hashCode + elementHashCode;
    }
  }
  return hashCode;
}

+ (int)deepHashCodeWithNSObjectArray:(IOSObjectArray *)array {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (BOOL)equalsWithJavaLangByteArray:(IOSByteArray *)array1
              withJavaLangByteArray:(IOSByteArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSByteArray *) NIL_CHK(array1)) count] != (int) [((IOSByteArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSByteArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSByteArray *) NIL_CHK(array1)) byteAtIndex:i] != [((IOSByteArray *) NIL_CHK(array2)) byteAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangShortArray:(IOSShortArray *)array1
              withJavaLangShortArray:(IOSShortArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSShortArray *) NIL_CHK(array1)) count] != (int) [((IOSShortArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSShortArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSShortArray *) NIL_CHK(array1)) shortAtIndex:i] != [((IOSShortArray *) NIL_CHK(array2)) shortAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangCharacterArray:(IOSCharArray *)array1
              withJavaLangCharacterArray:(IOSCharArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSCharArray *) NIL_CHK(array1)) count] != (int) [((IOSCharArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSCharArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSCharArray *) NIL_CHK(array1)) charAtIndex:i] != [((IOSCharArray *) NIL_CHK(array2)) charAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangIntegerArray:(IOSIntArray *)array1
              withJavaLangIntegerArray:(IOSIntArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSIntArray *) NIL_CHK(array1)) count] != (int) [((IOSIntArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSIntArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSIntArray *) NIL_CHK(array1)) intAtIndex:i] != [((IOSIntArray *) NIL_CHK(array2)) intAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangLongArray:(IOSLongArray *)array1
              withJavaLangLongArray:(IOSLongArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSLongArray *) NIL_CHK(array1)) count] != (int) [((IOSLongArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSLongArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSLongArray *) NIL_CHK(array1)) longAtIndex:i] != [((IOSLongArray *) NIL_CHK(array2)) longAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangFloatArray:(IOSFloatArray *)array1
              withJavaLangFloatArray:(IOSFloatArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSFloatArray *) NIL_CHK(array1)) count] != (int) [((IOSFloatArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSFloatArray *) NIL_CHK(array1)) count]; i++) {
    if ([JavaLangFloat floatToIntBitsWithFloat:[((IOSFloatArray *) NIL_CHK(array1)) floatAtIndex:i]] != [JavaLangFloat floatToIntBitsWithFloat:[((IOSFloatArray *) NIL_CHK(array2)) floatAtIndex:i]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangDoubleArray:(IOSDoubleArray *)array1
              withJavaLangDoubleArray:(IOSDoubleArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSDoubleArray *) NIL_CHK(array1)) count] != (int) [((IOSDoubleArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSDoubleArray *) NIL_CHK(array1)) count]; i++) {
    if ([JavaLangDouble doubleToLongBitsWithDouble:[((IOSDoubleArray *) NIL_CHK(array1)) doubleAtIndex:i]] != [JavaLangDouble doubleToLongBitsWithDouble:[((IOSDoubleArray *) NIL_CHK(array2)) doubleAtIndex:i]]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithJavaLangBooleanArray:(IOSBooleanArray *)array1
              withJavaLangBooleanArray:(IOSBooleanArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSBooleanArray *) NIL_CHK(array1)) count] != (int) [((IOSBooleanArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSBooleanArray *) NIL_CHK(array1)) count]; i++) {
    if ([((IOSBooleanArray *) NIL_CHK(array1)) booleanAtIndex:i] != [((IOSBooleanArray *) NIL_CHK(array2)) booleanAtIndex:i]) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)equalsWithNSObjectArray:(IOSObjectArray *)array1
              withNSObjectArray:(IOSObjectArray *)array2 {
  if (array1 == array2) {
    return YES;
  }
  if (array1 == nil || array2 == nil || (int) [((IOSObjectArray *) NIL_CHK(array1)) count] != (int) [((IOSObjectArray *) NIL_CHK(array2)) count]) {
    return NO;
  }
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(array1)) count]; i++) {
    id e1 = [((IOSObjectArray *) NIL_CHK(array1)) objectAtIndex:i], e2 = [((IOSObjectArray *) NIL_CHK(array2)) objectAtIndex:i];
    if (!(e1 == nil ? e2 == nil : [NIL_CHK(e1) isEqual:e2])) {
      return NO;
    }
  }
  return YES;
}

+ (BOOL)deepEqualsWithNSObjectArray:(IOSObjectArray *)array1
                  withNSObjectArray:(IOSObjectArray *)array2 {
  @throw [[[JavaLangAssertionError alloc] initWithId:@"not implemented"] autorelease];
}

+ (BOOL)isSameWithDouble:(double)double1
              withDouble:(double)double2 {
  if (double1 == double2 && 0.0 != double1) {
    return YES;
  }
  if ([JavaLangDouble isNaNWithDouble:double1]) {
    return [JavaLangDouble isNaNWithDouble:double2];
  }
  if ([JavaLangDouble isNaNWithDouble:double2]) {
    return NO;
  }
  long long int d1 = [JavaLangDouble doubleToRawLongBitsWithDouble:double1];
  long long int d2 = [JavaLangDouble doubleToRawLongBitsWithDouble:double2];
  return d1 == d2;
}

+ (BOOL)lessThanWithDouble:(double)double1
                withDouble:(double)double2 {
  if (double1 < double2) {
    return YES;
  }
  if (double1 > double2) {
    return NO;
  }
  if (double1 == double2 && 0.0 != double1) {
    return NO;
  }
  if ([JavaLangDouble isNaNWithDouble:double1]) {
    return NO;
  }
  else if ([JavaLangDouble isNaNWithDouble:double2]) {
    return YES;
  }
  long long int d1 = [JavaLangDouble doubleToRawLongBitsWithDouble:double1];
  long long int d2 = [JavaLangDouble doubleToRawLongBitsWithDouble:double2];
  return d1 < d2;
}

+ (BOOL)isSameWithFloat:(float)float1
              withFloat:(float)float2 {
  if (float1 == float2 && 0.0 != float1) {
    return YES;
  }
  if ([JavaLangFloat isNaNWithFloat:float1]) {
    return [JavaLangFloat isNaNWithFloat:float2];
  }
  if ([JavaLangFloat isNaNWithFloat:float2]) {
    return NO;
  }
  int f1 = [JavaLangFloat floatToRawIntBitsWithFloat:float1];
  int f2 = [JavaLangFloat floatToRawIntBitsWithFloat:float2];
  return f1 == f2;
}

+ (BOOL)lessThanWithFloat:(float)float1
                withFloat:(float)float2 {
  if (float1 < float2) {
    return YES;
  }
  if (float1 > float2) {
    return NO;
  }
  if (float1 == float2 && 0.0f != float1) {
    return NO;
  }
  if ([JavaLangFloat isNaNWithFloat:float1]) {
    return NO;
  }
  else if ([JavaLangFloat isNaNWithFloat:float2]) {
    return YES;
  }
  int f1 = [JavaLangFloat floatToRawIntBitsWithFloat:float1];
  int f2 = [JavaLangFloat floatToRawIntBitsWithFloat:float2];
  return f1 < f2;
}

+ (int)med3WithJavaLangByteArray:(IOSByteArray *)array
                         withInt:(int)a
                         withInt:(int)b
                         withInt:(int)c {
  char x = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:a], y = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:b], z = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:c];
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithJavaLangCharacterArray:(IOSCharArray *)array
                              withInt:(int)a
                              withInt:(int)b
                              withInt:(int)c {
  unichar x = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:a], y = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:b], z = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:c];
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithJavaLangDoubleArray:(IOSDoubleArray *)array
                           withInt:(int)a
                           withInt:(int)b
                           withInt:(int)c {
  double x = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:a], y = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:b], z = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:c];
  return [JavaUtilArrays lessThanWithDouble:x withDouble:y] ? ([JavaUtilArrays lessThanWithDouble:y withDouble:z] ? b : ([JavaUtilArrays lessThanWithDouble:x withDouble:z] ? c : a)) : ([JavaUtilArrays lessThanWithDouble:z withDouble:y] ? b : ([JavaUtilArrays lessThanWithDouble:z withDouble:x] ? c : a));
}

+ (int)med3WithJavaLangFloatArray:(IOSFloatArray *)array
                          withInt:(int)a
                          withInt:(int)b
                          withInt:(int)c {
  float x = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:a], y = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:b], z = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:c];
  return [JavaUtilArrays lessThanWithFloat:x withFloat:y] ? ([JavaUtilArrays lessThanWithFloat:y withFloat:z] ? b : ([JavaUtilArrays lessThanWithFloat:x withFloat:z] ? c : a)) : ([JavaUtilArrays lessThanWithFloat:z withFloat:y] ? b : ([JavaUtilArrays lessThanWithFloat:z withFloat:x] ? c : a));
}

+ (int)med3WithJavaLangIntegerArray:(IOSIntArray *)array
                            withInt:(int)a
                            withInt:(int)b
                            withInt:(int)c {
  int x = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:a], y = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:b], z = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:c];
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithJavaLangLongArray:(IOSLongArray *)array
                         withInt:(int)a
                         withInt:(int)b
                         withInt:(int)c {
  long long int x = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:a], y = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:b], z = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:c];
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (int)med3WithJavaLangShortArray:(IOSShortArray *)array
                          withInt:(int)a
                          withInt:(int)b
                          withInt:(int)c {
  short int x = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:a], y = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:b], z = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:c];
  return x < y ? (y < z ? b : (x < z ? c : a)) : (y > z ? b : (x > z ? c : a));
}

+ (void)sortWithJavaLangByteArray:(IOSByteArray *)array {
  [JavaUtilArrays sortWithJavaLangByteArray:array withInt:0 withInt:(int) [((IOSByteArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangByteArray:(IOSByteArray *)array
                          withInt:(int)start
                          withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSByteArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangByteArray:array];
}

+ (void)checkBoundsWithInt:(int)arrLength
                   withInt:(int)start
                   withInt:(int)end {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Start index (%d) is greater than end index (%d)", start, end]] autorelease];
  }
  if (start < 0) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Array index out of range: %d", start]] autorelease];
  }
  if (end > arrLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:[NSString stringWithFormat:@"Array index out of range: %d", end]] autorelease];
  }
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangByteArray:(IOSByteArray *)array {
  char temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:j - 1] > [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:j]; j--) {
        temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:j];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:j withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:j - 1]];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:j - 1 withByte:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangByteArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangByteArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangByteArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangByteArray:array withInt:bottom withInt:middle withInt:top];
  }
  char partionValue = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:b] <= partionValue) {
      if ([((IOSByteArray *) NIL_CHK(array)) byteAtIndex:b] == partionValue) {
        temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:a];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:a++ withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:b]];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:b withByte:temp];
      }
      b++;
    }
    while (c >= b && [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:c] >= partionValue) {
      if ([((IOSByteArray *) NIL_CHK(array)) byteAtIndex:c] == partionValue) {
        temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:c];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:c withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:d]];
        [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:d-- withByte:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:b];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:b++ withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:c]];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:c-- withByte:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:l];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:l++ withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:h]];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:h++ withByte:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSByteArray *) NIL_CHK(array)) byteAtIndex:l];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:l++ withByte:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:h]];
    [((IOSByteArray *) NIL_CHK(array)) replaceByteAtIndex:h++ withByte:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangByteArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangByteArray:array];
  }
}

+ (void)sortWithJavaLangCharacterArray:(IOSCharArray *)array {
  [JavaUtilArrays sortWithJavaLangCharacterArray:array withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangCharacterArray:(IOSCharArray *)array
                               withInt:(int)start
                               withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSCharArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangCharacterArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangCharacterArray:(IOSCharArray *)array {
  unichar temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [((IOSCharArray *) NIL_CHK(array)) charAtIndex:j - 1] > [((IOSCharArray *) NIL_CHK(array)) charAtIndex:j]; j--) {
        temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:j];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:j withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:j - 1]];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:j - 1 withChar:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangCharacterArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangCharacterArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangCharacterArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangCharacterArray:array withInt:bottom withInt:middle withInt:top];
  }
  unichar partionValue = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && [((IOSCharArray *) NIL_CHK(array)) charAtIndex:b] <= partionValue) {
      if ([((IOSCharArray *) NIL_CHK(array)) charAtIndex:b] == partionValue) {
        temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:a];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:a++ withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:b]];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:b withChar:temp];
      }
      b++;
    }
    while (c >= b && [((IOSCharArray *) NIL_CHK(array)) charAtIndex:c] >= partionValue) {
      if ([((IOSCharArray *) NIL_CHK(array)) charAtIndex:c] == partionValue) {
        temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:c];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:c withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:d]];
        [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:d-- withChar:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:b];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:b++ withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:c]];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:c-- withChar:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:l];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:l++ withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:h]];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:h++ withChar:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSCharArray *) NIL_CHK(array)) charAtIndex:l];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:l++ withChar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:h]];
    [((IOSCharArray *) NIL_CHK(array)) replaceCharAtIndex:h++ withChar:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangCharacterArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangCharacterArray:array];
  }
}

+ (void)sortWithJavaLangDoubleArray:(IOSDoubleArray *)array {
  [JavaUtilArrays sortWithJavaLangDoubleArray:array withInt:0 withInt:(int) [((IOSDoubleArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangDoubleArray:(IOSDoubleArray *)array
                            withInt:(int)start
                            withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSDoubleArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangDoubleArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangDoubleArray:(IOSDoubleArray *)array {
  double temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [JavaUtilArrays lessThanWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:j] withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:j - 1]]; j--) {
        temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:j];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:j withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:j - 1]];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:j - 1 withDouble:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangDoubleArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangDoubleArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangDoubleArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangDoubleArray:array withInt:bottom withInt:middle withInt:top];
  }
  double partionValue = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && ![JavaUtilArrays lessThanWithDouble:partionValue withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:b]]) {
      if ([JavaUtilArrays isSameWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:b] withDouble:partionValue]) {
        temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:a];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:a++ withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:b]];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:b withDouble:temp];
      }
      b++;
    }
    while (c >= b && ![JavaUtilArrays lessThanWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:c] withDouble:partionValue]) {
      if ([JavaUtilArrays isSameWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:c] withDouble:partionValue]) {
        temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:c];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:c withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:d]];
        [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:d-- withDouble:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:b];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:b++ withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:c]];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:c-- withDouble:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:l];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:l++ withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:h]];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:h++ withDouble:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:l];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:l++ withDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:h]];
    [((IOSDoubleArray *) NIL_CHK(array)) replaceDoubleAtIndex:h++ withDouble:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangDoubleArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangDoubleArray:array];
  }
}

+ (void)sortWithJavaLangFloatArray:(IOSFloatArray *)array {
  [JavaUtilArrays sortWithJavaLangFloatArray:array withInt:0 withInt:(int) [((IOSFloatArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangFloatArray:(IOSFloatArray *)array
                           withInt:(int)start
                           withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSFloatArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangFloatArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangFloatArray:(IOSFloatArray *)array {
  float temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [JavaUtilArrays lessThanWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:j] withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:j - 1]]; j--) {
        temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:j];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:j withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:j - 1]];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:j - 1 withFloat:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangFloatArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangFloatArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangFloatArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangFloatArray:array withInt:bottom withInt:middle withInt:top];
  }
  float partionValue = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && ![JavaUtilArrays lessThanWithFloat:partionValue withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:b]]) {
      if ([JavaUtilArrays isSameWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:b] withFloat:partionValue]) {
        temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:a];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:a++ withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:b]];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:b withFloat:temp];
      }
      b++;
    }
    while (c >= b && ![JavaUtilArrays lessThanWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:c] withFloat:partionValue]) {
      if ([JavaUtilArrays isSameWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:c] withFloat:partionValue]) {
        temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:c];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:c withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:d]];
        [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:d-- withFloat:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:b];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:b++ withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:c]];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:c-- withFloat:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:l];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:l++ withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:h]];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:h++ withFloat:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:l];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:l++ withFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:h]];
    [((IOSFloatArray *) NIL_CHK(array)) replaceFloatAtIndex:h++ withFloat:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangFloatArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangFloatArray:array];
  }
}

+ (void)sortWithJavaLangIntegerArray:(IOSIntArray *)array {
  [JavaUtilArrays sortWithJavaLangIntegerArray:array withInt:0 withInt:(int) [((IOSIntArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangIntegerArray:(IOSIntArray *)array
                             withInt:(int)start
                             withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSIntArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangIntegerArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangIntegerArray:(IOSIntArray *)array {
  int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [((IOSIntArray *) NIL_CHK(array)) intAtIndex:j - 1] > [((IOSIntArray *) NIL_CHK(array)) intAtIndex:j]; j--) {
        temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:j];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:j withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:j - 1]];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:j - 1 withInt:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangIntegerArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangIntegerArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangIntegerArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangIntegerArray:array withInt:bottom withInt:middle withInt:top];
  }
  int partionValue = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && [((IOSIntArray *) NIL_CHK(array)) intAtIndex:b] <= partionValue) {
      if ([((IOSIntArray *) NIL_CHK(array)) intAtIndex:b] == partionValue) {
        temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:a];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:a++ withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:b]];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:b withInt:temp];
      }
      b++;
    }
    while (c >= b && [((IOSIntArray *) NIL_CHK(array)) intAtIndex:c] >= partionValue) {
      if ([((IOSIntArray *) NIL_CHK(array)) intAtIndex:c] == partionValue) {
        temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:c];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:c withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:d]];
        [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:d-- withInt:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:b];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:b++ withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:c]];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:c-- withInt:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:l];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:l++ withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:h]];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:h++ withInt:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSIntArray *) NIL_CHK(array)) intAtIndex:l];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:l++ withInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:h]];
    [((IOSIntArray *) NIL_CHK(array)) replaceIntAtIndex:h++ withInt:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangIntegerArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangIntegerArray:array];
  }
}

+ (void)sortWithJavaLangLongArray:(IOSLongArray *)array {
  [JavaUtilArrays sortWithJavaLangLongArray:array withInt:0 withInt:(int) [((IOSLongArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangLongArray:(IOSLongArray *)array
                          withInt:(int)start
                          withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSLongArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangLongArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangLongArray:(IOSLongArray *)array {
  long long int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [((IOSLongArray *) NIL_CHK(array)) longAtIndex:j - 1] > [((IOSLongArray *) NIL_CHK(array)) longAtIndex:j]; j--) {
        temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:j];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:j withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:j - 1]];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:j - 1 withLong:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangLongArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangLongArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangLongArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangLongArray:array withInt:bottom withInt:middle withInt:top];
  }
  long long int partionValue = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && [((IOSLongArray *) NIL_CHK(array)) longAtIndex:b] <= partionValue) {
      if ([((IOSLongArray *) NIL_CHK(array)) longAtIndex:b] == partionValue) {
        temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:a];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:a++ withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:b]];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:b withLong:temp];
      }
      b++;
    }
    while (c >= b && [((IOSLongArray *) NIL_CHK(array)) longAtIndex:c] >= partionValue) {
      if ([((IOSLongArray *) NIL_CHK(array)) longAtIndex:c] == partionValue) {
        temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:c];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:c withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:d]];
        [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:d-- withLong:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:b];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:b++ withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:c]];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:c-- withLong:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:l];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:l++ withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:h]];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:h++ withLong:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSLongArray *) NIL_CHK(array)) longAtIndex:l];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:l++ withLong:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:h]];
    [((IOSLongArray *) NIL_CHK(array)) replaceLongAtIndex:h++ withLong:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangLongArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangLongArray:array];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array {
  [JavaUtilArrays sortWithNSObjectArray:array withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
  withNSObjectArray:(IOSObjectArray *)array {
  int length = end - start;
  if (length <= 0) {
    return;
  }
  if (([array isKindOfClass:[IOSObjectArray class]] ? [[(IOSObjectArray *) array elementType] isEqual:[IOSClass classWithClass:[NSString class]]] : NO)) {
    [JavaUtilArrays stableStringSortWithNSStringArray:(IOSObjectArray *) array withInt:start withInt:end];
  }
  else {
    IOSObjectArray *out = [[[IOSObjectArray alloc] initWithLength:end type:[IOSClass classWithClass:[NSObject class]]] autorelease];
    [JavaLangSystem arraycopyWithId:array withInt:start withId:out withInt:start withInt:length];
    [JavaUtilArrays mergeSortWithNSObjectArray:out withNSObjectArray:array withInt:start withInt:end];
  }
}

+ (void)swapWithInt:(int)a
            withInt:(int)b
  withNSObjectArray:(IOSObjectArray *)arr {
  id tmp = [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:a];
  [((IOSObjectArray *) NIL_CHK(arr)) replaceObjectAtIndex:a withObject:[((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:b]];
  [((IOSObjectArray *) NIL_CHK(arr)) replaceObjectAtIndex:b withObject:tmp];
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)inArg
                 withNSObjectArray:(IOSObjectArray *)outArg
                           withInt:(int)start
                           withInt:(int)end {
  int len = end - start;
  if (len <= JavaUtilArrays_SIMPLE_LENGTH) {
    for (int i = start + 1; i < end; i++) {
      id<JavaLangComparable> current = (id<JavaLangComparable>) [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:i];
      id prev = [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:i - 1];
      if ([((id<JavaLangComparable>) NIL_CHK(current)) compareToWithId:prev] < 0) {
        int j = i;
        do {
          [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:j-- withObject:prev];
        }
        while (j > start && [((id<JavaLangComparable>) NIL_CHK(current)) compareToWithId:prev = [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:j - 1]] < 0);
        [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:j withObject:current];
      }
    }
    return;
  }
  int med = (int) (((unsigned int) (end + start)) >> 1);
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:start withInt:med];
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:med withInt:end];
  if ([((id<JavaLangComparable>) [((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:med - 1]) compareToWithId:[((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:med]] <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:start withInt:len];
    return;
  }
  int r = med, i = start;
  do {
    id<JavaLangComparable> fromVal = (id<JavaLangComparable>) [((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:start];
    id<JavaLangComparable> rVal = (id<JavaLangComparable>) [((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:r];
    if ([((id<JavaLangComparable>) NIL_CHK(fromVal)) compareToWithId:rVal] <= 0) {
      int l_1 = [JavaUtilArrays findWithNSObjectArray:inArg withJavaLangComparable:rVal withInt:-1 withInt:start + 1 withInt:med - 1];
      int toCopy = l_1 - start + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:i++ withObject:rVal];
      r++;
      start = l_1 + 1;
    }
    else {
      int r_1 = [JavaUtilArrays findWithNSObjectArray:inArg withJavaLangComparable:fromVal withInt:0 withInt:r + 1 withInt:end - 1];
      int toCopy = r_1 - r + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:i++ withObject:fromVal];
      start++;
      r = r_1 + 1;
    }
  }
  while ((end - r) > 0 && (med - start) > 0);
  if ((end - r) <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:med - start];
  }
  else {
    [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:end - r];
  }
}

+ (void)mergeSortWithNSObjectArray:(IOSObjectArray *)inArg
                 withNSObjectArray:(IOSObjectArray *)outArg
                           withInt:(int)start
                           withInt:(int)end
            withJavaUtilComparator:(id<JavaUtilComparator>)c {
  int len = end - start;
  if (len <= JavaUtilArrays_SIMPLE_LENGTH) {
    for (int i = start + 1; i < end; i++) {
      id current = [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:i];
      id prev = [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:i - 1];
      if ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:prev withId:current] > 0) {
        int j = i;
        do {
          [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:j-- withObject:prev];
        }
        while (j > start && ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:prev = [((IOSObjectArray *) NIL_CHK(outArg)) objectAtIndex:j - 1] withId:current] > 0));
        [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:j withObject:current];
      }
    }
    return;
  }
  int med = (int) (((unsigned int) (end + start)) >> 1);
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:start withInt:med withJavaUtilComparator:c];
  [JavaUtilArrays mergeSortWithNSObjectArray:outArg withNSObjectArray:inArg withInt:med withInt:end withJavaUtilComparator:c];
  if ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:[((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:med - 1] withId:[((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:med]] <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:start withInt:len];
    return;
  }
  int r = med, i = start;
  do {
    id fromVal = [((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:start];
    id rVal = [((IOSObjectArray *) NIL_CHK(inArg)) objectAtIndex:r];
    if ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:fromVal withId:rVal] <= 0) {
      int l_1 = [JavaUtilArrays findWithNSObjectArray:inArg withId:rVal withInt:-1 withInt:start + 1 withInt:med - 1 withJavaUtilComparator:c];
      int toCopy = l_1 - start + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:i++ withObject:rVal];
      r++;
      start = l_1 + 1;
    }
    else {
      int r_1 = [JavaUtilArrays findWithNSObjectArray:inArg withId:fromVal withInt:0 withInt:r + 1 withInt:end - 1 withJavaUtilComparator:c];
      int toCopy = r_1 - r + 1;
      [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:toCopy];
      i += toCopy;
      [((IOSObjectArray *) NIL_CHK(outArg)) replaceObjectAtIndex:i++ withObject:fromVal];
      start++;
      r = r_1 + 1;
    }
  }
  while ((end - r) > 0 && (med - start) > 0);
  if ((end - r) <= 0) {
    [JavaLangSystem arraycopyWithId:inArg withInt:start withId:outArg withInt:i withInt:med - start];
  }
  else {
    [JavaLangSystem arraycopyWithId:inArg withInt:r withId:outArg withInt:i withInt:end - r];
  }
}

+ (int)findWithNSObjectArray:(IOSObjectArray *)arr
      withJavaLangComparable:(id<JavaLangComparable>)val
                     withInt:(int)bnd
                     withInt:(int)l
                     withInt:(int)r {
  int m = l;
  int d = 1;
  while (m <= r) {
    if ([((id<JavaLangComparable>) NIL_CHK(val)) compareToWithId:[((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:m]] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
      break;
    }
    m += d;
    d <<= 1;
  }
  while (l <= r) {
    m = (int) (((unsigned int) (l + r)) >> 1);
    if ([((id<JavaLangComparable>) NIL_CHK(val)) compareToWithId:[((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:m]] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
    }
  }
  return l - 1;
}

+ (int)findWithNSObjectArray:(IOSObjectArray *)arr
                      withId:(id)val
                     withInt:(int)bnd
                     withInt:(int)l
                     withInt:(int)r
      withJavaUtilComparator:(id<JavaUtilComparator>)c {
  int m = l;
  int d = 1;
  while (m <= r) {
    if ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:val withId:[((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:m]] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
      break;
    }
    m += d;
    d <<= 1;
  }
  while (l <= r) {
    m = (int) (((unsigned int) (l + r)) >> 1);
    if ([((id<JavaUtilComparator>) NIL_CHK(c)) compareWithId:val withId:[((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:m]] > bnd) {
      l = m + 1;
    }
    else {
      r = m - 1;
    }
  }
  return l - 1;
}

+ (int)medCharWithInt:(int)a
              withInt:(int)b
              withInt:(int)c
    withNSStringArray:(IOSObjectArray *)arr
              withInt:(int)id_ {
  int ac = [JavaUtilArrays charAtWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:a]) withInt:id_];
  int bc = [JavaUtilArrays charAtWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:b]) withInt:id_];
  int cc = [JavaUtilArrays charAtWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:c]) withInt:id_];
  return ac < bc ? (bc < cc ? b : (ac < cc ? c : a)) : (bc < cc ? (ac < cc ? a : c) : b);
}

+ (int)charAtWithNSString:(NSString *)str
                  withInt:(int)i {
  if (i >= [NIL_CHK(str) length]) {
    return -1;
  }
  return [NIL_CHK(str) charAtWithInt:i];
}

+ (void)copySwapWithNSObjectArray:(IOSObjectArray *)src
                          withInt:(int)from
                withNSObjectArray:(IOSObjectArray *)dst
                          withInt:(int)to
                          withInt:(int)len OBJC_METHOD_FAMILY_NONE {
  if (src == dst && from + len > to) {
    int new_to = to + len - 1;
    for (; from < to; from++, new_to--, len--) {
      [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:new_to withObject:[((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:from]];
    }
    for (; len > 1; from++, new_to--, len -= 2) {
      [JavaUtilArrays swapWithInt:from withInt:new_to withNSObjectArray:dst];
    }
  }
  else {
    to = to + len - 1;
    for (; len > 0; from++, to--, len--) {
      [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:to withObject:[((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:from]];
    }
  }
}

+ (void)stableStringSortWithNSStringArray:(IOSObjectArray *)arr
                                  withInt:(int)start
                                  withInt:(int)end {
  [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:arr withNSStringArray:[[[IOSObjectArray alloc] initWithLength:end type:[IOSClass classWithClass:[NSString class]]] autorelease] withInt:start withInt:end withInt:0];
}

+ (void)stableStringSortWithNSStringArray:(IOSObjectArray *)arr
                        withNSStringArray:(IOSObjectArray *)src
                        withNSStringArray:(IOSObjectArray *)dst
                                  withInt:(int)start
                                  withInt:(int)end
                                  withInt:(int)chId {
  int length = end - start;
  if (length < JavaUtilArrays_SIMPLE_LENGTH) {
    if (src == arr) {
      for (int i = start + 1; i < end; i++) {
        NSString *current = ((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:i]);
        NSString *prev = ((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:i - 1]);
        if ([NIL_CHK(current) compareToWithId:prev] < 0) {
          int j = i;
          do {
            [((IOSObjectArray *) NIL_CHK(arr)) replaceObjectAtIndex:j-- withObject:prev];
          }
          while (j > start && [NIL_CHK(current) compareToWithId:prev = ((NSString *) [((IOSObjectArray *) NIL_CHK(arr)) objectAtIndex:j - 1])] < 0);
          [((IOSObjectArray *) NIL_CHK(arr)) replaceObjectAtIndex:j withObject:current];
        }
      }
    }
    else {
      int actualEnd = end - 1;
      [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:start withObject:((NSString *) [((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:actualEnd--])];
      for (int i = start + 1; i < end; i++, actualEnd--) {
        NSString *current = ((NSString *) [((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:actualEnd]);
        NSString *prev;
        int j = i;
        while (j > start && [NIL_CHK(current) compareToWithId:prev = ((NSString *) [((IOSObjectArray *) NIL_CHK(dst)) objectAtIndex:j - 1])] < 0) {
          [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:j-- withObject:prev];
        }
        [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:j withObject:current];
      }
    }
    return;
  }
  int s;
  int mid = start + length / 2;
  int lo = start;
  int hi = end - 1;
  if (length > 40) {
    s = length / 8;
    lo = [JavaUtilArrays medCharWithInt:lo withInt:lo + s withInt:lo + s * 2 withNSStringArray:src withInt:chId];
    mid = [JavaUtilArrays medCharWithInt:mid - s withInt:mid withInt:mid + s withNSStringArray:src withInt:chId];
    hi = [JavaUtilArrays medCharWithInt:hi withInt:hi - s withInt:hi - s * 2 withNSStringArray:src withInt:chId];
  }
  mid = [JavaUtilArrays medCharWithInt:lo withInt:mid withInt:hi withNSStringArray:src withInt:chId];
  int midVal = [JavaUtilArrays charAtWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:mid]) withInt:chId];
  int a, b, c;
  a = b = start;
  c = end - 1;
  int cmp;
  for (int i = start; i < end; i++) {
    NSString *el = ((NSString *) [((IOSObjectArray *) NIL_CHK(src)) objectAtIndex:i]);
    cmp = [JavaUtilArrays charAtWithNSString:el withInt:chId] - midVal;
    if (cmp < 0) {
      [((IOSObjectArray *) NIL_CHK(src)) replaceObjectAtIndex:a withObject:el];
      a++;
    }
    else if (cmp > 0) {
      [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:c withObject:el];
      c--;
    }
    else {
      [((IOSObjectArray *) NIL_CHK(dst)) replaceObjectAtIndex:b withObject:el];
      b++;
    }
  }
  s = b - start;
  if (s > 0) {
    if (arr == src) {
      [JavaLangSystem arraycopyWithId:dst withInt:start withId:arr withInt:a withInt:s];
    }
    else {
      [JavaUtilArrays copySwapWithNSObjectArray:dst withInt:start withNSObjectArray:arr withInt:a withInt:s];
    }
    if (b >= end && midVal == -1) {
      return;
    }
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:arr withNSStringArray:arr == dst ? src : dst withInt:a withInt:a + s withInt:chId + 1];
  }
  s = a - start;
  if (s > 0) {
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:src withNSStringArray:dst withInt:start withInt:a withInt:chId];
  }
  c++;
  s = end - c;
  if (s > 0) {
    [JavaUtilArrays stableStringSortWithNSStringArray:arr withNSStringArray:dst withNSStringArray:src withInt:c withInt:end withInt:chId];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
                      withInt:(int)start
                      withInt:(int)end
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array withJavaUtilComparator:comparator];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
  withNSObjectArray:(IOSObjectArray *)array
withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  if (comparator == nil) {
    [JavaUtilArrays sortWithInt:start withInt:end withNSObjectArray:array];
  }
  else {
    int length = end - start;
    IOSObjectArray *out = [[[IOSObjectArray alloc] initWithLength:end type:[IOSClass classWithClass:[NSObject class]]] autorelease];
    [JavaLangSystem arraycopyWithId:array withInt:start withId:out withInt:start withInt:length];
    [JavaUtilArrays mergeSortWithNSObjectArray:out withNSObjectArray:array withInt:start withInt:end withJavaUtilComparator:comparator];
  }
}

+ (void)sortWithNSObjectArray:(IOSObjectArray *)array
       withJavaUtilComparator:(id<JavaUtilComparator>)comparator {
  [JavaUtilArrays sortWithInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] withNSObjectArray:array withJavaUtilComparator:comparator];
}

+ (void)sortWithJavaLangShortArray:(IOSShortArray *)array {
  [JavaUtilArrays sortWithJavaLangShortArray:array withInt:0 withInt:(int) [((IOSShortArray *) NIL_CHK(array)) count]];
}

+ (void)sortWithJavaLangShortArray:(IOSShortArray *)array
                           withInt:(int)start
                           withInt:(int)end {
  if (array == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  [JavaUtilArrays checkBoundsWithInt:(int) [((IOSShortArray *) NIL_CHK(array)) count] withInt:start withInt:end];
  [JavaUtilArrays sortWithInt:start withInt:end withJavaLangShortArray:array];
}

+ (void)sortWithInt:(int)start
            withInt:(int)end
withJavaLangShortArray:(IOSShortArray *)array {
  short int temp;
  int length = end - start;
  if (length < 7) {
    for (int i = start + 1; i < end; i++) {
      for (int j = i; j > start && [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:j - 1] > [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:j]; j--) {
        temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:j];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:j withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:j - 1]];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:j - 1 withShort:temp];
      }
    }
    return;
  }
  int middle = (start + end) / 2;
  if (length > 7) {
    int bottom = start;
    int top = end - 1;
    if (length > 40) {
      length /= 8;
      bottom = [JavaUtilArrays med3WithJavaLangShortArray:array withInt:bottom withInt:bottom + length withInt:bottom + (2 * length)];
      middle = [JavaUtilArrays med3WithJavaLangShortArray:array withInt:middle - length withInt:middle withInt:middle + length];
      top = [JavaUtilArrays med3WithJavaLangShortArray:array withInt:top - (2 * length) withInt:top - length withInt:top];
    }
    middle = [JavaUtilArrays med3WithJavaLangShortArray:array withInt:bottom withInt:middle withInt:top];
  }
  short int partionValue = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:middle];
  int a, b, c, d;
  a = b = start;
  c = d = end - 1;
  while (YES) {
    while (b <= c && [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:b] <= partionValue) {
      if ([((IOSShortArray *) NIL_CHK(array)) shortAtIndex:b] == partionValue) {
        temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:a];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:a++ withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:b]];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:b withShort:temp];
      }
      b++;
    }
    while (c >= b && [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:c] >= partionValue) {
      if ([((IOSShortArray *) NIL_CHK(array)) shortAtIndex:c] == partionValue) {
        temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:c];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:c withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:d]];
        [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:d-- withShort:temp];
      }
      c--;
    }
    if (b > c) {
      break;
    }
    temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:b];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:b++ withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:c]];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:c-- withShort:temp];
  }
  length = a - start < b - a ? a - start : b - a;
  int l = start;
  int h = b - length;
  while (length-- > 0) {
    temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:l];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:l++ withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:h]];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:h++ withShort:temp];
  }
  length = d - c < end - 1 - d ? d - c : end - 1 - d;
  l = b;
  h = end - length;
  while (length-- > 0) {
    temp = [((IOSShortArray *) NIL_CHK(array)) shortAtIndex:l];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:l++ withShort:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:h]];
    [((IOSShortArray *) NIL_CHK(array)) replaceShortAtIndex:h++ withShort:temp];
  }
  if ((length = b - a) > 0) {
    [JavaUtilArrays sortWithInt:start withInt:start + length withJavaLangShortArray:array];
  }
  if ((length = d - c) > 0) {
    [JavaUtilArrays sortWithInt:end - length withInt:end withJavaLangShortArray:array];
  }
}

+ (NSString *)toStringWithJavaLangBooleanArray:(IOSBooleanArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSBooleanArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSBooleanArray *) NIL_CHK(array)) count] * 5] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithBOOL:[((IOSBooleanArray *) NIL_CHK(array)) booleanAtIndex:0]];
  for (int i = 1; i < (int) [((IOSBooleanArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithBOOL:[((IOSBooleanArray *) NIL_CHK(array)) booleanAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangByteArray:(IOSByteArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSByteArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSByteArray *) NIL_CHK(array)) count] * 3] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:0]];
  for (int i = 1; i < (int) [((IOSByteArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSByteArray *) NIL_CHK(array)) byteAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangCharacterArray:(IOSCharArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSCharArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSCharArray *) NIL_CHK(array)) count] * 2] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:0]];
  for (int i = 1; i < (int) [((IOSCharArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:[((IOSCharArray *) NIL_CHK(array)) charAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangDoubleArray:(IOSDoubleArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSDoubleArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSDoubleArray *) NIL_CHK(array)) count] * 5] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:0]];
  for (int i = 1; i < (int) [((IOSDoubleArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithDouble:[((IOSDoubleArray *) NIL_CHK(array)) doubleAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangFloatArray:(IOSFloatArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSFloatArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSFloatArray *) NIL_CHK(array)) count] * 5] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:0]];
  for (int i = 1; i < (int) [((IOSFloatArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithFloat:[((IOSFloatArray *) NIL_CHK(array)) floatAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangIntegerArray:(IOSIntArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSIntArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSIntArray *) NIL_CHK(array)) count] * 4] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:0]];
  for (int i = 1; i < (int) [((IOSIntArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSIntArray *) NIL_CHK(array)) intAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangLongArray:(IOSLongArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSLongArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSLongArray *) NIL_CHK(array)) count] * 4] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithLongInt:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:0]];
  for (int i = 1; i < (int) [((IOSLongArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithLongInt:[((IOSLongArray *) NIL_CHK(array)) longAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithJavaLangShortArray:(IOSShortArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSShortArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSShortArray *) NIL_CHK(array)) count] * 4] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:0]];
  for (int i = 1; i < (int) [((IOSShortArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithInt:[((IOSShortArray *) NIL_CHK(array)) shortAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)toStringWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return @"null";
  }
  if ((int) [((IOSObjectArray *) NIL_CHK(array)) count] == 0) {
    return @"[]";
  }
  JavaLangStringBuilder *sb = [[[JavaLangStringBuilder alloc] initWithInt:2 + (int) [((IOSObjectArray *) NIL_CHK(array)) count] * 5] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:0]];
  for (int i = 1; i < (int) [((IOSObjectArray *) NIL_CHK(array)) count]; i++) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]];
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
  return [((JavaLangStringBuilder *) NIL_CHK(sb)) description];
}

+ (NSString *)deepToStringWithNSObjectArray:(IOSObjectArray *)array {
  if (array == nil) {
    return @"null";
  }
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithInt:(int) [((IOSObjectArray *) NIL_CHK(array)) count] * 9] autorelease];
  [JavaUtilArrays deepToStringImplWithNSObjectArray:array withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ array } count:1 type:[IOSClass classWithClass:[NSObject class]]] withJavaLangStringBuilder:buf];
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

+ (void)deepToStringImplWithNSObjectArray:(IOSObjectArray *)array
                        withNSObjectArray:(IOSObjectArray *)origArrays
                withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (array == nil) {
    [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"null"];
    return;
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:'['];
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(array)) count]; i++) {
    if (i != 0) {
      [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@", "];
    }
    id elem = [((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i];
    if (elem == nil) {
      [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"null"];
    }
    else {
      IOSClass *elemClass = [elem getClass];
      if ([NIL_CHK(elemClass) isArray]) {
        IOSClass *elemElemClass = [NIL_CHK(elemClass) getComponentType];
        if ([NIL_CHK(elemElemClass) isPrimitive]) {
          if ([[JavaLangBoolean TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangBooleanArray:(IOSBooleanArray *) elem]];
          }
          else if ([[JavaLangByte TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangByteArray:(IOSByteArray *) elem]];
          }
          else if ([[JavaLangCharacter TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangCharacterArray:(IOSCharArray *) elem]];
          }
          else if ([[JavaLangDouble TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangDoubleArray:(IOSDoubleArray *) elem]];
          }
          else if ([[JavaLangFloat TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangFloatArray:(IOSFloatArray *) elem]];
          }
          else if ([[JavaLangInteger TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangIntegerArray:(IOSIntArray *) elem]];
          }
          else if ([[JavaLangLong TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangLongArray:(IOSLongArray *) elem]];
          }
          else if ([[JavaLangShort TYPE] isEqual:elemElemClass]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:[JavaUtilArrays toStringWithJavaLangShortArray:(IOSShortArray *) elem]];
          }
          else {
            @throw [[[JavaLangAssertionError alloc] init] autorelease];
          }
        }
        else {
          NSAssert(([elem isKindOfClass:[IOSObjectArray class]] ? [[(IOSObjectArray *) elem elementType] isEqual:[IOSClass classWithClass:[NSObject class]]] : NO), @"apache_harmony/classlib/modules/luni/src/main/java/java/util/Arrays.java:3434 condition failed: assert elem instanceof Object[];");
          if ([JavaUtilArrays deepToStringImplContainsWithNSObjectArray:origArrays withId:elem]) {
            [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithNSString:@"[...]"];
          }
          else {
            IOSObjectArray *newArray = (IOSObjectArray *) elem;
            IOSObjectArray *newOrigArrays = [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(origArrays)) count] + 1 type:[IOSClass classWithClass:[NSObject class]]] autorelease];
            [JavaLangSystem arraycopyWithId:origArrays withInt:0 withId:newOrigArrays withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(origArrays)) count]];
            [((IOSObjectArray *) NIL_CHK(newOrigArrays)) replaceObjectAtIndex:(int) [((IOSObjectArray *) NIL_CHK(origArrays)) count] withObject:newArray];
            [JavaUtilArrays deepToStringImplWithNSObjectArray:newArray withNSObjectArray:newOrigArrays withJavaLangStringBuilder:sb];
          }
        }
      }
      else {
        [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithId:[((IOSObjectArray *) NIL_CHK(array)) objectAtIndex:i]];
      }
    }
  }
  [((JavaLangStringBuilder *) NIL_CHK(sb)) appendWithUnichar:']'];
}

+ (BOOL)deepToStringImplContainsWithNSObjectArray:(IOSObjectArray *)origArrays
                                           withId:(id)array {
  if (origArrays == nil || (int) [((IOSObjectArray *) NIL_CHK(origArrays)) count] == 0) {
    return NO;
  }
  {
    IOSObjectArray *a__ = origArrays;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      id element = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
      if (element == array) {
        return YES;
      }
    }
  }
  return NO;
}

+ (IOSBooleanArray *)copyOfWithJavaLangBooleanArray:(IOSBooleanArray *)original
                                            withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangBooleanArray:original withInt:0 withInt:newLength];
}

+ (IOSByteArray *)copyOfWithJavaLangByteArray:(IOSByteArray *)original
                                      withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangByteArray:original withInt:0 withInt:newLength];
}

+ (IOSCharArray *)copyOfWithJavaLangCharacterArray:(IOSCharArray *)original
                                           withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangCharacterArray:original withInt:0 withInt:newLength];
}

+ (IOSDoubleArray *)copyOfWithJavaLangDoubleArray:(IOSDoubleArray *)original
                                          withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangDoubleArray:original withInt:0 withInt:newLength];
}

+ (IOSFloatArray *)copyOfWithJavaLangFloatArray:(IOSFloatArray *)original
                                        withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangFloatArray:original withInt:0 withInt:newLength];
}

+ (IOSIntArray *)copyOfWithJavaLangIntegerArray:(IOSIntArray *)original
                                        withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangIntegerArray:original withInt:0 withInt:newLength];
}

+ (IOSLongArray *)copyOfWithJavaLangLongArray:(IOSLongArray *)original
                                      withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangLongArray:original withInt:0 withInt:newLength];
}

+ (IOSShortArray *)copyOfWithJavaLangShortArray:(IOSShortArray *)original
                                        withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithJavaLangShortArray:original withInt:0 withInt:newLength];
}

+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(int)newLength OBJC_METHOD_FAMILY_NONE {
  if (original == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithNSObjectArray:original withInt:0 withInt:newLength];
}

+ (IOSObjectArray *)copyOfWithNSObjectArray:(IOSObjectArray *)original
                                    withInt:(int)newLength
                               withIOSClass:(IOSClass *)newType OBJC_METHOD_FAMILY_NONE {
  if (newLength < 0) {
    @throw [[[JavaLangNegativeArraySizeException alloc] init] autorelease];
  }
  return [JavaUtilArrays copyOfRangeWithNSObjectArray:original withInt:0 withInt:newLength withIOSClass:newType];
}

+ (IOSBooleanArray *)copyOfRangeWithJavaLangBooleanArray:(IOSBooleanArray *)original
                                                 withInt:(int)start
                                                 withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSBooleanArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSBooleanArray *result = [[[IOSBooleanArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSByteArray *)copyOfRangeWithJavaLangByteArray:(IOSByteArray *)original
                                           withInt:(int)start
                                           withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSByteArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSByteArray *result = [[[IOSByteArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSCharArray *)copyOfRangeWithJavaLangCharacterArray:(IOSCharArray *)original
                                                withInt:(int)start
                                                withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSCharArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSCharArray *result = [[[IOSCharArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSDoubleArray *)copyOfRangeWithJavaLangDoubleArray:(IOSDoubleArray *)original
                                               withInt:(int)start
                                               withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSDoubleArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSDoubleArray *result = [[[IOSDoubleArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSFloatArray *)copyOfRangeWithJavaLangFloatArray:(IOSFloatArray *)original
                                             withInt:(int)start
                                             withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSFloatArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSFloatArray *result = [[[IOSFloatArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSIntArray *)copyOfRangeWithJavaLangIntegerArray:(IOSIntArray *)original
                                             withInt:(int)start
                                             withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSIntArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSIntArray *result = [[[IOSIntArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSLongArray *)copyOfRangeWithJavaLangLongArray:(IOSLongArray *)original
                                           withInt:(int)start
                                           withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSLongArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSLongArray *result = [[[IOSLongArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSShortArray *)copyOfRangeWithJavaLangShortArray:(IOSShortArray *)original
                                             withInt:(int)start
                                             withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSShortArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSShortArray *result = [[[IOSShortArray alloc] initWithLength:resultLength] autorelease];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(int)start
                                         withInt:(int)end OBJC_METHOD_FAMILY_NONE {
  int originalLength = (int) [((IOSObjectArray *) NIL_CHK(original)) count];
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSObjectArray *result = (IOSObjectArray *) [JavaLangReflectArray newInstanceWithIOSClass:[[((IOSObjectArray *) NIL_CHK(original)) getClass] getComponentType] withInt:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(int)start
                                         withInt:(int)end
                                    withIOSClass:(IOSClass *)newType OBJC_METHOD_FAMILY_NONE {
  if (start > end) {
    @throw [[[JavaLangIllegalArgumentException alloc] init] autorelease];
  }
  int originalLength = (int) [((IOSObjectArray *) NIL_CHK(original)) count];
  if (start < 0 || start > originalLength) {
    @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] init] autorelease];
  }
  int resultLength = end - start;
  int copyLength = [JavaLangMath minWithInt:resultLength withInt:originalLength - start];
  IOSObjectArray *result = (IOSObjectArray *) [JavaLangReflectArray newInstanceWithIOSClass:[NIL_CHK(newType) getComponentType] withInt:resultLength];
  [JavaLangSystem arraycopyWithId:original withInt:start withId:result withInt:0 withInt:copyLength];
  return result;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  [super dealloc];
}

@end
@implementation JavaUtilArrays_ArrayList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (IOSObjectArray *)a {
  return a_;
}
- (void)setA:(IOSObjectArray *)a {
  JreOperatorRetainedAssign(&a_, a);
}
@synthesize a = a_;

- (id)initWithNSObjectArray:(IOSObjectArray *)storage {
  if ((self = [super init])) {
    if (storage == nil) {
      @throw [[[JavaLangNullPointerException alloc] init] autorelease];
    }
    JreOperatorRetainedAssign(&a_, storage);
    JreMemDebugAdd(self);
  }
  return self;
}

- (BOOL)containsWithId:(id)object {
  if (object != nil) {
    {
      IOSObjectArray *a__ = a_;
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id element = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
        if ([object isEqual:element]) {
          return YES;
        }
      }
    }
  }
  else {
    {
      IOSObjectArray *a__ = a_;
      int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
      for (int i__ = 0; i__ < n__; i__++) {
        id element = [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__];
        if (element == nil) {
          return YES;
        }
      }
    }
  }
  return NO;
}

- (id)getWithInt:(int)location {
  @try {
    return [((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:location];
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (int)indexOfWithId:(id)object {
  if (object != nil) {
    for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(a_)) count]; i++) {
      if ([object isEqual:[((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:i]]) {
        return i;
      }
    }
  }
  else {
    for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(a_)) count]; i++) {
      if ([((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:i] == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  if (object != nil) {
    for (int i = (int) [((IOSObjectArray *) NIL_CHK(a_)) count] - 1; i >= 0; i--) {
      if ([object isEqual:[((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:i]]) {
        return i;
      }
    }
  }
  else {
    for (int i = (int) [((IOSObjectArray *) NIL_CHK(a_)) count] - 1; i >= 0; i--) {
      if ([((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:i] == nil) {
        return i;
      }
    }
  }
  return -1;
}

- (id)setWithInt:(int)location
          withId:(id)object {
  @try {
    id result = [((IOSObjectArray *) NIL_CHK(a_)) objectAtIndex:location];
    [((IOSObjectArray *) NIL_CHK(a_)) replaceObjectAtIndex:location withObject:object];
    return result;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  @catch (JavaLangArrayStoreException *e) {
    @throw [[[JavaLangClassCastException alloc] init] autorelease];
  }
}

- (int)size {
  return (int) [((IOSObjectArray *) NIL_CHK(a_)) count];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&a_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilArrays_ArrayList *typedCopy = (JavaUtilArrays_ArrayList *) copy;
  typedCopy.a = a_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:a_ name:@"a"]];
  return result;
}

@end
