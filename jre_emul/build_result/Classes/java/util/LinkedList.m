//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/LinkedList.java
//
//  Created by retechretech on 13-3-15.
//

#import "IOSClass.h"
#import "java/lang/CloneNotSupportedException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/NullPointerException.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/ConcurrentModificationException.h"
#import "java/util/Iterator.h"
#import "java/util/LinkedList.h"
#import "java/util/ListIterator.h"
#import "java/util/NoSuchElementException.h"

@implementation JavaUtilLinkedList

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize size_ = size__;
- (JavaUtilLinkedList_Link *)voidLink {
  return [[voidLink_ retain] autorelease];
}
- (void)setVoidLink:(JavaUtilLinkedList_Link *)voidLink {
  JreOperatorRetainedAssign(&voidLink_, voidLink);
}
@synthesize voidLink = voidLink_;

- (id)initJavaUtilLinkedList {
  if ((self = [super init])) {
    size__ = 0;
    JreOperatorRetainedAssign(&voidLink_, [[[JavaUtilLinkedList_Link alloc] initWithId:nil withJavaUtilLinkedList_Link:nil withJavaUtilLinkedList_Link:nil] autorelease]);
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = voidLink_;
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next = voidLink_;
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)init {
  return [self initJavaUtilLinkedList];
}

- (id)initWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if ((self = [self initJavaUtilLinkedList])) {
    [self addAllWithJavaUtilCollection:collection];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithInt:(int)location
            withId:(id)object {
  if (0 <= location && location <= size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
      }
    }
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:link] autorelease];
    ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = newLink;
    ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous = newLink;
    size__++;
    modCount_++;
  }
  else {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
}

- (BOOL)addWithId:(id)object {
  JavaUtilLinkedList_Link *oldLast = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:oldLast withJavaUtilLinkedList_Link:voidLink_] autorelease];
  ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = newLink;
  ((JavaUtilLinkedList_Link *) NIL_CHK(oldLast)).next = newLink;
  size__++;
  modCount_++;
  return YES;
}

- (BOOL)addAllWithInt:(int)location
withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (location < 0 || location > size__) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int adding = [((id<JavaUtilCollection>) NIL_CHK(collection)) size];
  if (adding == 0) {
    return NO;
  }
  id<JavaUtilCollection> elements = (collection == self) ? ((id<JavaUtilCollection>) [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection] autorelease]) : ((id<JavaUtilCollection>) collection);
  JavaUtilLinkedList_Link *previous = voidLink_;
  if (location < (size__ / 2)) {
    for (int i = 0; i < location; i++) {
      previous = ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next;
    }
  }
  else {
    for (int i = size__; i >= location; i--) {
      previous = ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).previous;
    }
  }
  JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(elements)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id e = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:e withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:nil] autorelease];
      ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = newLink;
      previous = newLink;
    }
  }
  ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = next;
  ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = previous;
  size__ += adding;
  modCount_++;
  return YES;
}

- (BOOL)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  if (collection == nil) {
    @throw [[[JavaLangNullPointerException alloc] init] autorelease];
  }
  int adding = [((id<JavaUtilCollection>) NIL_CHK(collection)) size];
  if (adding == 0) {
    return NO;
  }
  id<JavaUtilCollection> elements = (collection == self) ? ((id<JavaUtilCollection>) [[[JavaUtilArrayList alloc] initWithJavaUtilCollection:collection] autorelease]) : ((id<JavaUtilCollection>) collection);
  JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(elements)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      id e = [((id<JavaUtilIterator>) NIL_CHK(iter__)) next];
      JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:e withJavaUtilLinkedList_Link:previous withJavaUtilLinkedList_Link:nil] autorelease];
      ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = newLink;
      previous = newLink;
    }
  }
  ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = voidLink_;
  ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = previous;
  size__ += adding;
  modCount_++;
  return YES;
}

- (void)addFirstWithId:(id)object {
  JavaUtilLinkedList_Link *oldFirst = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:voidLink_ withJavaUtilLinkedList_Link:oldFirst] autorelease];
  ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next = newLink;
  ((JavaUtilLinkedList_Link *) NIL_CHK(oldFirst)).previous = newLink;
  size__++;
  modCount_++;
}

- (void)addLastWithId:(id)object {
  JavaUtilLinkedList_Link *oldLast = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:oldLast withJavaUtilLinkedList_Link:voidLink_] autorelease];
  ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = newLink;
  ((JavaUtilLinkedList_Link *) NIL_CHK(oldLast)).next = newLink;
  size__++;
  modCount_++;
}

- (void)clear {
  if (size__ > 0) {
    size__ = 0;
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next = voidLink_;
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = voidLink_;
    modCount_++;
  }
}

- (id)clone {
  @try {
    JavaUtilLinkedList *l = (JavaUtilLinkedList *) [super clone];
    ((JavaUtilLinkedList *) NIL_CHK(l)).size_ = 0;
    ((JavaUtilLinkedList *) NIL_CHK(l)).voidLink = [[[JavaUtilLinkedList_Link alloc] initWithId:nil withJavaUtilLinkedList_Link:nil withJavaUtilLinkedList_Link:nil] autorelease];
    ((JavaUtilLinkedList_Link *) NIL_CHK(l.voidLink)).previous = ((JavaUtilLinkedList *) NIL_CHK(l)).voidLink;
    ((JavaUtilLinkedList_Link *) NIL_CHK(l.voidLink)).next = ((JavaUtilLinkedList *) NIL_CHK(l)).voidLink;
    [((JavaUtilLinkedList *) NIL_CHK(l)) addAllWithJavaUtilCollection:self];
    return l;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)containsWithId:(id)object {
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  if (object != nil) {
    while (link != voidLink_) {
      if ([object isEqual:((JavaUtilLinkedList_Link *) NIL_CHK(link)).data]) {
        return YES;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
    }
  }
  else {
    while (link != voidLink_) {
      if (((JavaUtilLinkedList_Link *) NIL_CHK(link)).data == nil) {
        return YES;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
    }
  }
  return NO;
}

- (id)getWithInt:(int)location {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
      }
    }
    return ((JavaUtilLinkedList_Link *) NIL_CHK(link)).data;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (id)getFirst {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  if (first != voidLink_) {
    return ((JavaUtilLinkedList_Link *) NIL_CHK(first)).data;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)getLast {
  JavaUtilLinkedList_Link *last = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  if (last != voidLink_) {
    return ((JavaUtilLinkedList_Link *) NIL_CHK(last)).data;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (int)indexOfWithId:(id)object {
  int pos = 0;
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  if (object != nil) {
    while (link != voidLink_) {
      if ([object isEqual:((JavaUtilLinkedList_Link *) NIL_CHK(link)).data]) {
        return pos;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      pos++;
    }
  }
  else {
    while (link != voidLink_) {
      if (((JavaUtilLinkedList_Link *) NIL_CHK(link)).data == nil) {
        return pos;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      pos++;
    }
  }
  return -1;
}

- (int)lastIndexOfWithId:(id)object {
  int pos = size__;
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  if (object != nil) {
    while (link != voidLink_) {
      pos--;
      if ([object isEqual:((JavaUtilLinkedList_Link *) NIL_CHK(link)).data]) {
        return pos;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
    }
  }
  else {
    while (link != voidLink_) {
      pos--;
      if (((JavaUtilLinkedList_Link *) NIL_CHK(link)).data == nil) {
        return pos;
      }
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
    }
  }
  return -1;
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(int)location {
  return [[[JavaUtilLinkedList_LinkIterator alloc] initWithJavaUtilLinkedList:self withInt:location] autorelease];
}

- (id)removeWithInt:(int)location {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
      }
    }
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
    ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = next;
    ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = previous;
    size__--;
    modCount_++;
    return ((JavaUtilLinkedList_Link *) NIL_CHK(link)).data;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (BOOL)removeWithId:(id)object {
  JavaUtilLinkedList_Link *link = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  if (object != nil) {
    while (link != voidLink_ && ![object isEqual:((JavaUtilLinkedList_Link *) NIL_CHK(link)).data]) {
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
    }
  }
  else {
    while (link != voidLink_ && ((JavaUtilLinkedList_Link *) NIL_CHK(link)).data != nil) {
      link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
    }
  }
  if (link == voidLink_) {
    return NO;
  }
  JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
  JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
  ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = next;
  ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = previous;
  size__--;
  modCount_++;
  return YES;
}

- (id)removeFirst {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  if (first != voidLink_) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(first)).next;
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next = next;
    ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = voidLink_;
    size__--;
    modCount_++;
    return ((JavaUtilLinkedList_Link *) NIL_CHK(first)).data;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)removeLast {
  JavaUtilLinkedList_Link *last = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous;
  if (last != voidLink_) {
    JavaUtilLinkedList_Link *previous = ((JavaUtilLinkedList_Link *) NIL_CHK(last)).previous;
    ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).previous = previous;
    ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = voidLink_;
    size__--;
    modCount_++;
    return ((JavaUtilLinkedList_Link *) NIL_CHK(last)).data;
  }
  @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
}

- (id)setWithInt:(int)location
          withId:(id)object {
  if (0 <= location && location < size__) {
    JavaUtilLinkedList_Link *link = voidLink_;
    if (location < (size__ / 2)) {
      for (int i = 0; i <= location; i++) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).next;
      }
    }
    else {
      for (int i = size__; i > location; i--) {
        link = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).previous;
      }
    }
    id result = ((JavaUtilLinkedList_Link *) NIL_CHK(link)).data;
    ((JavaUtilLinkedList_Link *) NIL_CHK(link)).data = object;
    return result;
  }
  @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
}

- (int)size {
  return size__;
}

- (BOOL)offerWithId:(id)o {
  [self addWithId:o];
  return YES;
}

- (id)poll {
  return size__ == 0 ? nil : [self removeFirst];
}

- (id)remove {
  return [self removeFirst];
}

- (id)peek {
  JavaUtilLinkedList_Link *first = ((JavaUtilLinkedList_Link *) NIL_CHK(voidLink_)).next;
  return first == voidLink_ ? nil : ((JavaUtilLinkedList_Link *) NIL_CHK(first)).data;
}

- (id)element {
  return [self getFirst];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&voidLink_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLinkedList *typedCopy = (JavaUtilLinkedList *) copy;
  typedCopy.size_ = size__;
  typedCopy.voidLink = voidLink_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:voidLink_ name:@"voidLink"]];
  return result;
}

@end
@implementation JavaUtilLinkedList_Link

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)data {
  return [[data_ retain] autorelease];
}
- (void)setData:(id)data {
  JreOperatorRetainedAssign(&data_, data);
}
@synthesize data = data_;
- (JavaUtilLinkedList_Link *)previous {
  return [[previous_ retain] autorelease];
}
@synthesize previous = previous_;
- (JavaUtilLinkedList_Link *)next {
  return [[next_ retain] autorelease];
}
- (void)setNext:(JavaUtilLinkedList_Link *)next {
  JreOperatorRetainedAssign(&next_, next);
}
@synthesize next = next_;

- (id)initWithId:(id)o
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)p
withJavaUtilLinkedList_Link:(JavaUtilLinkedList_Link *)n {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&data_, o);
    previous_ = p;
    JreOperatorRetainedAssign(&next_, n);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&next_, nil);
  JreOperatorRetainedAssign(&data_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLinkedList_Link *typedCopy = (JavaUtilLinkedList_Link *) copy;
  typedCopy.data = data_;
  typedCopy.previous = previous_;
  typedCopy.next = next_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:data_ name:@"data"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:next_ name:@"next"]];
  return result;
}

@end
@implementation JavaUtilLinkedList_LinkIterator

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize pos = pos_;
@synthesize expectedModCount = expectedModCount_;
- (JavaUtilLinkedList *)list {
  return [[list_ retain] autorelease];
}
- (void)setList:(JavaUtilLinkedList *)list {
  JreOperatorRetainedAssign(&list_, list);
}
@synthesize list = list_;
- (JavaUtilLinkedList_Link *)link {
  return [[link_ retain] autorelease];
}
- (void)setLink:(JavaUtilLinkedList_Link *)link {
  JreOperatorRetainedAssign(&link_, link);
}
@synthesize link = link_;
- (JavaUtilLinkedList_Link *)lastLink {
  return [[lastLink_ retain] autorelease];
}
- (void)setLastLink:(JavaUtilLinkedList_Link *)lastLink {
  JreOperatorRetainedAssign(&lastLink_, lastLink);
}
@synthesize lastLink = lastLink_;

- (id)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)object
                         withInt:(int)location {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&list_, object);
    expectedModCount_ = ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount;
    if (0 <= location && location <= ((JavaUtilLinkedList *) NIL_CHK(list_)).size_) {
      JreOperatorRetainedAssign(&link_, ((JavaUtilLinkedList *) NIL_CHK(list_)).voidLink);
      if (location < ((JavaUtilLinkedList *) NIL_CHK(list_)).size_ / 2) {
        for (pos_ = -1; pos_ + 1 < location; pos_++) {
          JreOperatorRetainedAssign(&link_, ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).next);
        }
      }
      else {
        for (pos_ = ((JavaUtilLinkedList *) NIL_CHK(list_)).size_; pos_ >= location; pos_--) {
          JreOperatorRetainedAssign(&link_, ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).previous);
        }
      }
    }
    else {
      @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
    }
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)addWithId:(id)object {
  if (expectedModCount_ == ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).next;
    JavaUtilLinkedList_Link *newLink = [[[JavaUtilLinkedList_Link alloc] initWithId:object withJavaUtilLinkedList_Link:link_ withJavaUtilLinkedList_Link:next] autorelease];
    ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).next = newLink;
    ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = newLink;
    JreOperatorRetainedAssign(&link_, newLink);
    JreOperatorRetainedAssign(&lastLink_, nil);
    pos_++;
    expectedModCount_++;
    ((JavaUtilLinkedList *) NIL_CHK(list_)).size_++;
    ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount++;
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (BOOL)hasNext {
  return ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).next != ((JavaUtilLinkedList *) NIL_CHK(list_)).voidLink;
}

- (BOOL)hasPrevious {
  return link_ != ((JavaUtilLinkedList *) NIL_CHK(list_)).voidLink;
}

- (id)next {
  if (expectedModCount_ == ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount) {
    JavaUtilLinkedList_Link *next = ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).next;
    if (next != ((JavaUtilLinkedList *) NIL_CHK(list_)).voidLink) {
      JreOperatorRetainedAssign(&lastLink_, JreOperatorRetainedAssign(&link_, next));
      pos_++;
      return ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).data;
    }
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
}

- (int)nextIndex {
  return pos_ + 1;
}

- (id)previous {
  if (expectedModCount_ == ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount) {
    if (link_ != ((JavaUtilLinkedList *) NIL_CHK(list_)).voidLink) {
      JreOperatorRetainedAssign(&lastLink_, link_);
      JreOperatorRetainedAssign(&link_, ((JavaUtilLinkedList_Link *) NIL_CHK(link_)).previous);
      pos_--;
      return ((JavaUtilLinkedList_Link *) NIL_CHK(lastLink_)).data;
    }
    @throw [[[JavaUtilNoSuchElementException alloc] init] autorelease];
  }
  @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
}

- (int)previousIndex {
  return pos_;
}

- (void)remove {
  if (expectedModCount_ == ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount) {
    if (lastLink_ != nil) {
      JavaUtilLinkedList_Link *next = lastLink_.next;
      JavaUtilLinkedList_Link *previous = lastLink_.previous;
      ((JavaUtilLinkedList_Link *) NIL_CHK(next)).previous = previous;
      ((JavaUtilLinkedList_Link *) NIL_CHK(previous)).next = next;
      if (lastLink_ == link_) {
        pos_--;
      }
      JreOperatorRetainedAssign(&link_, previous);
      JreOperatorRetainedAssign(&lastLink_, nil);
      expectedModCount_++;
      ((JavaUtilLinkedList *) NIL_CHK(list_)).size_--;
      ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount++;
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)setWithId:(id)object {
  if (expectedModCount_ == ((JavaUtilLinkedList *) NIL_CHK(list_)).modCount) {
    if (lastLink_ != nil) {
      lastLink_.data = object;
    }
    else {
      @throw [[[JavaLangIllegalStateException alloc] init] autorelease];
    }
  }
  else {
    @throw [[[JavaUtilConcurrentModificationException alloc] init] autorelease];
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&lastLink_, nil);
  JreOperatorRetainedAssign(&link_, nil);
  JreOperatorRetainedAssign(&list_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilLinkedList_LinkIterator *typedCopy = (JavaUtilLinkedList_LinkIterator *) copy;
  typedCopy.pos = pos_;
  typedCopy.expectedModCount = expectedModCount_;
  typedCopy.list = list_;
  typedCopy.link = link_;
  typedCopy.lastLink = lastLink_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:list_ name:@"list"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:link_ name:@"link"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:lastLink_ name:@"lastLink"]];
  return result;
}

@end
