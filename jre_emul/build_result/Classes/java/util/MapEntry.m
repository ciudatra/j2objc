//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/tools/lib/j2objc/jre_emul/apache_harmony/classlib/modules/luni/src/main/java/java/util/MapEntry.java
//
//  Created by retechretech on 13-3-15.
//

#import "java/lang/CloneNotSupportedException.h"
#import "java/util/Map.h"
#import "java/util/MapEntry.h"

@implementation JavaUtilMapEntry

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id)key {
  return [[key_ retain] autorelease];
}
- (void)setKey:(id)key {
  JreOperatorRetainedAssign(&key_, key);
}
@synthesize key = key_;
- (id)value {
  return [[value_ retain] autorelease];
}
- (void)setValue:(id)value {
  JreOperatorRetainedAssign(&value_, value);
}
@synthesize value = value_;

- (id)initWithId:(id)theKey {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&key_, theKey);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithId:(id)theKey
          withId:(id)theValue {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&key_, theKey);
    JreOperatorRetainedAssign(&value_, theValue);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)clone {
  @try {
    return (id) [super clone];
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (BOOL)isEqual:(id)object {
  if (self == object) {
    return YES;
  }
  if ([object conformsToProtocol: @protocol(JavaUtilMap_Entry)]) {
    id<JavaUtilMap_Entry> entry = (id<JavaUtilMap_Entry>) object;
    return (key_ == nil ? [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey] == nil : [NIL_CHK(key_) isEqual:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey]]) && (value_ == nil ? [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue] == nil : [NIL_CHK(value_) isEqual:[((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue]]);
  }
  return NO;
}

- (id)getKey {
  return key_;
}

- (id)getValue {
  return value_;
}

- (NSUInteger)hash {
  return (key_ == nil ? 0 : [NIL_CHK(key_) hash]) ^ (value_ == nil ? 0 : [NIL_CHK(value_) hash]);
}

- (id)setValueWithId:(id)object {
  id result = value_;
  JreOperatorRetainedAssign(&value_, object);
  return result;
}

- (NSString *)description {
  return [NSString stringWithFormat:@"%@=%@", key_, value_];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&value_, nil);
  JreOperatorRetainedAssign(&key_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilMapEntry *typedCopy = (JavaUtilMapEntry *) copy;
  typedCopy.key = key_;
  typedCopy.value = value_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:key_ name:@"key"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:value_ name:@"value"]];
  return result;
}

@end
