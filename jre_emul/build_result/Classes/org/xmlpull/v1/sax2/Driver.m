//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/xmlpull/v1/sax2/Driver.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSCharArray.h"
#import "IOSClass.h"
#import "IOSIntArray.h"
#import "java/io/FileInputStream.h"
#import "java/io/FileNotFoundException.h"
#import "java/io/InputStream.h"
#import "java/io/Reader.h"
#import "java/lang/StringBuilder.h"
#import "org/xml/sax/ContentHandler.h"
#import "org/xml/sax/DTDHandler.h"
#import "org/xml/sax/EntityResolver.h"
#import "org/xml/sax/ErrorHandler.h"
#import "org/xml/sax/InputSource.h"
#import "org/xml/sax/SAXException.h"
#import "org/xml/sax/SAXNotSupportedException.h"
#import "org/xml/sax/SAXParseException.h"
#import "org/xml/sax/helpers/DefaultHandler.h"
#import "org/xmlpull/v1/XmlPullParser.h"
#import "org/xmlpull/v1/XmlPullParserException.h"
#import "org/xmlpull/v1/XmlPullParserFactory.h"
#import "org/xmlpull/v1/sax2/Driver.h"

@implementation OrgXmlpullV1Sax2Driver

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_ name:@"OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_ name:@"OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_ name:@"OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_"]];
  return result;
}

static NSString * OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_ = @"http://xml.org/sax/properties/declaration-handler";
static NSString * OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_ = @"http://xml.org/sax/properties/lexical-handler";
static NSString * OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_ = @"http://xml.org/sax/features/namespaces";
static NSString * OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_ = @"http://xml.org/sax/features/namespace-prefixes";
static NSString * OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_ = @"http://xml.org/sax/features/validation";
static NSString * OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_ = @"http://apache.org/xml/features/validation/schema";
static NSString * OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_ = @"http://apache.org/xml/features/validation/dynamic";

- (id<OrgXmlSaxContentHandler>)contentHandler {
  return contentHandler_;
}
- (void)setContentHandler:(id<OrgXmlSaxContentHandler>)contentHandler {
  JreOperatorRetainedAssign(&contentHandler_, contentHandler);
}
@synthesize contentHandler = contentHandler_;
- (id<OrgXmlSaxErrorHandler>)errorHandler {
  return errorHandler_;
}
- (void)setErrorHandler:(id<OrgXmlSaxErrorHandler>)errorHandler {
  JreOperatorRetainedAssign(&errorHandler_, errorHandler);
}
@synthesize errorHandler = errorHandler_;
- (NSString *)systemId {
  return systemId_;
}
- (void)setSystemId:(NSString *)systemId {
  JreOperatorRetainedAssign(&systemId_, systemId);
}
@synthesize systemId = systemId_;
- (id<OrgXmlpullV1XmlPullParser>)pp {
  return pp_;
}
- (void)setPp:(id<OrgXmlpullV1XmlPullParser>)pp {
  JreOperatorRetainedAssign(&pp_, pp);
}
@synthesize pp = pp_;

+ (NSString *)DECLARATION_HANDLER_PROPERTY {
  return OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_;
}

+ (NSString *)LEXICAL_HANDLER_PROPERTY {
  return OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_;
}

+ (NSString *)NAMESPACES_FEATURE {
  return OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_;
}

+ (NSString *)NAMESPACE_PREFIXES_FEATURE {
  return OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_;
}

+ (NSString *)VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_;
}

+ (NSString *)APACHE_SCHEMA_VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_APACHE_SCHEMA_VALIDATION_FEATURE_;
}

+ (NSString *)APACHE_DYNAMIC_VALIDATION_FEATURE {
  return OrgXmlpullV1Sax2Driver_APACHE_DYNAMIC_VALIDATION_FEATURE_;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&contentHandler_, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    JreOperatorRetainedAssign(&errorHandler_, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    OrgXmlpullV1XmlPullParserFactory *factory = [OrgXmlpullV1XmlPullParserFactory newInstance];
    [((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(factory)) setNamespaceAwareWithBOOL:YES];
    JreOperatorRetainedAssign(&pp_, [((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(factory)) newPullParser]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pp {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&contentHandler_, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    JreOperatorRetainedAssign(&errorHandler_, [[[OrgXmlSaxHelpersDefaultHandler alloc] init] autorelease]);
    self.pp = pp;
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)getLength {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeCount];
}

- (NSString *)getURIWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNamespaceWithInt:index];
}

- (NSString *)getLocalNameWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:index];
}

- (NSString *)getQNameWithInt:(int)index {
  NSString *prefix = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributePrefixWithInt:index];
  if (prefix != nil) {
    return [NSString stringWithFormat:@"%@:%@", prefix, [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:index]];
  }
  else {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:index];
  }
}

- (NSString *)getTypeWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeTypeWithInt:index];
}

- (NSString *)getValueWithInt:(int)index {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeValueWithInt:index];
}

- (int)getIndexWithNSString:(NSString *)uri
               withNSString:(NSString *)localName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeCount]; i++) {
    if ([[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNamespaceWithInt:i] isEqual:uri] && [[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:i] isEqual:localName]) {
      return i;
    }
  }
  return -1;
}

- (int)getIndexWithNSString:(NSString *)qName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeCount]; i++) {
    if ([[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:i] isEqual:qName]) {
      return i;
    }
  }
  return -1;
}

- (NSString *)getTypeWithNSString:(NSString *)uri
                     withNSString:(NSString *)localName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeCount]; i++) {
    if ([[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNamespaceWithInt:i] isEqual:uri] && [[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:i] isEqual:localName]) {
      return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeTypeWithInt:i];
    }
  }
  return nil;
}

- (NSString *)getTypeWithNSString:(NSString *)qName {
  for (int i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeCount]; i++) {
    if ([[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeNameWithInt:i] isEqual:qName]) {
      return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeTypeWithInt:i];
    }
  }
  return nil;
}

- (NSString *)getValueWithNSString:(NSString *)uri
                      withNSString:(NSString *)localName {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeValueWithNSString:uri withNSString:localName];
}

- (NSString *)getValueWithNSString:(NSString *)qName {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getAttributeValueWithNSString:nil withNSString:qName];
}

- (NSString *)getPublicId {
  return nil;
}

- (NSString *)getSystemId {
  return systemId_;
}

- (int)getLineNumber {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getLineNumber];
}

- (int)getColumnNumber {
  return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getColumnNumber];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  if ([NIL_CHK(OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]];
  }
  else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES]];
  }
  else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_) isEqual:name]) {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION]];
  }
  else {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getFeatureWithNSString:name];
  }
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)value {
  @try {
    if ([NIL_CHK(OrgXmlpullV1Sax2Driver_NAMESPACES_FEATURE_) isEqual:name]) {
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES] withBOOL:value];
    }
    else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_NAMESPACE_PREFIXES_FEATURE_) isEqual:name]) {
      if ([((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES]] != value) {
        [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_REPORT_NAMESPACE_ATTRIBUTES] withBOOL:value];
      }
    }
    else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_VALIDATION_FEATURE_) isEqual:name]) {
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION] withBOOL:value];
    }
    else {
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setFeatureWithNSString:name withBOOL:value];
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
  }
}

- (id)getPropertyWithNSString:(NSString *)name {
  if ([NIL_CHK(OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_) isEqual:name]) {
    return nil;
  }
  else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_) isEqual:name]) {
    return nil;
  }
  else {
    return [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getPropertyWithNSString:name];
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  if ([NIL_CHK(OrgXmlpullV1Sax2Driver_DECLARATION_HANDLER_PROPERTY_) isEqual:name]) {
    @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported setting property %@", name]] autorelease];
  }
  else if ([NIL_CHK(OrgXmlpullV1Sax2Driver_LEXICAL_HANDLER_PROPERTY_) isEqual:name]) {
    @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported setting property %@", name]] autorelease];
  }
  else {
    @try {
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setPropertyWithNSString:name withId:value];
    }
    @catch (OrgXmlpullV1XmlPullParserException *ex) {
      @throw [[[OrgXmlSaxSAXNotSupportedException alloc] initWithNSString:[NSString stringWithFormat:@"not supported set property %@: %@", name, ex]] autorelease];
    }
  }
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return nil;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return nil;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  self.contentHandler = handler;
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return contentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  self.errorHandler = handler;
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return errorHandler_;
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)source {
  JreOperatorRetainedAssign(&systemId_, [((OrgXmlSaxInputSource *) NIL_CHK(source)) getSystemId]);
  [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) setDocumentLocatorWithOrgXmlSaxLocator:self];
  JavaIoReader *reader = [((OrgXmlSaxInputSource *) NIL_CHK(source)) getCharacterStream];
  @try {
    if (reader == nil) {
      JavaIoInputStream *stream = [((OrgXmlSaxInputSource *) NIL_CHK(source)) getByteStream];
      NSString *encoding = [((OrgXmlSaxInputSource *) NIL_CHK(source)) getEncoding];
      if (stream == nil) {
        JreOperatorRetainedAssign(&systemId_, [((OrgXmlSaxInputSource *) NIL_CHK(source)) getSystemId]);
        if (systemId_ == nil) {
          OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:@"null source systemId" withOrgXmlSaxLocator:self] autorelease];
          [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
          return;
        }
        @try {
          stream = [[[JavaIoFileInputStream alloc] initWithNSString:systemId_] autorelease];
        }
        @catch (JavaIoFileNotFoundException *fnfe) {
          OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"could not open file with systemId %@", systemId_] withOrgXmlSaxLocator:self withJavaLangException:fnfe] autorelease];
          [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
          return;
        }
      }
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setInputWithJavaIoInputStream:stream withNSString:encoding];
    }
    else {
      [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) setInputWithJavaIoReader:reader];
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing initialization error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
    return;
  }
  @try {
    [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) startDocument];
    [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) next];
    if ([((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getEventType] != OrgXmlpullV1XmlPullParser_START_TAG) {
      OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"expected start tag not%@", [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp_)) getPositionDescription]] withOrgXmlSaxLocator:self] autorelease];
      [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
      return;
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing initialization error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
    return;
  }
  [self parseSubTreeWithOrgXmlpullV1XmlPullParser:pp_];
  [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) endDocument];
}

- (void)parseWithNSString:(NSString *)systemId {
  [self parseWithOrgXmlSaxInputSource:[[[OrgXmlSaxInputSource alloc] initWithNSString:systemId] autorelease]];
}

- (void)parseSubTreeWithOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pp {
  self.pp = pp;
  BOOL namespaceAware = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]];
  @try {
    if ([((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getEventType] != OrgXmlpullV1XmlPullParser_START_TAG) {
      @throw [[[OrgXmlSaxSAXException alloc] initWithNSString:[NSString stringWithFormat:@"start tag must be read before skiping subtree%@", [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getPositionDescription]]] autorelease];
    }
    IOSIntArray *holderForStartAndLength = [[[IOSIntArray alloc] initWithLength:2] autorelease];
    JavaLangStringBuilder *rawName = [[[JavaLangStringBuilder alloc] initWithInt:16] autorelease];
    NSString *prefix = nil;
    NSString *name = nil;
    int level = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth] - 1;
    int type = OrgXmlpullV1XmlPullParser_START_TAG;
    do {
      switch (type) {
        case OrgXmlpullV1XmlPullParser_START_TAG:
        if (namespaceAware) {
          int depth = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth] - 1;
          int countPrev = (level > depth) ? [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespaceCountWithInt:depth] : 0;
          int count = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespaceCountWithInt:depth + 1];
          for (int i = countPrev; i < count; i++) {
            [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) startPrefixMappingWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespacePrefixWithInt:i] withNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespaceUriWithInt:i]];
          }
          name = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName];
          prefix = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getPrefix];
          if (prefix != nil) {
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) setLengthWithInt:0];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithNSString:prefix];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithUnichar:':'];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithNSString:name];
          }
          [self startElementWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespace] withNSString:name withNSString:prefix == nil ? name : [((JavaLangStringBuilder *) NIL_CHK(rawName)) description]];
        }
        else {
          [self startElementWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespace] withNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName] withNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName]];
        }
        break;
        case OrgXmlpullV1XmlPullParser_TEXT:
        {
          IOSCharArray *chars = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getTextCharactersWithJavaLangIntegerArray:holderForStartAndLength];
          [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) charactersWithJavaLangCharacterArray:chars withInt:[((IOSIntArray *) NIL_CHK(holderForStartAndLength)) intAtIndex:0] withInt:[((IOSIntArray *) NIL_CHK(holderForStartAndLength)) intAtIndex:1]];
        }
        break;
        case OrgXmlpullV1XmlPullParser_END_TAG:
        if (namespaceAware) {
          name = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName];
          prefix = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getPrefix];
          if (prefix != nil) {
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) setLengthWithInt:0];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithNSString:prefix];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithUnichar:':'];
            [((JavaLangStringBuilder *) NIL_CHK(rawName)) appendWithNSString:name];
          }
          [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) endElementWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespace] withNSString:name withNSString:prefix != nil ? name : [((JavaLangStringBuilder *) NIL_CHK(rawName)) description]];
          int depth = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth];
          int countPrev = (level > depth) ? [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespaceCountWithInt:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth]] : 0;
          int count = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespaceCountWithInt:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth] - 1];
          for (int i = count - 1; i >= countPrev; i--) {
            [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) endPrefixMappingWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespacePrefixWithInt:i]];
          }
        }
        else {
          [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) endElementWithNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getNamespace] withNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName] withNSString:[((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getName]];
        }
        break;
        case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
        goto break_LOOP;
      }
      type = [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) next];
    }
    while ([((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) getDepth] > level);
    break_LOOP: ;
  }
  @catch (OrgXmlpullV1XmlPullParserException *ex) {
    OrgXmlSaxSAXParseException *saxException = [[[OrgXmlSaxSAXParseException alloc] initWithNSString:[NSString stringWithFormat:@"parsing error: %@", ex] withOrgXmlSaxLocator:self withJavaLangException:ex] autorelease];
    [((OrgXmlpullV1XmlPullParserException *) NIL_CHK(ex)) printStackTrace];
    [((id<OrgXmlSaxErrorHandler>) NIL_CHK(errorHandler_)) fatalErrorWithOrgXmlSaxSAXParseException:saxException];
  }
}

- (void)startElementWithNSString:(NSString *)namespace_
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName {
  [((id<OrgXmlSaxContentHandler>) NIL_CHK(contentHandler_)) startElementWithNSString:namespace_ withNSString:localName withNSString:qName withOrgXmlSaxAttributes:self];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&pp_, nil);
  JreOperatorRetainedAssign(&systemId_, nil);
  JreOperatorRetainedAssign(&errorHandler_, nil);
  JreOperatorRetainedAssign(&contentHandler_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgXmlpullV1Sax2Driver *typedCopy = (OrgXmlpullV1Sax2Driver *) copy;
  typedCopy.contentHandler = contentHandler_;
  typedCopy.errorHandler = errorHandler_;
  typedCopy.systemId = systemId_;
  typedCopy.pp = pp_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:contentHandler_ name:@"contentHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:errorHandler_ name:@"errorHandler"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:systemId_ name:@"systemId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:pp_ name:@"pp"]];
  return result;
}

@end
