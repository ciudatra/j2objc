//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/xmlpull/v1/XmlPullParserFactory.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSClass.h"
#import "java/lang/Boolean.h"
#import "java/lang/Exception.h"
#import "java/lang/StringBuilder.h"
#import "java/util/ArrayList.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/Set.h"
#import "org/xmlpull/v1/XmlPullParser.h"
#import "org/xmlpull/v1/XmlPullParserException.h"
#import "org/xmlpull/v1/XmlPullParserFactory.h"
#import "org/xmlpull/v1/XmlSerializer.h"

@implementation OrgXmlpullV1XmlPullParserFactory

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1XmlPullParserFactory_referenceContextClass_ name:@"OrgXmlpullV1XmlPullParserFactory_referenceContextClass_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME_ name:@"OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME_ name:@"OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME_"]];
  return result;
}

static IOSClass * OrgXmlpullV1XmlPullParserFactory_referenceContextClass_;
static NSString * OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME_ = @"org.xmlpull.v1.XmlPullParserFactory";
static NSString * OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME_ = @"/META-INF/services/org.xmlpull.v1.XmlPullParserFactory";

- (JavaUtilArrayList *)parserClasses {
  return parserClasses_;
}
- (void)setParserClasses:(JavaUtilArrayList *)parserClasses {
  JreOperatorRetainedAssign(&parserClasses_, parserClasses);
}
@synthesize parserClasses = parserClasses_;
- (NSString *)classNamesLocation {
  return classNamesLocation_;
}
- (void)setClassNamesLocation:(NSString *)classNamesLocation {
  JreOperatorRetainedAssign(&classNamesLocation_, classNamesLocation);
}
@synthesize classNamesLocation = classNamesLocation_;
- (JavaUtilArrayList *)serializerClasses {
  return serializerClasses_;
}
- (void)setSerializerClasses:(JavaUtilArrayList *)serializerClasses {
  JreOperatorRetainedAssign(&serializerClasses_, serializerClasses);
}
@synthesize serializerClasses = serializerClasses_;
- (JavaUtilHashMap *)features {
  return features_;
}
- (void)setFeatures:(JavaUtilHashMap *)features {
  JreOperatorRetainedAssign(&features_, features);
}
@synthesize features = features_;

+ (IOSClass *)referenceContextClass {
  return OrgXmlpullV1XmlPullParserFactory_referenceContextClass_;
}

+ (NSString *)PROPERTY_NAME {
  return OrgXmlpullV1XmlPullParserFactory_PROPERTY_NAME_;
}

+ (NSString *)RESOURCE_NAME {
  return OrgXmlpullV1XmlPullParserFactory_RESOURCE_NAME_;
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&features_, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)state {
  [((JavaUtilHashMap *) NIL_CHK(features_)) putWithId:name withId:[JavaLangBoolean valueOfWithBOOL:state]];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  JavaLangBoolean *value = (JavaLangBoolean *) [((JavaUtilHashMap *) NIL_CHK(features_)) getWithId:name];
  return value != nil ? [((JavaLangBoolean *) NIL_CHK(value)) booleanValue] : NO;
}

- (void)setNamespaceAwareWithBOOL:(BOOL)awareness {
  [((JavaUtilHashMap *) NIL_CHK(features_)) putWithId:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES] withId:[JavaLangBoolean valueOfWithBOOL:awareness]];
}

- (BOOL)isNamespaceAware {
  return [self getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]];
}

- (void)setValidatingWithBOOL:(BOOL)validating {
  [((JavaUtilHashMap *) NIL_CHK(features_)) putWithId:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION] withId:[JavaLangBoolean valueOfWithBOOL:validating]];
}

- (BOOL)isValidating {
  return [self getFeatureWithNSString:[OrgXmlpullV1XmlPullParser FEATURE_VALIDATION]];
}

- (id<OrgXmlpullV1XmlPullParser>)newPullParser OBJC_METHOD_FAMILY_NONE {
  if (parserClasses_ == nil) @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Factory initialization was incomplete - has not tried %@", classNamesLocation_]] autorelease];
  if ([((JavaUtilArrayList *) NIL_CHK(parserClasses_)) size] == 0) @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"No valid parser classes found in %@", classNamesLocation_]] autorelease];
  JavaLangStringBuilder *issues = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [((JavaUtilArrayList *) NIL_CHK(parserClasses_)) size]; i++) {
    IOSClass *ppClass = (IOSClass *) [((JavaUtilArrayList *) NIL_CHK(parserClasses_)) getWithInt:i];
    @try {
      id<OrgXmlpullV1XmlPullParser> pp = (id<OrgXmlpullV1XmlPullParser>) [NIL_CHK(ppClass) newInstance];
      for (id<JavaUtilIterator> iter = [((id<JavaUtilSet>) [((JavaUtilHashMap *) NIL_CHK(features_)) keySet]) iterator]; [((id<JavaUtilIterator>) NIL_CHK(iter)) hasNext]; ) {
        NSString *key = (NSString *) [((id<JavaUtilIterator>) NIL_CHK(iter)) next];
        JavaLangBoolean *value = (JavaLangBoolean *) [((JavaUtilHashMap *) NIL_CHK(features_)) getWithId:key];
        if (value != nil && [((JavaLangBoolean *) NIL_CHK(value)) booleanValue]) {
          [((id<OrgXmlpullV1XmlPullParser>) NIL_CHK(pp)) setFeatureWithNSString:key withBOOL:YES];
        }
      }
      return pp;
    }
    @catch (JavaLangException *ex) {
      [((JavaLangStringBuilder *) NIL_CHK(issues)) appendWithNSString:[NSString stringWithFormat:@"%@: %@; ", [NIL_CHK(ppClass) getName], [((JavaLangException *) NIL_CHK(ex)) description]]];
    }
  }
  @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"could not create parser: %@", issues]] autorelease];
}

- (id<OrgXmlpullV1XmlSerializer>)newSerializer OBJC_METHOD_FAMILY_NONE {
  if (serializerClasses_ == nil) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Factory initialization incomplete - has not tried %@", classNamesLocation_]] autorelease];
  }
  if ([((JavaUtilArrayList *) NIL_CHK(serializerClasses_)) size] == 0) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"No valid serializer classes found in %@", classNamesLocation_]] autorelease];
  }
  JavaLangStringBuilder *issues = [[[JavaLangStringBuilder alloc] init] autorelease];
  for (int i = 0; i < [((JavaUtilArrayList *) NIL_CHK(serializerClasses_)) size]; i++) {
    IOSClass *ppClass = (IOSClass *) [((JavaUtilArrayList *) NIL_CHK(serializerClasses_)) getWithInt:i];
    @try {
      id<OrgXmlpullV1XmlSerializer> ser = (id<OrgXmlpullV1XmlSerializer>) [NIL_CHK(ppClass) newInstance];
      return ser;
    }
    @catch (JavaLangException *ex) {
      [((JavaLangStringBuilder *) NIL_CHK(issues)) appendWithNSString:[NSString stringWithFormat:@"%@: %@; ", [NIL_CHK(ppClass) getName], [((JavaLangException *) NIL_CHK(ex)) description]]];
    }
  }
  @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"could not create serializer: %@", issues]] autorelease];
}

+ (OrgXmlpullV1XmlPullParserFactory *)newInstance OBJC_METHOD_FAMILY_NONE {
  return [OrgXmlpullV1XmlPullParserFactory newInstanceWithNSString:nil withIOSClass:nil];
}

+ (OrgXmlpullV1XmlPullParserFactory *)newInstanceWithNSString:(NSString *)classNames
                                                 withIOSClass:(IOSClass *)context OBJC_METHOD_FAMILY_NONE {
  classNames = @"org.kxml2.io.KXmlParser,org.kxml2.io.KXmlSerializer";
  OrgXmlpullV1XmlPullParserFactory *factory = nil;
  JavaUtilArrayList *parserClasses = [[[JavaUtilArrayList alloc] init] autorelease];
  JavaUtilArrayList *serializerClasses = [[[JavaUtilArrayList alloc] init] autorelease];
  int pos = 0;
  while (pos < [NIL_CHK(classNames) length]) {
    int cut = [NIL_CHK(classNames) indexOf:',' fromIndex:pos];
    if (cut == -1) cut = [NIL_CHK(classNames) length];
    NSString *name = [NIL_CHK(classNames) substring:pos endIndex:cut];
    IOSClass *candidate = nil;
    id instance = nil;
    @try {
      candidate = [IOSClass forName:name];
      instance = [NIL_CHK(candidate) newInstance];
    }
    @catch (JavaLangException *e) {
    }
    if (candidate != nil) {
      BOOL recognized = NO;
      if ([instance conformsToProtocol: @protocol(OrgXmlpullV1XmlPullParser)]) {
        [((JavaUtilArrayList *) NIL_CHK(parserClasses)) addWithId:candidate];
        recognized = YES;
      }
      if ([instance conformsToProtocol: @protocol(OrgXmlpullV1XmlSerializer)]) {
        [((JavaUtilArrayList *) NIL_CHK(serializerClasses)) addWithId:candidate];
        recognized = YES;
      }
      if ([instance isKindOfClass:[OrgXmlpullV1XmlPullParserFactory class]]) {
        if (factory == nil) {
          factory = (OrgXmlpullV1XmlPullParserFactory *) instance;
        }
        recognized = YES;
      }
      if (!recognized) {
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"incompatible class: %@", name]] autorelease];
      }
    }
    pos = cut + 1;
  }
  if (factory == nil) {
    factory = [[[OrgXmlpullV1XmlPullParserFactory alloc] init] autorelease];
  }
  ((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(factory)).parserClasses = parserClasses;
  ((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(factory)).serializerClasses = serializerClasses;
  ((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(factory)).classNamesLocation = @"org.kxml2.io.kXmlParser,org.kxml2.io.KXmlSerializer";
  return factory;
}

+ (void)initialize {
  if (self == [OrgXmlpullV1XmlPullParserFactory class]) {
    {
      OrgXmlpullV1XmlPullParserFactory *f = [[[OrgXmlpullV1XmlPullParserFactory alloc] init] autorelease];
      JreOperatorRetainedAssign(&OrgXmlpullV1XmlPullParserFactory_referenceContextClass_, [((OrgXmlpullV1XmlPullParserFactory *) NIL_CHK(f)) getClass]);
    }
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&features_, nil);
  JreOperatorRetainedAssign(&serializerClasses_, nil);
  JreOperatorRetainedAssign(&classNamesLocation_, nil);
  JreOperatorRetainedAssign(&parserClasses_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgXmlpullV1XmlPullParserFactory *typedCopy = (OrgXmlpullV1XmlPullParserFactory *) copy;
  typedCopy.parserClasses = parserClasses_;
  typedCopy.classNamesLocation = classNamesLocation_;
  typedCopy.serializerClasses = serializerClasses_;
  typedCopy.features = features_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parserClasses_ name:@"parserClasses"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:classNamesLocation_ name:@"classNamesLocation"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:serializerClasses_ name:@"serializerClasses"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:features_ name:@"features"]];
  return result;
}

@end
