//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/xml/sax/helpers/AttributesImpl.java
//
//  Created by retechretech on 13-4-26.
//

#import "IOSObjectArray.h"
#import "java/lang/ArrayIndexOutOfBoundsException.h"
#import "java/lang/System.h"
#import "org/xml/sax/Attributes.h"
#import "org/xml/sax/helpers/AttributesImpl.h"

@implementation OrgXmlSaxHelpersAttributesImpl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

@synthesize length = length_;
- (IOSObjectArray *)data {
  return data_;
}
- (void)setData:(IOSObjectArray *)data {
  JreOperatorRetainedAssign(&data_, data);
}
@synthesize data = data_;

- (id)init {
  if ((self = [super init])) {
    length_ = 0;
    JreOperatorRetainedAssign(&data_, nil);
    JreMemDebugAdd(self);
  }
  return self;
}

- (id)initWithOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  if ((self = [super init])) {
    [self setAttributesWithOrgXmlSaxAttributes:atts];
    JreMemDebugAdd(self);
  }
  return self;
}

- (int)getLength {
  return length_;
}

- (NSString *)getURIWithInt:(int)index {
  if (index >= 0 && index < length_) {
    return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:index * 5]);
  }
  else {
    return nil;
  }
}

- (NSString *)getLocalNameWithInt:(int)index {
  if (index >= 0 && index < length_) {
    return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:index * 5 + 1]);
  }
  else {
    return nil;
  }
}

- (NSString *)getQNameWithInt:(int)index {
  if (index >= 0 && index < length_) {
    return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:index * 5 + 2]);
  }
  else {
    return nil;
  }
}

- (NSString *)getTypeWithInt:(int)index {
  if (index >= 0 && index < length_) {
    return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:index * 5 + 3]);
  }
  else {
    return nil;
  }
}

- (NSString *)getValueWithInt:(int)index {
  if (index >= 0 && index < length_) {
    return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:index * 5 + 4]);
  }
  else {
    return nil;
  }
}

- (int)getIndexWithNSString:(NSString *)uri
               withNSString:(NSString *)localName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i]) isEqual:uri] && [((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 1]) isEqual:localName]) {
      return i / 5;
    }
  }
  return -1;
}

- (int)getIndexWithNSString:(NSString *)qName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 2]) isEqual:qName]) {
      return i / 5;
    }
  }
  return -1;
}

- (NSString *)getTypeWithNSString:(NSString *)uri
                     withNSString:(NSString *)localName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i]) isEqual:uri] && [((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 1]) isEqual:localName]) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 3]);
    }
  }
  return nil;
}

- (NSString *)getTypeWithNSString:(NSString *)qName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 2]) isEqual:qName]) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 3]);
    }
  }
  return nil;
}

- (NSString *)getValueWithNSString:(NSString *)uri
                      withNSString:(NSString *)localName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i]) isEqual:uri] && [((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 1]) isEqual:localName]) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 4]);
    }
  }
  return nil;
}

- (NSString *)getValueWithNSString:(NSString *)qName {
  int max = length_ * 5;
  for (int i = 0; i < max; i += 5) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 2]) isEqual:qName]) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(data_)) objectAtIndex:i + 4]);
    }
  }
  return nil;
}

- (void)clear {
  if (data_ != nil) {
    for (int i = 0; i < (length_ * 5); i++) [data_ replaceObjectAtIndex:i withObject:nil];
  }
  length_ = 0;
}

- (void)setAttributesWithOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  [self clear];
  length_ = [((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getLength];
  if (length_ > 0) {
    JreOperatorRetainedAssign(&data_, [[[IOSObjectArray alloc] initWithLength:length_ * 5 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    for (int i = 0; i < length_; i++) {
      [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:i * 5 withObject:[((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getURIWithInt:i]];
      [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:i * 5 + 1 withObject:[((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getLocalNameWithInt:i]];
      [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:i * 5 + 2 withObject:[((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getQNameWithInt:i]];
      [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:i * 5 + 3 withObject:[((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getTypeWithInt:i]];
      [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:i * 5 + 4 withObject:[((id<OrgXmlSaxAttributes>) NIL_CHK(atts)) getValueWithInt:i]];
    }
  }
}

- (void)addAttributeWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
                    withNSString:(NSString *)type
                    withNSString:(NSString *)value {
  [self ensureCapacityWithInt:length_ + 1];
  [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:length_ * 5 withObject:uri];
  [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:length_ * 5 + 1 withObject:localName];
  [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:length_ * 5 + 2 withObject:qName];
  [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:length_ * 5 + 3 withObject:type];
  [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:length_ * 5 + 4 withObject:value];
  length_++;
}

- (void)setAttributeWithInt:(int)index
               withNSString:(NSString *)uri
               withNSString:(NSString *)localName
               withNSString:(NSString *)qName
               withNSString:(NSString *)type
               withNSString:(NSString *)value {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 withObject:uri];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 1 withObject:localName];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 2 withObject:qName];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 3 withObject:type];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 4 withObject:value];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)removeAttributeWithInt:(int)index {
  if (index >= 0 && index < length_) {
    if (index < length_ - 1) {
      [JavaLangSystem arraycopyWithId:data_ withInt:(index + 1) * 5 withId:data_ withInt:index * 5 withInt:(length_ - index - 1) * 5];
    }
    index = (length_ - 1) * 5;
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index++ withObject:nil];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index++ withObject:nil];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index++ withObject:nil];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index++ withObject:nil];
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index withObject:nil];
    length_--;
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)setURIWithInt:(int)index
         withNSString:(NSString *)uri {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 withObject:uri];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)setLocalNameWithInt:(int)index
               withNSString:(NSString *)localName {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 1 withObject:localName];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)setQNameWithInt:(int)index
           withNSString:(NSString *)qName {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 2 withObject:qName];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)setTypeWithInt:(int)index
          withNSString:(NSString *)type {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 3 withObject:type];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)setValueWithInt:(int)index
           withNSString:(NSString *)value {
  if (index >= 0 && index < length_) {
    [((IOSObjectArray *) NIL_CHK(data_)) replaceObjectAtIndex:index * 5 + 4 withObject:value];
  }
  else {
    [self badIndexWithInt:index];
  }
}

- (void)ensureCapacityWithInt:(int)n {
  if (n <= 0) {
    return;
  }
  int max;
  if (data_ == nil || (int) [((IOSObjectArray *) NIL_CHK(data_)) count] == 0) {
    max = 25;
  }
  else if ((int) [((IOSObjectArray *) NIL_CHK(data_)) count] >= n * 5) {
    return;
  }
  else {
    max = (int) [((IOSObjectArray *) NIL_CHK(data_)) count];
  }
  while (max < n * 5) {
    max *= 2;
  }
  IOSObjectArray *newData = [[[IOSObjectArray alloc] initWithLength:max type:[IOSClass classWithClass:[NSString class]]] autorelease];
  if (length_ > 0) {
    [JavaLangSystem arraycopyWithId:data_ withInt:0 withId:newData withInt:0 withInt:length_ * 5];
  }
  JreOperatorRetainedAssign(&data_, newData);
}

- (void)badIndexWithInt:(int)index {
  NSString *msg = [NSString stringWithFormat:@"Attempt to modify attribute at illegal index: %d", index];
  @throw [[[JavaLangArrayIndexOutOfBoundsException alloc] initWithNSString:msg] autorelease];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&data_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgXmlSaxHelpersAttributesImpl *typedCopy = (OrgXmlSaxHelpersAttributesImpl *) copy;
  typedCopy.length = length_;
  typedCopy.data = data_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:data_ name:@"data"]];
  return result;
}

@end
