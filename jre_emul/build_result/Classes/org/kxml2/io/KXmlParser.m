//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/kxml2/io/KXmlParser.java
//
//  Created by retechretech on 13-4-19.
//

#import "IOSCharArray.h"
#import "IOSClass.h"
#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/io/Reader.h"
#import "java/lang/AssertionError.h"
#import "java/lang/Boolean.h"
#import "java/lang/Exception.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/IndexOutOfBoundsException.h"
#import "java/lang/Integer.h"
#import "java/lang/NumberFormatException.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/StringBuilder.h"
#import "java/lang/System.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "libcore/internal/StringPool.h"
#import "org/kxml2/io/KXmlParser.h"
#import "org/xmlpull/v1/XmlPullParser.h"
#import "org/xmlpull/v1/XmlPullParserException.h"

@implementation OrgKxml2IoKXmlParser

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_ name:@"OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_ name:@"OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_ name:@"OrgKxml2IoKXmlParser_PROPERTY_LOCATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_FEATURE_RELAXED_ name:@"OrgKxml2IoKXmlParser_FEATURE_RELAXED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_ name:@"OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_COMMENT_ name:@"OrgKxml2IoKXmlParser_START_COMMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_COMMENT_ name:@"OrgKxml2IoKXmlParser_END_COMMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_ name:@"OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_CDATA_ name:@"OrgKxml2IoKXmlParser_START_CDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_CDATA_ name:@"OrgKxml2IoKXmlParser_END_CDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_ name:@"OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ name:@"OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_DOCTYPE_ name:@"OrgKxml2IoKXmlParser_START_DOCTYPE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_SYSTEM_ name:@"OrgKxml2IoKXmlParser_SYSTEM_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_PUBLIC_ name:@"OrgKxml2IoKXmlParser_PUBLIC_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ELEMENT_ name:@"OrgKxml2IoKXmlParser_START_ELEMENT_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ATTLIST_ name:@"OrgKxml2IoKXmlParser_START_ATTLIST_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_ENTITY_ name:@"OrgKxml2IoKXmlParser_START_ENTITY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_START_NOTATION_ name:@"OrgKxml2IoKXmlParser_START_NOTATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_EMPTY_ name:@"OrgKxml2IoKXmlParser_EMPTY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ANY_ name:@"OrgKxml2IoKXmlParser_ANY_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_NDATA_ name:@"OrgKxml2IoKXmlParser_NDATA_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_NOTATION_ name:@"OrgKxml2IoKXmlParser_NOTATION_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_REQUIRED_ name:@"OrgKxml2IoKXmlParser_REQUIRED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_IMPLIED_ name:@"OrgKxml2IoKXmlParser_IMPLIED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_FIXED_ name:@"OrgKxml2IoKXmlParser_FIXED_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_ name:@"OrgKxml2IoKXmlParser_UNEXPECTED_EOF_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ name:@"OrgKxml2IoKXmlParser_ILLEGAL_TYPE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_SINGLE_QUOTE_ name:@"OrgKxml2IoKXmlParser_SINGLE_QUOTE_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_DOUBLE_QUOTE_ name:@"OrgKxml2IoKXmlParser_DOUBLE_QUOTE_"]];
  return result;
}

static NSString * OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_ = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-version";
static NSString * OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_ = @"http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";
static NSString * OrgKxml2IoKXmlParser_PROPERTY_LOCATION_ = @"http://xmlpull.org/v1/doc/properties.html#location";
static NSString * OrgKxml2IoKXmlParser_FEATURE_RELAXED_ = @"http://xmlpull.org/v1/doc/features.html#relaxed";
static id<JavaUtilMap> OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_COMMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_COMMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_CDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_CDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_;
static IOSCharArray * OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_DOCTYPE_;
static IOSCharArray * OrgKxml2IoKXmlParser_SYSTEM_;
static IOSCharArray * OrgKxml2IoKXmlParser_PUBLIC_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ELEMENT_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ATTLIST_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_ENTITY_;
static IOSCharArray * OrgKxml2IoKXmlParser_START_NOTATION_;
static IOSCharArray * OrgKxml2IoKXmlParser_EMPTY_;
static IOSCharArray * OrgKxml2IoKXmlParser_ANY_;
static IOSCharArray * OrgKxml2IoKXmlParser_NDATA_;
static IOSCharArray * OrgKxml2IoKXmlParser_NOTATION_;
static IOSCharArray * OrgKxml2IoKXmlParser_REQUIRED_;
static IOSCharArray * OrgKxml2IoKXmlParser_IMPLIED_;
static IOSCharArray * OrgKxml2IoKXmlParser_FIXED_;
static NSString * OrgKxml2IoKXmlParser_UNEXPECTED_EOF_ = @"Unexpected EOF";
static NSString * OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ = @"Wrong event type";
static IOSCharArray * OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
static IOSCharArray * OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;

- (NSString *)location {
  return location_;
}
- (void)setLocation:(NSString *)location {
  JreOperatorRetainedAssign(&location_, location);
}
@synthesize location = location_;
- (NSString *)version_ {
  return version__;
}
- (void)setVersion_:(NSString *)version_ {
  JreOperatorRetainedAssign(&version__, version_);
}
@synthesize version_ = version__;
- (JavaLangBoolean *)standalone {
  return standalone_;
}
- (void)setStandalone:(JavaLangBoolean *)standalone {
  JreOperatorRetainedAssign(&standalone_, standalone);
}
@synthesize standalone = standalone_;
- (NSString *)rootElementName {
  return rootElementName_;
}
- (void)setRootElementName:(NSString *)rootElementName {
  JreOperatorRetainedAssign(&rootElementName_, rootElementName);
}
@synthesize rootElementName = rootElementName_;
- (NSString *)systemId {
  return systemId_;
}
- (void)setSystemId:(NSString *)systemId {
  JreOperatorRetainedAssign(&systemId_, systemId);
}
@synthesize systemId = systemId_;
- (NSString *)publicId {
  return publicId_;
}
- (void)setPublicId:(NSString *)publicId {
  JreOperatorRetainedAssign(&publicId_, publicId);
}
@synthesize publicId = publicId_;
@synthesize processDocDecl = processDocDecl_;
@synthesize processNsp = processNsp_;
@synthesize relaxed = relaxed_;
@synthesize keepNamespaceAttributes_ = keepNamespaceAttributes__;
- (JavaLangStringBuilder *)bufferCapture {
  return bufferCapture_;
}
- (void)setBufferCapture:(JavaLangStringBuilder *)bufferCapture {
  JreOperatorRetainedAssign(&bufferCapture_, bufferCapture);
}
@synthesize bufferCapture = bufferCapture_;
- (id<JavaUtilMap>)documentEntities {
  return documentEntities_;
}
- (void)setDocumentEntities:(id<JavaUtilMap>)documentEntities {
  JreOperatorRetainedAssign(&documentEntities_, documentEntities);
}
@synthesize documentEntities = documentEntities_;
- (id<JavaUtilMap>)defaultAttributes {
  return defaultAttributes_;
}
- (void)setDefaultAttributes:(id<JavaUtilMap>)defaultAttributes {
  JreOperatorRetainedAssign(&defaultAttributes_, defaultAttributes);
}
@synthesize defaultAttributes = defaultAttributes_;
@synthesize depth = depth_;
- (IOSObjectArray *)elementStack {
  return elementStack_;
}
- (void)setElementStack:(IOSObjectArray *)elementStack {
  JreOperatorRetainedAssign(&elementStack_, elementStack);
}
@synthesize elementStack = elementStack_;
- (IOSObjectArray *)nspStack {
  return nspStack_;
}
- (void)setNspStack:(IOSObjectArray *)nspStack {
  JreOperatorRetainedAssign(&nspStack_, nspStack);
}
@synthesize nspStack = nspStack_;
- (IOSIntArray *)nspCounts {
  return nspCounts_;
}
- (void)setNspCounts:(IOSIntArray *)nspCounts {
  JreOperatorRetainedAssign(&nspCounts_, nspCounts);
}
@synthesize nspCounts = nspCounts_;
- (JavaIoReader *)reader {
  return reader_;
}
- (void)setReader:(JavaIoReader *)reader {
  JreOperatorRetainedAssign(&reader_, reader);
}
@synthesize reader = reader_;
- (NSString *)encoding {
  return encoding_;
}
- (void)setEncoding:(NSString *)encoding {
  JreOperatorRetainedAssign(&encoding_, encoding);
}
@synthesize encoding = encoding_;
- (OrgKxml2IoKXmlParser_ContentSource *)nextContentSource {
  return nextContentSource_;
}
- (void)setNextContentSource:(OrgKxml2IoKXmlParser_ContentSource *)nextContentSource {
  JreOperatorRetainedAssign(&nextContentSource_, nextContentSource);
}
@synthesize nextContentSource = nextContentSource_;
- (IOSCharArray *)buffer {
  return buffer_;
}
- (void)setBuffer:(IOSCharArray *)buffer {
  JreOperatorRetainedAssign(&buffer_, buffer);
}
@synthesize buffer = buffer_;
@synthesize position = position_;
@synthesize limit = limit_;
@synthesize bufferStartLine = bufferStartLine_;
@synthesize bufferStartColumn = bufferStartColumn_;
@synthesize type = type_;
@synthesize isWhitespace_ = isWhitespace__;
- (NSString *)namespace_ {
  return namespace__;
}
- (void)setNamespace_:(NSString *)namespace_ {
  JreOperatorRetainedAssign(&namespace__, namespace_);
}
@synthesize namespace_ = namespace__;
- (NSString *)prefix {
  return prefix_;
}
- (void)setPrefix:(NSString *)prefix {
  JreOperatorRetainedAssign(&prefix_, prefix);
}
@synthesize prefix = prefix_;
- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, name);
}
@synthesize name = name_;
- (NSString *)text {
  return text_;
}
- (void)setText:(NSString *)text {
  JreOperatorRetainedAssign(&text_, text);
}
@synthesize text = text_;
@synthesize degenerated = degenerated_;
@synthesize attributeCount = attributeCount_;
- (IOSObjectArray *)attributes {
  return attributes_;
}
- (void)setAttributes:(IOSObjectArray *)attributes {
  JreOperatorRetainedAssign(&attributes_, attributes);
}
@synthesize attributes = attributes_;
- (NSString *)error {
  return error_;
}
- (void)setError:(NSString *)error {
  JreOperatorRetainedAssign(&error_, error);
}
@synthesize error = error_;
@synthesize unresolved = unresolved_;
- (LibcoreInternalStringPool *)stringPool {
  return stringPool_;
}
- (void)setStringPool:(LibcoreInternalStringPool *)stringPool {
  JreOperatorRetainedAssign(&stringPool_, stringPool);
}
@synthesize stringPool = stringPool_;

+ (NSString *)PROPERTY_XMLDECL_VERSION {
  return OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_;
}

+ (NSString *)PROPERTY_XMLDECL_STANDALONE {
  return OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_;
}

+ (NSString *)PROPERTY_LOCATION {
  return OrgKxml2IoKXmlParser_PROPERTY_LOCATION_;
}

+ (NSString *)FEATURE_RELAXED {
  return OrgKxml2IoKXmlParser_FEATURE_RELAXED_;
}

+ (id<JavaUtilMap>)DEFAULT_ENTITIES {
  return OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_;
}

+ (IOSCharArray *)START_COMMENT {
  return OrgKxml2IoKXmlParser_START_COMMENT_;
}

+ (IOSCharArray *)END_COMMENT {
  return OrgKxml2IoKXmlParser_END_COMMENT_;
}

+ (IOSCharArray *)COMMENT_DOUBLE_DASH {
  return OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_;
}

+ (IOSCharArray *)START_CDATA {
  return OrgKxml2IoKXmlParser_START_CDATA_;
}

+ (IOSCharArray *)END_CDATA {
  return OrgKxml2IoKXmlParser_END_CDATA_;
}

+ (IOSCharArray *)START_PROCESSING_INSTRUCTION {
  return OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_;
}

+ (IOSCharArray *)END_PROCESSING_INSTRUCTION {
  return OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_;
}

+ (IOSCharArray *)START_DOCTYPE {
  return OrgKxml2IoKXmlParser_START_DOCTYPE_;
}

+ (IOSCharArray *)SYSTEM {
  return OrgKxml2IoKXmlParser_SYSTEM_;
}

+ (IOSCharArray *)PUBLIC {
  return OrgKxml2IoKXmlParser_PUBLIC_;
}

+ (IOSCharArray *)START_ELEMENT {
  return OrgKxml2IoKXmlParser_START_ELEMENT_;
}

+ (IOSCharArray *)START_ATTLIST {
  return OrgKxml2IoKXmlParser_START_ATTLIST_;
}

+ (IOSCharArray *)START_ENTITY {
  return OrgKxml2IoKXmlParser_START_ENTITY_;
}

+ (IOSCharArray *)START_NOTATION {
  return OrgKxml2IoKXmlParser_START_NOTATION_;
}

+ (IOSCharArray *)EMPTY {
  return OrgKxml2IoKXmlParser_EMPTY_;
}

+ (IOSCharArray *)ANY {
  return OrgKxml2IoKXmlParser_ANY_;
}

+ (IOSCharArray *)NDATA {
  return OrgKxml2IoKXmlParser_NDATA_;
}

+ (IOSCharArray *)NOTATION {
  return OrgKxml2IoKXmlParser_NOTATION_;
}

+ (IOSCharArray *)REQUIRED {
  return OrgKxml2IoKXmlParser_REQUIRED_;
}

+ (IOSCharArray *)IMPLIED {
  return OrgKxml2IoKXmlParser_IMPLIED_;
}

+ (IOSCharArray *)FIXED {
  return OrgKxml2IoKXmlParser_FIXED_;
}

+ (NSString *)UNEXPECTED_EOF {
  return OrgKxml2IoKXmlParser_UNEXPECTED_EOF_;
}

+ (NSString *)ILLEGAL_TYPE {
  return OrgKxml2IoKXmlParser_ILLEGAL_TYPE_;
}

+ (IOSCharArray *)SINGLE_QUOTE {
  return OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
}

+ (IOSCharArray *)DOUBLE_QUOTE {
  return OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;
}

- (void)keepNamespaceAttributes {
  self.keepNamespaceAttributes_ = YES;
}

- (BOOL)adjustNsp {
  BOOL any = NO;
  for (int i = 0; i < attributeCount_ << 2; i += 4) {
    NSString *attrName = ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 2]);
    int cut = [NIL_CHK(attrName) indexOf:':'];
    NSString *prefix;
    if (cut != -1) {
      prefix = [NIL_CHK(attrName) substring:0 endIndex:cut];
      attrName = [NIL_CHK(attrName) substring:cut + 1];
    }
    else if ([NIL_CHK(attrName) isEqual:@"xmlns"]) {
      prefix = attrName;
      attrName = nil;
    }
    else {
      continue;
    }
    if (![NIL_CHK(prefix) isEqual:@"xmlns"]) {
      any = YES;
    }
    else {
      int j = ([((IOSIntArray *) NIL_CHK(nspCounts_)) postIncr:depth_]) << 1;
      JreOperatorRetainedAssign(&nspStack_, [self ensureCapacityWithNSStringArray:nspStack_ withInt:j + 2]);
      [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:j withObject:attrName];
      [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:j + 1 withObject:((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 3])];
      if (attrName != nil && [((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 3]) isEmpty]) {
        [self checkRelaxedWithNSString:@"illegal empty namespace"];
      }
      if (keepNamespaceAttributes__) {
        [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i withObject:@"http://www.w3.org/2000/xmlns/"];
        any = YES;
      }
      else {
        [JavaLangSystem arraycopyWithId:attributes_ withInt:i + 4 withId:attributes_ withInt:i withInt:((--attributeCount_) << 2) - i];
        i -= 4;
      }
    }
  }
  if (any) {
    for (int i = (attributeCount_ << 2) - 4; i >= 0; i -= 4) {
      NSString *attrName = ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 2]);
      int cut = [NIL_CHK(attrName) indexOf:':'];
      if (cut == 0 && !relaxed_) {
        @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"illegal attribute name: %@ at %@", attrName, self]] autorelease];
      }
      else if (cut != -1) {
        NSString *attrPrefix = [NIL_CHK(attrName) substring:0 endIndex:cut];
        attrName = [NIL_CHK(attrName) substring:cut + 1];
        NSString *attrNs = [self getNamespaceWithNSString:attrPrefix];
        if (attrNs == nil && !relaxed_) {
          @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Undefined Prefix: %@ in %@", attrPrefix, self]] autorelease];
        }
        [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i withObject:attrNs];
        [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 1 withObject:attrPrefix];
        [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 2 withObject:attrName];
      }
    }
  }
  int cut = [NIL_CHK(name_) indexOf:':'];
  if (cut == 0) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"illegal tag name: %@", name_]];
  }
  if (cut != -1) {
    JreOperatorRetainedAssign(&prefix_, [NIL_CHK(name_) substring:0 endIndex:cut]);
    JreOperatorRetainedAssign(&name_, [NIL_CHK(name_) substring:cut + 1]);
  }
  self.namespace_ = [self getNamespaceWithNSString:prefix_];
  if (self.namespace_ == nil) {
    if (prefix_ != nil) {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"undefined prefix: %@", prefix_]];
    }
    self.namespace_ = [OrgXmlpullV1XmlPullParser NO_NAMESPACE];
  }
  return any;
}

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(int)required {
  if ((int) [((IOSObjectArray *) NIL_CHK(arr)) count] >= required) {
    return arr;
  }
  IOSObjectArray *bigger = [[[IOSObjectArray alloc] initWithLength:required + 16 type:[IOSClass classWithClass:[NSString class]]] autorelease];
  [JavaLangSystem arraycopyWithId:arr withInt:0 withId:bigger withInt:0 withInt:(int) [((IOSObjectArray *) NIL_CHK(arr)) count]];
  return bigger;
}

- (void)checkRelaxedWithNSString:(NSString *)errorMessage {
  if (!relaxed_) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:errorMessage withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (error_ == nil) {
    JreOperatorRetainedAssign(&error_, [NSString stringWithFormat:@"Error: %@", errorMessage]);
  }
}

- (int)next {
  return [self nextWithBOOL:NO];
}

- (int)nextToken {
  return [self nextWithBOOL:YES];
}

- (int)nextWithBOOL:(BOOL)justOneToken {
  if (reader_ == nil) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"setInput() must be called first." withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    depth_--;
  }
  if (degenerated_) {
    degenerated_ = NO;
    type_ = OrgXmlpullV1XmlPullParser_END_TAG;
    return type_;
  }
  if (error_ != nil) {
    if (justOneToken) {
      JreOperatorRetainedAssign(&text_, error_);
      type_ = OrgXmlpullV1XmlPullParser_COMMENT;
      JreOperatorRetainedAssign(&error_, nil);
      return type_;
    }
    else {
      JreOperatorRetainedAssign(&error_, nil);
    }
  }
  type_ = [self peekTypeWithBOOL:NO];
  if (type_ == OrgKxml2IoKXmlParser_XML_DECLARATION) {
    [self readXmlDeclaration];
    type_ = [self peekTypeWithBOOL:NO];
  }
  JreOperatorRetainedAssign(&text_, nil);
  isWhitespace__ = YES;
  JreOperatorRetainedAssign(&prefix_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&namespace__, nil);
  attributeCount_ = -1;
  BOOL throwOnResolveFailure = !justOneToken;
  while (YES) {
    switch (type_) {
      NSString *commentText;
      NSString *processingInstruction;
      case OrgXmlpullV1XmlPullParser_START_TAG:
      [self parseStartTagWithBOOL:NO withBOOL:throwOnResolveFailure];
      return type_;
      case OrgXmlpullV1XmlPullParser_END_TAG:
      [self readEndTag];
      return type_;
      case OrgXmlpullV1XmlPullParser_END_DOCUMENT:
      return type_;
      case OrgXmlpullV1XmlPullParser_ENTITY_REF:
      if (justOneToken) {
        JavaLangStringBuilder *entityTextBuilder = [[[JavaLangStringBuilder alloc] init] autorelease];
        [self readEntityWithJavaLangStringBuilder:entityTextBuilder withBOOL:YES withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum TEXT]];
        JreOperatorRetainedAssign(&text_, [((JavaLangStringBuilder *) NIL_CHK(entityTextBuilder)) description]);
        break;
      }
      case OrgXmlpullV1XmlPullParser_TEXT:
      JreOperatorRetainedAssign(&text_, [self readValueWithUnichar:'<' withBOOL:!justOneToken withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum TEXT]]);
      if (depth_ == 0 && isWhitespace__) {
        type_ = OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE;
      }
      break;
      case OrgXmlpullV1XmlPullParser_CDSECT:
      [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_CDATA_];
      JreOperatorRetainedAssign(&text_, [self readUntilWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_END_CDATA_ withBOOL:YES]);
      break;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      commentText = [self readCommentWithBOOL:justOneToken];
      if (justOneToken) {
        JreOperatorRetainedAssign(&text_, commentText);
      }
      break;
      case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
      [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
      processingInstruction = [self readUntilWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ withBOOL:justOneToken];
      if (justOneToken) {
        JreOperatorRetainedAssign(&text_, processingInstruction);
      }
      break;
      case OrgXmlpullV1XmlPullParser_DOCDECL:
      [self readDoctypeWithBOOL:justOneToken];
      break;
      default:
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    if (depth_ == 0 && (type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF || type_ == OrgXmlpullV1XmlPullParser_TEXT || type_ == OrgXmlpullV1XmlPullParser_CDSECT)) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    if (justOneToken) {
      return type_;
    }
    if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
      JreOperatorRetainedAssign(&text_, nil);
    }
    int peek = [self peekTypeWithBOOL:NO];
    if (text_ != nil && ![NIL_CHK(text_) isEmpty] && peek < OrgXmlpullV1XmlPullParser_TEXT) {
      type_ = OrgXmlpullV1XmlPullParser_TEXT;
      return type_;
    }
    type_ = peek;
  }
}

- (NSString *)readUntilWithJavaLangCharacterArray:(IOSCharArray *)delimiter
                                         withBOOL:(BOOL)returnText {
  int start = position_;
  JavaLangStringBuilder *result = nil;
  if (returnText && text_ != nil) {
    result = [[[JavaLangStringBuilder alloc] init] autorelease];
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:text_];
  }
  while (YES) {
    if (position_ + (int) [((IOSCharArray *) NIL_CHK(delimiter)) count] >= limit_) {
      if (start < position_ && returnText) {
        if (result == nil) {
          result = [[[JavaLangStringBuilder alloc] init] autorelease];
        }
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
      }
      if (![self fillBufferWithInt:(int) [((IOSCharArray *) NIL_CHK(delimiter)) count]]) {
        [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
        type_ = OrgXmlpullV1XmlPullParser_COMMENT;
        return nil;
      }
      start = position_;
    }
    for (int i = 0; i < (int) [((IOSCharArray *) NIL_CHK(delimiter)) count]; i++) {
      if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + i] != [((IOSCharArray *) NIL_CHK(delimiter)) charAtIndex:i]) {
        position_++;
        goto continue_search;
      }
    }
    break;
    continue_search: ;
  }
  int end = position_;
  position_ += (int) [((IOSCharArray *) NIL_CHK(delimiter)) count];
  if (!returnText) {
    return nil;
  }
  else if (result == nil) {
    return [((LibcoreInternalStringPool *) NIL_CHK(stringPool_)) getWithJavaLangCharacterArray:buffer_ withInt:start withInt:end - start];
  }
  else {
    [result appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:end - start];
    return [result description];
  }
}

- (void)readXmlDeclaration {
  if (bufferStartLine_ != 0 || bufferStartColumn_ != 0 || position_ != 0) {
    [self checkRelaxedWithNSString:@"processing instructions must not start with xml"];
  }
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
  [self parseStartTagWithBOOL:YES withBOOL:YES];
  if (attributeCount_ < 1 || ![@"version" isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:2])]) {
    [self checkRelaxedWithNSString:@"version expected"];
  }
  JreOperatorRetainedAssign(&version__, ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:3]));
  int pos = 1;
  if (pos < attributeCount_ && [@"encoding" isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:2 + 4])]) {
    JreOperatorRetainedAssign(&encoding_, ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:3 + 4]));
    pos++;
  }
  if (pos < attributeCount_ && [@"standalone" isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:4 * pos + 2])]) {
    NSString *st = ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:3 + 4 * pos]);
    if ([@"yes" isEqual:st]) {
      JreOperatorRetainedAssign(&standalone_, [JavaLangBoolean getTRUE]);
    }
    else if ([@"no" isEqual:st]) {
      JreOperatorRetainedAssign(&standalone_, [JavaLangBoolean getFALSE]);
    }
    else {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"illegal standalone value: %@", st]];
    }
    pos++;
  }
  if (pos != attributeCount_) {
    [self checkRelaxedWithNSString:@"unexpected attributes in XML declaration"];
  }
  isWhitespace__ = YES;
  JreOperatorRetainedAssign(&text_, nil);
}

- (NSString *)readCommentWithBOOL:(BOOL)returnText {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_COMMENT_];
  if (relaxed_) {
    return [self readUntilWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_END_COMMENT_ withBOOL:returnText];
  }
  NSString *commentText = [self readUntilWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_ withBOOL:returnText];
  if ([self peekCharacter] != '>') {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Comments may not contain --" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  position_++;
  return commentText;
}

- (void)readDoctypeWithBOOL:(BOOL)saveDtdText {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_DOCTYPE_];
  int startPosition = -1;
  if (saveDtdText) {
    JreOperatorRetainedAssign(&bufferCapture_, [[[JavaLangStringBuilder alloc] init] autorelease]);
    startPosition = position_;
  }
  @try {
    [self skip];
    JreOperatorRetainedAssign(&rootElementName_, [self readName]);
    [self readExternalIdWithBOOL:YES withBOOL:YES];
    [self skip];
    if ([self peekCharacter] == '[') {
      [self readInternalSubset];
    }
    [self skip];
  }
  @finally {
    if (saveDtdText) {
      [((JavaLangStringBuilder *) NIL_CHK(bufferCapture_)) appendWithJavaLangCharacterArray:buffer_ withInt:0 withInt:position_];
      [((JavaLangStringBuilder *) NIL_CHK(bufferCapture_)) delete__WithInt:0 withInt:startPosition];
      JreOperatorRetainedAssign(&text_, [((JavaLangStringBuilder *) NIL_CHK(bufferCapture_)) description]);
      JreOperatorRetainedAssign(&bufferCapture_, nil);
    }
  }
  [self readWithUnichar:'>'];
}

- (BOOL)readExternalIdWithBOOL:(BOOL)requireSystemName
                      withBOOL:(BOOL)assignFields {
  [self skip];
  int c = [self peekCharacter];
  if (c == 'S') {
    [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_SYSTEM_];
  }
  else if (c == 'P') {
    [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_PUBLIC_];
    [self skip];
    if (assignFields) {
      JreOperatorRetainedAssign(&publicId_, [self readQuotedIdWithBOOL:YES]);
    }
    else {
      [self readQuotedIdWithBOOL:NO];
    }
  }
  else {
    return NO;
  }
  [self skip];
  if (!requireSystemName) {
    int delimiter = [self peekCharacter];
    if (delimiter != '"' && delimiter != '\'') {
      return YES;
    }
  }
  if (assignFields) {
    JreOperatorRetainedAssign(&systemId_, [self readQuotedIdWithBOOL:YES]);
  }
  else {
    [self readQuotedIdWithBOOL:NO];
  }
  return YES;
}

- (NSString *)readQuotedIdWithBOOL:(BOOL)returnText {
  int quote = [self peekCharacter];
  IOSCharArray *delimiter;
  if (quote == '"') {
    delimiter = OrgKxml2IoKXmlParser_DOUBLE_QUOTE_;
  }
  else if (quote == '\'') {
    delimiter = OrgKxml2IoKXmlParser_SINGLE_QUOTE_;
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected a quoted string" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  position_++;
  return [self readUntilWithJavaLangCharacterArray:delimiter withBOOL:returnText];
}

- (void)readInternalSubset {
  [self readWithUnichar:'['];
  while (YES) {
    [self skip];
    if ([self peekCharacter] == ']') {
      position_++;
      return;
    }
    int declarationType = [self peekTypeWithBOOL:YES];
    switch (declarationType) {
      case OrgKxml2IoKXmlParser_ELEMENTDECL:
      [self readElementDeclaration];
      break;
      case OrgKxml2IoKXmlParser_ATTLISTDECL:
      [self readAttributeListDeclaration];
      break;
      case OrgKxml2IoKXmlParser_ENTITYDECL:
      [self readEntityDeclaration];
      break;
      case OrgKxml2IoKXmlParser_NOTATIONDECL:
      [self readNotationDeclaration];
      break;
      case OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION:
      [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_];
      [self readUntilWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_ withBOOL:NO];
      break;
      case OrgXmlpullV1XmlPullParser_COMMENT:
      [self readCommentWithBOOL:NO];
      break;
      case OrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF:
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Parameter entity references are not supported" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      default:
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected token" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
  }
}

- (void)readElementDeclaration {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_ELEMENT_];
  [self skip];
  [self readName];
  [self readContentSpec];
  [self skip];
  [self readWithUnichar:'>'];
}

- (void)readContentSpec {
  [self skip];
  int c = [self peekCharacter];
  if (c == '(') {
    int depth = 0;
    do {
      if (c == '(') {
        depth++;
      }
      else if (c == ')') {
        depth--;
      }
      position_++;
      c = [self peekCharacter];
    }
    while (depth > 0);
    if (c == '*' || c == '?' || c == '+') {
      position_++;
    }
  }
  else if (c == [((IOSCharArray *) NIL_CHK(OrgKxml2IoKXmlParser_EMPTY_)) charAtIndex:0]) {
    [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_EMPTY_];
  }
  else if (c == [((IOSCharArray *) NIL_CHK(OrgKxml2IoKXmlParser_ANY_)) charAtIndex:0]) {
    [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_ANY_];
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected element content spec" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

- (void)readAttributeListDeclaration {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_ATTLIST_];
  [self skip];
  NSString *elementName = [self readName];
  while (YES) {
    [self skip];
    int c = [self peekCharacter];
    if (c == '>') {
      position_++;
      return;
    }
    NSString *attributeName = [self readName];
    [self skip];
    if (position_ + 1 >= limit_ && ![self fillBufferWithInt:2]) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute list" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_] == [((IOSCharArray *) NIL_CHK(OrgKxml2IoKXmlParser_NOTATION_)) charAtIndex:0] && [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 1] == [((IOSCharArray *) NIL_CHK(OrgKxml2IoKXmlParser_NOTATION_)) charAtIndex:1]) {
      [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_NOTATION_];
      [self skip];
    }
    c = [self peekCharacter];
    if (c == '(') {
      position_++;
      while (YES) {
        [self skip];
        [self readName];
        [self skip];
        c = [self peekCharacter];
        if (c == ')') {
          position_++;
          break;
        }
        else if (c == '|') {
          position_++;
        }
        else {
          @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
        }
      }
    }
    else {
      [self readName];
    }
    [self skip];
    c = [self peekCharacter];
    if (c == '#') {
      position_++;
      c = [self peekCharacter];
      if (c == 'R') {
        [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_REQUIRED_];
      }
      else if (c == 'I') {
        [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_IMPLIED_];
      }
      else if (c == 'F') {
        [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_FIXED_];
      }
      else {
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Malformed attribute type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      }
      [self skip];
      c = [self peekCharacter];
    }
    if (c == '"' || c == '\'') {
      position_++;
      NSString *value = [self readValueWithUnichar:(unichar) c withBOOL:YES withBOOL:YES withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]];
      position_++;
      [self defineAttributeDefaultWithNSString:elementName withNSString:attributeName withNSString:value];
    }
  }
}

- (void)defineAttributeDefaultWithNSString:(NSString *)elementName
                              withNSString:(NSString *)attributeName
                              withNSString:(NSString *)value {
  if (defaultAttributes_ == nil) {
    JreOperatorRetainedAssign(&defaultAttributes_, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  id<JavaUtilMap> elementAttributes = ((id<JavaUtilMap>) [((id<JavaUtilMap>) NIL_CHK(defaultAttributes_)) getWithId:elementName]);
  if (elementAttributes == nil) {
    elementAttributes = [[[JavaUtilHashMap alloc] init] autorelease];
    [((id<JavaUtilMap>) NIL_CHK(defaultAttributes_)) putWithId:elementName withId:elementAttributes];
  }
  [((id<JavaUtilMap>) NIL_CHK(elementAttributes)) putWithId:attributeName withId:value];
}

- (void)readEntityDeclaration {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_ENTITY_];
  BOOL generalEntity = YES;
  [self skip];
  if ([self peekCharacter] == '%') {
    generalEntity = NO;
    position_++;
    [self skip];
  }
  NSString *name = [self readName];
  [self skip];
  int quote = [self peekCharacter];
  NSString *entityValue;
  if (quote == '"' || quote == '\'') {
    position_++;
    entityValue = [self readValueWithUnichar:(unichar) quote withBOOL:YES withBOOL:NO withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION]];
    position_++;
  }
  else if ([self readExternalIdWithBOOL:YES withBOOL:NO]) {
    entityValue = @"";
    [self skip];
    if ([self peekCharacter] == [((IOSCharArray *) NIL_CHK(OrgKxml2IoKXmlParser_NDATA_)) charAtIndex:0]) {
      [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_NDATA_];
      [self skip];
      [self readName];
    }
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected entity value or external ID" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  if (generalEntity && processDocDecl_) {
    if (documentEntities_ == nil) {
      JreOperatorRetainedAssign(&documentEntities_, [[[JavaUtilHashMap alloc] init] autorelease]);
    }
    [((id<JavaUtilMap>) NIL_CHK(documentEntities_)) putWithId:name withId:[NIL_CHK(entityValue) toCharArray]];
  }
  [self skip];
  [self readWithUnichar:'>'];
}

- (void)readNotationDeclaration {
  [self readWithJavaLangCharacterArray:OrgKxml2IoKXmlParser_START_NOTATION_];
  [self skip];
  [self readName];
  if (![self readExternalIdWithBOOL:NO withBOOL:NO]) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Expected external ID or public ID for notation" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  [self skip];
  [self readWithUnichar:'>'];
}

- (void)readEndTag {
  [self readWithUnichar:'<'];
  [self readWithUnichar:'/'];
  JreOperatorRetainedAssign(&name_, [self readName]);
  [self skip];
  [self readWithUnichar:'>'];
  int sp = (depth_ - 1) * 4;
  if (depth_ == 0) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"read end tag %@ with no tags open", name_]];
    type_ = OrgXmlpullV1XmlPullParser_COMMENT;
    return;
  }
  if ([NIL_CHK(name_) isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:sp + 3])]) {
    JreOperatorRetainedAssign(&namespace__, ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:sp]));
    JreOperatorRetainedAssign(&prefix_, ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:sp + 1]));
    JreOperatorRetainedAssign(&name_, ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:sp + 2]));
  }
  else if (!relaxed_) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"expected: /%@ read: %@", ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:sp + 3]), name_] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

- (int)peekTypeWithBOOL:(BOOL)inDeclaration {
  if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
    return OrgXmlpullV1XmlPullParser_END_DOCUMENT;
  }
  switch ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_]) {
    case '&':
    return OrgXmlpullV1XmlPullParser_ENTITY_REF;
    case '<':
    if (position_ + 3 >= limit_ && ![self fillBufferWithInt:4]) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Dangling <" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    switch ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 1]) {
      case '/':
      return OrgXmlpullV1XmlPullParser_END_TAG;
      case '?':
      if ((position_ + 5 < limit_ || [self fillBufferWithInt:6]) && ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 2] == 'x' || [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 2] == 'X') && ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 3] == 'm' || [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 3] == 'M') && ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 4] == 'l' || [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 4] == 'L') && ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 5] == ' ')) {
        return OrgKxml2IoKXmlParser_XML_DECLARATION;
      }
      else {
        return OrgXmlpullV1XmlPullParser_PROCESSING_INSTRUCTION;
      }
      case '!':
      switch ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 2]) {
        case 'D':
        return OrgXmlpullV1XmlPullParser_DOCDECL;
        case '[':
        return OrgXmlpullV1XmlPullParser_CDSECT;
        case '-':
        return OrgXmlpullV1XmlPullParser_COMMENT;
        case 'E':
        switch ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 3]) {
          case 'L':
          return OrgKxml2IoKXmlParser_ELEMENTDECL;
          case 'N':
          return OrgKxml2IoKXmlParser_ENTITYDECL;
        }
        break;
        case 'A':
        return OrgKxml2IoKXmlParser_ATTLISTDECL;
        case 'N':
        return OrgKxml2IoKXmlParser_NOTATIONDECL;
      }
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unexpected <!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      default:
      return OrgXmlpullV1XmlPullParser_START_TAG;
    }
    case '%':
    return inDeclaration ? OrgKxml2IoKXmlParser_PARAMETER_ENTITY_REF : OrgXmlpullV1XmlPullParser_TEXT;
    default:
    return OrgXmlpullV1XmlPullParser_TEXT;
  }
}

- (void)parseStartTagWithBOOL:(BOOL)xmldecl
                     withBOOL:(BOOL)throwOnResolveFailure {
  if (!xmldecl) {
    [self readWithUnichar:'<'];
  }
  JreOperatorRetainedAssign(&name_, [self readName]);
  attributeCount_ = 0;
  while (YES) {
    [self skip];
    if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
      [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
      return;
    }
    int c = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
    if (xmldecl) {
      if (c == '?') {
        position_++;
        [self readWithUnichar:'>'];
        return;
      }
    }
    else {
      if (c == '/') {
        degenerated_ = YES;
        position_++;
        [self skip];
        [self readWithUnichar:'>'];
        break;
      }
      else if (c == '>') {
        position_++;
        break;
      }
    }
    NSString *attrName = [self readName];
    int i = (attributeCount_++) * 4;
    JreOperatorRetainedAssign(&attributes_, [self ensureCapacityWithNSStringArray:attributes_ withInt:i + 4]);
    [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i withObject:@""];
    [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 1 withObject:nil];
    [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 2 withObject:attrName];
    [self skip];
    if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
      [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
      return;
    }
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_] == '=') {
      position_++;
      [self skip];
      if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
        [self checkRelaxedWithNSString:OrgKxml2IoKXmlParser_UNEXPECTED_EOF_];
        return;
      }
      unichar delimiter = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
      if (delimiter == '\'' || delimiter == '"') {
        position_++;
      }
      else if (relaxed_) {
        delimiter = ' ';
      }
      else {
        @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"attr value delimiter missing!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
      }
      [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 3 withObject:[self readValueWithUnichar:delimiter withBOOL:YES withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:[OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]]];
      if (delimiter != ' ') {
        position_++;
      }
    }
    else if (relaxed_) {
      [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 3 withObject:attrName];
    }
    else {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"Attr.value missing f. %@", attrName]];
      [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 3 withObject:attrName];
    }
  }
  int sp = depth_++ * 4;
  JreOperatorRetainedAssign(&elementStack_, [self ensureCapacityWithNSStringArray:elementStack_ withInt:sp + 4]);
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:sp + 3 withObject:name_];
  if (depth_ >= (int) [((IOSIntArray *) NIL_CHK(nspCounts_)) count]) {
    IOSIntArray *bigger = [[[IOSIntArray alloc] initWithLength:depth_ + 4] autorelease];
    [JavaLangSystem arraycopyWithId:nspCounts_ withInt:0 withId:bigger withInt:0 withInt:(int) [((IOSIntArray *) NIL_CHK(nspCounts_)) count]];
    JreOperatorRetainedAssign(&nspCounts_, bigger);
  }
  [((IOSIntArray *) NIL_CHK(nspCounts_)) replaceIntAtIndex:depth_ withInt:[((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ - 1]];
  if (processNsp_) {
    [self adjustNsp];
  }
  else {
    JreOperatorRetainedAssign(&namespace__, @"");
  }
  if (defaultAttributes_ != nil) {
    id<JavaUtilMap> elementDefaultAttributes = ((id<JavaUtilMap>) [defaultAttributes_ getWithId:name_]);
    if (elementDefaultAttributes != nil) {
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [elementDefaultAttributes entrySet]) iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          id<JavaUtilMap_Entry> entry = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          if ([self getAttributeValueWithNSString:nil withNSString:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey])] != nil) {
            continue;
          }
          int i = (attributeCount_++) * 4;
          JreOperatorRetainedAssign(&attributes_, [self ensureCapacityWithNSStringArray:attributes_ withInt:i + 4]);
          [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i withObject:@""];
          [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 1 withObject:nil];
          [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 2 withObject:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey])];
          [((IOSObjectArray *) NIL_CHK(attributes_)) replaceObjectAtIndex:i + 3 withObject:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue])];
        }
      }
    }
  }
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:sp withObject:namespace__];
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:sp + 1 withObject:prefix_];
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:sp + 2 withObject:name_];
}

- (void)readEntityWithJavaLangStringBuilder:(JavaLangStringBuilder *)outArg
                                   withBOOL:(BOOL)isEntityToken
                                   withBOOL:(BOOL)throwOnResolveFailure
  withOrgKxml2IoKXmlParser_ValueContextEnum:(OrgKxml2IoKXmlParser_ValueContextEnum *)valueContext {
  int start = [((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength];
  if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_++] != '&') {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
  [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendWithUnichar:'&'];
  while (YES) {
    int c = [self peekCharacter];
    if (c == ';') {
      [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendWithUnichar:';'];
      position_++;
      break;
    }
    else if (c >= 128 || (c >= '0' && c <= '9') || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == '-' || c == '#') {
      position_++;
      [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendWithUnichar:(unichar) c];
    }
    else if (relaxed_) {
      return;
    }
    else {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"unterminated entity ref" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
  }
  NSString *code = [((JavaLangStringBuilder *) NIL_CHK(outArg)) substringWithInt:start + 1 withInt:[((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength] - 1];
  if (isEntityToken) {
    JreOperatorRetainedAssign(&name_, code);
  }
  if ([NIL_CHK(code) hasPrefix:@"#"]) {
    @try {
      int c = [NIL_CHK(code) hasPrefix:@"#x"] ? [JavaLangInteger parseIntWithNSString:[NIL_CHK(code) substring:2] withInt:16] : [JavaLangInteger parseIntWithNSString:[NIL_CHK(code) substring:1]];
      [((JavaLangStringBuilder *) NIL_CHK(outArg)) delete__WithInt:start withInt:[((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength]];
      [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendCodePointWithInt:c];
      unresolved_ = NO;
      return;
    }
    @catch (JavaLangNumberFormatException *notANumber) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid character reference: &%@", code]] autorelease];
    }
    @catch (JavaLangIllegalArgumentException *invalidCodePoint) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid character reference: &%@", code]] autorelease];
    }
  }
  if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION]) {
    return;
  }
  NSString *defaultEntity = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) getWithId:code]);
  if (defaultEntity != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(outArg)) delete__WithInt:start withInt:[((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength]];
    unresolved_ = NO;
    [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendWithNSString:defaultEntity];
    return;
  }
  IOSCharArray *resolved;
  if (documentEntities_ != nil && (resolved = ((IOSCharArray *) [((id<JavaUtilMap>) NIL_CHK(documentEntities_)) getWithId:code])) != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(outArg)) delete__WithInt:start withInt:[((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength]];
    unresolved_ = NO;
    if (processDocDecl_) {
      [self pushContentSourceWithJavaLangCharacterArray:resolved];
    }
    else {
      [((JavaLangStringBuilder *) NIL_CHK(outArg)) appendWithJavaLangCharacterArray:resolved];
    }
    return;
  }
  if (systemId_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(outArg)) delete__WithInt:start withInt:[((JavaLangStringBuilder *) NIL_CHK(outArg)) sequenceLength]];
    return;
  }
  unresolved_ = YES;
  if (throwOnResolveFailure) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"unresolved: &%@;", code]];
  }
}

- (NSString *)readValueWithUnichar:(unichar)delimiter
                          withBOOL:(BOOL)resolveEntities
                          withBOOL:(BOOL)throwOnResolveFailure
withOrgKxml2IoKXmlParser_ValueContextEnum:(OrgKxml2IoKXmlParser_ValueContextEnum *)valueContext {
  int start = position_;
  JavaLangStringBuilder *result = nil;
  if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum TEXT] && text_ != nil) {
    result = [[[JavaLangStringBuilder alloc] init] autorelease];
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithNSString:text_];
  }
  while (YES) {
    if (position_ >= limit_) {
      if (start < position_) {
        if (result == nil) {
          result = [[[JavaLangStringBuilder alloc] init] autorelease];
        }
        [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
      }
      if (![self fillBufferWithInt:1]) {
        return result != nil ? [((JavaLangStringBuilder *) NIL_CHK(result)) description] : @"";
      }
      start = position_;
    }
    unichar c = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
    if (c == delimiter || (delimiter == ' ' && (c <= ' ' || c == '>')) || c == '&' && !resolveEntities) {
      break;
    }
    if (c != 0x000d && (c != 0x000a || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) && c != '&' && c != '<' && (c != ']' || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum TEXT]) && (c != '%' || valueContext != [OrgKxml2IoKXmlParser_ValueContextEnum ENTITY_DECLARATION])) {
      isWhitespace__ &= (c <= ' ');
      position_++;
      continue;
    }
    if (result == nil) {
      result = [[[JavaLangStringBuilder alloc] init] autorelease];
    }
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
    if (c == 0x000d) {
      if ((position_ + 1 < limit_ || [self fillBufferWithInt:2]) && [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 1] == 0x000a) {
        position_++;
      }
      c = (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) ? ' ' : 0x000a;
    }
    else if (c == 0x000a) {
      c = ' ';
    }
    else if (c == '&') {
      isWhitespace__ = NO;
      [self readEntityWithJavaLangStringBuilder:result withBOOL:NO withBOOL:throwOnResolveFailure withOrgKxml2IoKXmlParser_ValueContextEnum:valueContext];
      start = position_;
      continue;
    }
    else if (c == '<') {
      if (valueContext == [OrgKxml2IoKXmlParser_ValueContextEnum ATTRIBUTE]) {
        [self checkRelaxedWithNSString:@"Illegal: \"<\" inside attribute value"];
      }
      isWhitespace__ = NO;
    }
    else if (c == ']') {
      if ((position_ + 2 < limit_ || [self fillBufferWithInt:3]) && [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 1] == ']' && [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + 2] == '>') {
        [self checkRelaxedWithNSString:@"Illegal: \"]]>\" outside CDATA section"];
      }
      isWhitespace__ = NO;
    }
    else if (c == '%') {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"This parser doesn't support parameter entities" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    else {
      @throw [[[JavaLangAssertionError alloc] init] autorelease];
    }
    position_++;
    [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithUnichar:c];
    start = position_;
  }
  if (result == nil) {
    return [((LibcoreInternalStringPool *) NIL_CHK(stringPool_)) getWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
  }
  else {
    [result appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
    return [result description];
  }
}

- (void)readWithUnichar:(unichar)expected {
  int c = [self peekCharacter];
  if (c != expected) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: '%c' actual: '%c'", expected, ((unichar) c)]];
  }
  position_++;
}

- (void)readWithJavaLangCharacterArray:(IOSCharArray *)chars {
  if (position_ + (int) [((IOSCharArray *) NIL_CHK(chars)) count] >= limit_ && ![self fillBufferWithInt:(int) [((IOSCharArray *) NIL_CHK(chars)) count]]) {
    [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: '%@' but was EOF", [NSString stringWithCharacters:chars]]];
    return;
  }
  for (int i = 0; i < (int) [((IOSCharArray *) NIL_CHK(chars)) count]; i++) {
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_ + i] != [((IOSCharArray *) NIL_CHK(chars)) charAtIndex:i]) {
      [self checkRelaxedWithNSString:[NSString stringWithFormat:@"expected: \"%@\" but was \"%@...\"", [NSString stringWithCharacters:chars], [NSString stringWithCharacters:buffer_ offset:position_ length:(int) [((IOSCharArray *) NIL_CHK(chars)) count]]]];
    }
  }
  position_ += (int) [((IOSCharArray *) NIL_CHK(chars)) count];
}

- (int)peekCharacter {
  if (position_ < limit_ || [self fillBufferWithInt:1]) {
    return [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
  }
  return -1;
}

- (BOOL)fillBufferWithInt:(int)minimum {
  while (nextContentSource_ != nil) {
    if (position_ < limit_) {
      @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"Unbalanced entity!" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
    }
    [self popContentSource];
    if (limit_ - position_ >= minimum) {
      return YES;
    }
  }
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:i] == 0x000a) {
      bufferStartLine_++;
      bufferStartColumn_ = 0;
    }
    else {
      bufferStartColumn_++;
    }
  }
  if (bufferCapture_ != nil) {
    [bufferCapture_ appendWithJavaLangCharacterArray:buffer_ withInt:0 withInt:position_];
  }
  if (limit_ != position_) {
    limit_ -= position_;
    [JavaLangSystem arraycopyWithId:buffer_ withInt:position_ withId:buffer_ withInt:0 withInt:limit_];
  }
  else {
    limit_ = 0;
  }
  position_ = 0;
  int total;
  while ((total = [((JavaIoReader *) NIL_CHK(reader_)) readWithJavaLangCharacterArray:buffer_ withInt:limit_ withInt:(int) [((IOSCharArray *) NIL_CHK(buffer_)) count] - limit_]) != -1) {
    limit_ += total;
    if (limit_ >= minimum) {
      return YES;
    }
  }
  return NO;
}

- (NSString *)readName {
  if (position_ >= limit_ && ![self fillBufferWithInt:1]) {
    [self checkRelaxedWithNSString:@"name expected"];
    return @"";
  }
  int start = position_;
  JavaLangStringBuilder *result = nil;
  unichar c = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' || c == ':' || c >= 0x00c0 || relaxed_) {
    position_++;
  }
  else {
    [self checkRelaxedWithNSString:@"name expected"];
    return @"";
  }
  while (YES) {
    if (position_ >= limit_) {
      if (result == nil) {
        result = [[[JavaLangStringBuilder alloc] init] autorelease];
      }
      [((JavaLangStringBuilder *) NIL_CHK(result)) appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
      if (![self fillBufferWithInt:1]) {
        return [((JavaLangStringBuilder *) NIL_CHK(result)) description];
      }
      start = position_;
    }
    c = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_' || c == '-' || c == ':' || c == '.' || c >= 0x00b7) {
      position_++;
      continue;
    }
    if (result == nil) {
      return [((LibcoreInternalStringPool *) NIL_CHK(stringPool_)) getWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
    }
    else {
      [result appendWithJavaLangCharacterArray:buffer_ withInt:start withInt:position_ - start];
      return [result description];
    }
  }
}

- (void)skip {
  while (position_ < limit_ || [self fillBufferWithInt:1]) {
    int c = [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:position_];
    if (c > ' ') {
      break;
    }
    position_++;
  }
}

- (void)setInputWithJavaIoReader:(JavaIoReader *)reader {
  self.reader = reader;
  type_ = OrgXmlpullV1XmlPullParser_START_DOCUMENT;
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&namespace__, nil);
  degenerated_ = NO;
  attributeCount_ = -1;
  JreOperatorRetainedAssign(&encoding_, nil);
  JreOperatorRetainedAssign(&version__, nil);
  JreOperatorRetainedAssign(&standalone_, nil);
  if (reader == nil) {
    return;
  }
  position_ = 0;
  limit_ = 0;
  bufferStartLine_ = 0;
  bufferStartColumn_ = 0;
  depth_ = 0;
  JreOperatorRetainedAssign(&documentEntities_, nil);
}

- (void)setInputWithJavaIoInputStream:(JavaIoInputStream *)is
                         withNSString:(NSString *)charset {
  position_ = 0;
  limit_ = 0;
  BOOL detectCharset = (charset == nil);
  if (is == nil) {
    @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"is == null"] autorelease];
  }
  @try {
    if (detectCharset) {
      int firstFourBytes = 0;
      while (limit_ < 4) {
        int i = [((JavaIoInputStream *) NIL_CHK(is)) read];
        if (i == -1) {
          break;
        }
        firstFourBytes = (firstFourBytes << 8) | i;
        [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:limit_++ withChar:(unichar) i];
      }
      if (limit_ == 4) {
        switch (firstFourBytes) {
          case (int) 0x00000FEFF:
          charset = @"UTF-32BE";
          limit_ = 0;
          break;
          case (int) 0x0FFFE0000:
          charset = @"UTF-32LE";
          limit_ = 0;
          break;
          case (int) 0x0000003c:
          charset = @"UTF-32BE";
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:'<'];
          limit_ = 1;
          break;
          case (int) 0x03c000000:
          charset = @"UTF-32LE";
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:'<'];
          limit_ = 1;
          break;
          case (int) 0x0003c003f:
          charset = @"UTF-16BE";
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:'<'];
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:1 withChar:'?'];
          limit_ = 2;
          break;
          case (int) 0x03c003f00:
          charset = @"UTF-16LE";
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:'<'];
          [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:1 withChar:'?'];
          limit_ = 2;
          break;
          case (int) 0x03c3f786d:
          while (YES) {
            int i = [((JavaIoInputStream *) NIL_CHK(is)) read];
            if (i == -1) {
              break;
            }
            [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:limit_++ withChar:(unichar) i];
            if (i == '>') {
              NSString *s = [NSString stringWithCharacters:buffer_ offset:0 length:limit_];
              int i0 = [NIL_CHK(s) indexOfString:@"encoding"];
              if (i0 != -1) {
                while ([NIL_CHK(s) charAtWithInt:i0] != '"' && [NIL_CHK(s) charAtWithInt:i0] != '\'') {
                  i0++;
                }
                unichar deli = [NIL_CHK(s) charAtWithInt:i0++];
                int i1 = [NIL_CHK(s) indexOf:deli fromIndex:i0];
                charset = [NIL_CHK(s) substring:i0 endIndex:i1];
              }
              break;
            }
          }
          break;
          default:
          if ((firstFourBytes & (int) 0x0ffff0000) == (int) 0x0feff0000) {
            charset = @"UTF-16BE";
            [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:(unichar) (([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:2] << 8) | [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:3])];
            limit_ = 1;
          }
          else if ((firstFourBytes & (int) 0x0ffff0000) == (int) 0x0fffe0000) {
            charset = @"UTF-16LE";
            [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:(unichar) (([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:3] << 8) | [((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:2])];
            limit_ = 1;
          }
          else if ((firstFourBytes & (int) 0x0ffffff00) == (int) 0x0efbbbf00) {
            charset = @"UTF-8";
            [((IOSCharArray *) NIL_CHK(buffer_)) replaceCharAtIndex:0 withChar:[((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:3]];
            limit_ = 1;
          }
        }
      }
    }
    if (charset == nil) {
      charset = @"UTF-8";
    }
    int savedLimit = limit_;
    [self setInputWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:is withNSString:charset] autorelease]];
    JreOperatorRetainedAssign(&encoding_, charset);
    limit_ = savedLimit;
    if (!detectCharset && [self peekCharacter] == (int) 0xfeff) {
      limit_--;
      [JavaLangSystem arraycopyWithId:buffer_ withInt:1 withId:buffer_ withInt:0 withInt:limit_];
    }
  }
  @catch (JavaLangException *e) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"Invalid stream or encoding: %@", e] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:e] autorelease];
  }
}

- (void)close {
  if (reader_ != nil) {
    [reader_ close];
  }
}

- (BOOL)getFeatureWithNSString:(NSString *)feature {
  if ([NIL_CHK([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]) isEqual:feature]) {
    return processNsp_;
  }
  else if ([NIL_CHK(OrgKxml2IoKXmlParser_FEATURE_RELAXED_) isEqual:feature]) {
    return relaxed_;
  }
  else if ([NIL_CHK([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_DOCDECL]) isEqual:feature]) {
    return processDocDecl_;
  }
  else {
    return NO;
  }
}

- (NSString *)getInputEncoding {
  return encoding_;
}

- (void)defineEntityReplacementTextWithNSString:(NSString *)entity
                                   withNSString:(NSString *)value {
  if (processDocDecl_) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Entity replacement text may not be defined with DOCTYPE processing enabled."] autorelease];
  }
  if (reader_ == nil) {
    @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Entity replacement text must be defined after setInput()"] autorelease];
  }
  if (documentEntities_ == nil) {
    JreOperatorRetainedAssign(&documentEntities_, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  [((id<JavaUtilMap>) NIL_CHK(documentEntities_)) putWithId:entity withId:[NIL_CHK(value) toCharArray]];
}

- (id)getPropertyWithNSString:(NSString *)property {
  if ([NIL_CHK(property) isEqual:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_VERSION_]) {
    return version__;
  }
  else if ([NIL_CHK(property) isEqual:OrgKxml2IoKXmlParser_PROPERTY_XMLDECL_STANDALONE_]) {
    return standalone_;
  }
  else if ([NIL_CHK(property) isEqual:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_]) {
    return location_ != nil ? location_ : [((JavaIoReader *) NIL_CHK(reader_)) description];
  }
  else {
    return nil;
  }
}

- (NSString *)getRootElementName {
  return rootElementName_;
}

- (NSString *)getSystemId {
  return systemId_;
}

- (NSString *)getPublicId {
  return publicId_;
}

- (int)getNamespaceCountWithInt:(int)depth {
  if (depth > self.depth) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth];
}

- (NSString *)getNamespacePrefixWithInt:(int)pos {
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:pos * 2]);
}

- (NSString *)getNamespaceUriWithInt:(int)pos {
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:(pos * 2) + 1]);
}

- (NSString *)getNamespaceWithNSString:(NSString *)prefix {
  if ([@"xml" isEqual:prefix]) {
    return @"http://www.w3.org/XML/1998/namespace";
  }
  if ([@"xmlns" isEqual:prefix]) {
    return @"http://www.w3.org/2000/xmlns/";
  }
  for (int i = ([self getNamespaceCountWithInt:depth_] << 1) - 2; i >= 0; i -= 2) {
    if (prefix == nil) {
      if (((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i]) == nil) {
        return ((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i + 1]);
      }
    }
    else if ([prefix isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i])]) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i + 1]);
    }
  }
  return nil;
}

- (int)getDepth {
  return depth_;
}

- (NSString *)getPositionDescription {
  JavaLangStringBuilder *buf = [[[JavaLangStringBuilder alloc] initWithNSString:type_ < (int) [((IOSObjectArray *) NIL_CHK([OrgXmlpullV1XmlPullParser TYPES])) count] ? ((NSString *) [((IOSObjectArray *) NIL_CHK([OrgXmlpullV1XmlPullParser TYPES])) objectAtIndex:type_]) : @"unknown"] autorelease];
  [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:' '];
  if (type_ == OrgXmlpullV1XmlPullParser_START_TAG || type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    if (degenerated_) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@"(empty) "];
    }
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:'<'];
    if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:'/'];
    }
    if (prefix_ != nil) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[NSString stringWithFormat:@"{%@}%@:", namespace__, prefix_]];
    }
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:name_];
    int cnt = attributeCount_ * 4;
    for (int i = 0; i < cnt; i += 4) {
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:' '];
      if (((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 1]) != nil) {
        [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[NSString stringWithFormat:@"{%@}%@:", ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i]), ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 1])]];
      }
      [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[NSString stringWithFormat:@"%@='%@'", ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 2]), ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 3])]];
    }
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithUnichar:'>'];
  }
  else if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) {
    ;
  }
  else if (type_ != OrgXmlpullV1XmlPullParser_TEXT) {
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[self getText]];
  }
  else if (isWhitespace__) {
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@"(whitespace)"];
  }
  else {
    NSString *text = [self getText];
    if ([NIL_CHK(text) length] > 16) {
      text = [NSString stringWithFormat:@"%@...", [NIL_CHK(text) substring:0 endIndex:16]];
    }
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:text];
  }
  [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[NSString stringWithFormat:@"@%d:%d", [self getLineNumber], [self getColumnNumber]]];
  if (location_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@" in "];
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:location_];
  }
  else if (reader_ != nil) {
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:@" in "];
    [((JavaLangStringBuilder *) NIL_CHK(buf)) appendWithNSString:[reader_ description]];
  }
  return [((JavaLangStringBuilder *) NIL_CHK(buf)) description];
}

- (int)getLineNumber {
  int result = bufferStartLine_;
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:i] == 0x000a) {
      result++;
    }
  }
  return result + 1;
}

- (int)getColumnNumber {
  int result = bufferStartColumn_;
  for (int i = 0; i < position_; i++) {
    if ([((IOSCharArray *) NIL_CHK(buffer_)) charAtIndex:i] == 0x000a) {
      result = 0;
    }
    else {
      result++;
    }
  }
  return result + 1;
}

- (BOOL)isWhitespace {
  if (type_ != OrgXmlpullV1XmlPullParser_TEXT && type_ != OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE && type_ != OrgXmlpullV1XmlPullParser_CDSECT) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return isWhitespace__;
}

- (NSString *)getText {
  if (type_ < OrgXmlpullV1XmlPullParser_TEXT || (type_ == OrgXmlpullV1XmlPullParser_ENTITY_REF && unresolved_)) {
    return nil;
  }
  else if (text_ == nil) {
    return @"";
  }
  else {
    return text_;
  }
}

- (IOSCharArray *)getTextCharactersWithJavaLangIntegerArray:(IOSIntArray *)poslen {
  NSString *text = [self getText];
  if (text == nil) {
    [((IOSIntArray *) NIL_CHK(poslen)) replaceIntAtIndex:0 withInt:-1];
    [((IOSIntArray *) NIL_CHK(poslen)) replaceIntAtIndex:1 withInt:-1];
    return nil;
  }
  IOSCharArray *result = [NIL_CHK(text) toCharArray];
  [((IOSIntArray *) NIL_CHK(poslen)) replaceIntAtIndex:0 withInt:0];
  [((IOSIntArray *) NIL_CHK(poslen)) replaceIntAtIndex:1 withInt:(int) [((IOSCharArray *) NIL_CHK(result)) count]];
  return result;
}

- (NSString *)getNamespace {
  return namespace__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getPrefix {
  return prefix_;
}

- (BOOL)isEmptyElementTag {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:OrgKxml2IoKXmlParser_ILLEGAL_TYPE_ withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return degenerated_;
}

- (int)getAttributeCount {
  return attributeCount_;
}

- (NSString *)getAttributeTypeWithInt:(int)index {
  return @"CDATA";
}

- (BOOL)isAttributeDefaultWithInt:(int)index {
  return NO;
}

- (NSString *)getAttributeNamespaceWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:index * 4]);
}

- (NSString *)getAttributeNameWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:(index * 4) + 2]);
}

- (NSString *)getAttributePrefixWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:(index * 4) + 1]);
}

- (NSString *)getAttributeValueWithInt:(int)index {
  if (index >= attributeCount_) {
    @throw [[[JavaLangIndexOutOfBoundsException alloc] init] autorelease];
  }
  return ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:(index * 4) + 3]);
}

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name {
  for (int i = (attributeCount_ * 4) - 4; i >= 0; i -= 4) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 2]) isEqual:name] && (namespace_ == nil || [((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i]) isEqual:namespace_])) {
      return ((NSString *) [((IOSObjectArray *) NIL_CHK(attributes_)) objectAtIndex:i + 3]);
    }
  }
  return nil;
}

- (int)getEventType {
  return type_;
}

- (int)nextTag {
  [self next];
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT && isWhitespace__) {
    [self next];
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG && type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"unexpected type" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return type_;
}

- (void)requireWithInt:(int)type
          withNSString:(NSString *)namespace_
          withNSString:(NSString *)name {
  if (type != self.type || (namespace_ != nil && ![NIL_CHK(namespace_) isEqual:[self getNamespace]]) || (name != nil && ![NIL_CHK(name) isEqual:[self getName]])) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"expected: %@ {%@}%@", ((NSString *) [((IOSObjectArray *) NIL_CHK([OrgXmlpullV1XmlPullParser TYPES])) objectAtIndex:type]), namespace_, name] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

- (NSString *)nextText {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"precondition: START_TAG" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  [self next];
  NSString *result;
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT) {
    result = [self getText];
    [self next];
  }
  else {
    result = @"";
  }
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG) {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:@"END_TAG expected" withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
  return result;
}

- (void)setFeatureWithNSString:(NSString *)feature
                      withBOOL:(BOOL)value {
  if ([NIL_CHK([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_NAMESPACES]) isEqual:feature]) {
    processNsp_ = value;
  }
  else if ([NIL_CHK([OrgXmlpullV1XmlPullParser FEATURE_PROCESS_DOCDECL]) isEqual:feature]) {
    processDocDecl_ = value;
  }
  else if ([NIL_CHK(OrgKxml2IoKXmlParser_FEATURE_RELAXED_) isEqual:feature]) {
    relaxed_ = value;
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"unsupported feature: %@", feature] withOrgXmlpullV1XmlPullParser:self withJavaLangThrowable:nil] autorelease];
  }
}

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value {
  if ([NIL_CHK(property) isEqual:OrgKxml2IoKXmlParser_PROPERTY_LOCATION_]) {
    JreOperatorRetainedAssign(&location_, [NSString valueOf:value]);
  }
  else {
    @throw [[[OrgXmlpullV1XmlPullParserException alloc] initWithNSString:[NSString stringWithFormat:@"unsupported property: %@", property]] autorelease];
  }
}

- (void)pushContentSourceWithJavaLangCharacterArray:(IOSCharArray *)newBuffer {
  JreOperatorRetainedAssign(&nextContentSource_, [[[OrgKxml2IoKXmlParser_ContentSource alloc] initWithOrgKxml2IoKXmlParser_ContentSource:nextContentSource_ withJavaLangCharacterArray:buffer_ withInt:position_ withInt:limit_] autorelease]);
  JreOperatorRetainedAssign(&buffer_, newBuffer);
  position_ = 0;
  limit_ = (int) [((IOSCharArray *) NIL_CHK(newBuffer)) count];
}

- (void)popContentSource {
  JreOperatorRetainedAssign(&buffer_, ((OrgKxml2IoKXmlParser_ContentSource *) NIL_CHK(nextContentSource_)).buffer);
  position_ = ((OrgKxml2IoKXmlParser_ContentSource *) NIL_CHK(nextContentSource_)).position;
  limit_ = ((OrgKxml2IoKXmlParser_ContentSource *) NIL_CHK(nextContentSource_)).limit;
  JreOperatorRetainedAssign(&nextContentSource_, ((OrgKxml2IoKXmlParser_ContentSource *) NIL_CHK(nextContentSource_)).next);
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&elementStack_, [[[IOSObjectArray alloc] initWithLength:16 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    JreOperatorRetainedAssign(&nspStack_, [[[IOSObjectArray alloc] initWithLength:8 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    JreOperatorRetainedAssign(&nspCounts_, [[[IOSIntArray alloc] initWithLength:4] autorelease]);
    JreOperatorRetainedAssign(&buffer_, [[[IOSCharArray alloc] initWithLength:8192] autorelease]);
    position_ = 0;
    limit_ = 0;
    JreOperatorRetainedAssign(&attributes_, [[[IOSObjectArray alloc] initWithLength:16 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    JreOperatorRetainedAssign(&stringPool_, [[[LibcoreInternalStringPool alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

+ (void)initialize {
  if (self == [OrgKxml2IoKXmlParser class]) {
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_, [[[JavaUtilHashMap alloc] init] autorelease]);
    {
      [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) putWithId:@"lt" withId:@"<"];
      [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) putWithId:@"gt" withId:@">"];
      [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) putWithId:@"amp" withId:@"&"];
      [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) putWithId:@"apos" withId:@"'"];
      [((id<JavaUtilMap>) NIL_CHK(OrgKxml2IoKXmlParser_DEFAULT_ENTITIES_)) putWithId:@"quot" withId:@"\""];
    }
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_COMMENT_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', '-', '-' } count:4]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_COMMENT_, [IOSCharArray arrayWithCharacters:(unichar[]){ '-', '-', '>' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_COMMENT_DOUBLE_DASH_, [IOSCharArray arrayWithCharacters:(unichar[]){ '-', '-' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_CDATA_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', '[', 'C', 'D', 'A', 'T', 'A', '[' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_CDATA_, [IOSCharArray arrayWithCharacters:(unichar[]){ ']', ']', '>' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_PROCESSING_INSTRUCTION_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '?' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_END_PROCESSING_INSTRUCTION_, [IOSCharArray arrayWithCharacters:(unichar[]){ '?', '>' } count:2]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_DOCTYPE_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'D', 'O', 'C', 'T', 'Y', 'P', 'E' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_SYSTEM_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'S', 'Y', 'S', 'T', 'E', 'M' } count:6]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_PUBLIC_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'P', 'U', 'B', 'L', 'I', 'C' } count:6]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ELEMENT_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'E', 'L', 'E', 'M', 'E', 'N', 'T' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ATTLIST_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'A', 'T', 'T', 'L', 'I', 'S', 'T' } count:9]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_ENTITY_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'E', 'N', 'T', 'I', 'T', 'Y' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_START_NOTATION_, [IOSCharArray arrayWithCharacters:(unichar[]){ '<', '!', 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:10]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_EMPTY_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'E', 'M', 'P', 'T', 'Y' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_ANY_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'A', 'N', 'Y' } count:3]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_NDATA_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'N', 'D', 'A', 'T', 'A' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_NOTATION_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'N', 'O', 'T', 'A', 'T', 'I', 'O', 'N' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_REQUIRED_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'R', 'E', 'Q', 'U', 'I', 'R', 'E', 'D' } count:8]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_IMPLIED_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'I', 'M', 'P', 'L', 'I', 'E', 'D' } count:7]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_FIXED_, [IOSCharArray arrayWithCharacters:(unichar[]){ 'F', 'I', 'X', 'E', 'D' } count:5]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_SINGLE_QUOTE_, [IOSCharArray arrayWithCharacters:(unichar[]){ '\'' } count:1]);
    JreOperatorRetainedAssign(&OrgKxml2IoKXmlParser_DOUBLE_QUOTE_, [IOSCharArray arrayWithCharacters:(unichar[]){ '"' } count:1]);
  }
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&stringPool_, nil);
  JreOperatorRetainedAssign(&error_, nil);
  JreOperatorRetainedAssign(&attributes_, nil);
  JreOperatorRetainedAssign(&text_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&prefix_, nil);
  JreOperatorRetainedAssign(&namespace__, nil);
  JreOperatorRetainedAssign(&buffer_, nil);
  JreOperatorRetainedAssign(&nextContentSource_, nil);
  JreOperatorRetainedAssign(&encoding_, nil);
  JreOperatorRetainedAssign(&reader_, nil);
  JreOperatorRetainedAssign(&nspCounts_, nil);
  JreOperatorRetainedAssign(&nspStack_, nil);
  JreOperatorRetainedAssign(&elementStack_, nil);
  JreOperatorRetainedAssign(&defaultAttributes_, nil);
  JreOperatorRetainedAssign(&documentEntities_, nil);
  JreOperatorRetainedAssign(&bufferCapture_, nil);
  JreOperatorRetainedAssign(&publicId_, nil);
  JreOperatorRetainedAssign(&systemId_, nil);
  JreOperatorRetainedAssign(&rootElementName_, nil);
  JreOperatorRetainedAssign(&standalone_, nil);
  JreOperatorRetainedAssign(&version__, nil);
  JreOperatorRetainedAssign(&location_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgKxml2IoKXmlParser *typedCopy = (OrgKxml2IoKXmlParser *) copy;
  typedCopy.location = location_;
  typedCopy.version_ = version__;
  typedCopy.standalone = standalone_;
  typedCopy.rootElementName = rootElementName_;
  typedCopy.systemId = systemId_;
  typedCopy.publicId = publicId_;
  typedCopy.processDocDecl = processDocDecl_;
  typedCopy.processNsp = processNsp_;
  typedCopy.relaxed = relaxed_;
  typedCopy.keepNamespaceAttributes_ = keepNamespaceAttributes__;
  typedCopy.bufferCapture = bufferCapture_;
  typedCopy.documentEntities = documentEntities_;
  typedCopy.defaultAttributes = defaultAttributes_;
  typedCopy.depth = depth_;
  typedCopy.elementStack = elementStack_;
  typedCopy.nspStack = nspStack_;
  typedCopy.nspCounts = nspCounts_;
  typedCopy.reader = reader_;
  typedCopy.encoding = encoding_;
  typedCopy.nextContentSource = nextContentSource_;
  typedCopy.buffer = buffer_;
  typedCopy.position = position_;
  typedCopy.limit = limit_;
  typedCopy.bufferStartLine = bufferStartLine_;
  typedCopy.bufferStartColumn = bufferStartColumn_;
  typedCopy.type = type_;
  typedCopy.isWhitespace_ = isWhitespace__;
  typedCopy.namespace_ = namespace__;
  typedCopy.prefix = prefix_;
  typedCopy.name = name_;
  typedCopy.text = text_;
  typedCopy.degenerated = degenerated_;
  typedCopy.attributeCount = attributeCount_;
  typedCopy.attributes = attributes_;
  typedCopy.error = error_;
  typedCopy.unresolved = unresolved_;
  typedCopy.stringPool = stringPool_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:location_ name:@"location"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:version__ name:@"version_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:standalone_ name:@"standalone"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:rootElementName_ name:@"rootElementName"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:systemId_ name:@"systemId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:publicId_ name:@"publicId"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:bufferCapture_ name:@"bufferCapture"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:documentEntities_ name:@"documentEntities"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:defaultAttributes_ name:@"defaultAttributes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementStack_ name:@"elementStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspStack_ name:@"nspStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspCounts_ name:@"nspCounts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:reader_ name:@"reader"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:encoding_ name:@"encoding"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nextContentSource_ name:@"nextContentSource"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buffer_ name:@"buffer"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:namespace__ name:@"namespace_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:prefix_ name:@"prefix"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:name_ name:@"name"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:text_ name:@"text"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:attributes_ name:@"attributes"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:error_ name:@"error"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:stringPool_ name:@"stringPool"]];
  return result;
}

@end

static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE;
static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_TEXT;
static OrgKxml2IoKXmlParser_ValueContextEnum *OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION;
IOSObjectArray *OrgKxml2IoKXmlParser_ValueContextEnum_values;

@implementation OrgKxml2IoKXmlParser_ValueContextEnum

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgKxml2IoKXmlParser_ValueContextEnum_values name:@"enumValues"]];
  return result;
}

+ (OrgKxml2IoKXmlParser_ValueContextEnum *)ATTRIBUTE {
  return OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE;
}
+ (OrgKxml2IoKXmlParser_ValueContextEnum *)TEXT {
  return OrgKxml2IoKXmlParser_ValueContextEnum_TEXT;
}
+ (OrgKxml2IoKXmlParser_ValueContextEnum *)ENTITY_DECLARATION {
  return OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

- (id)initWithNSString:(NSString *)name withInt:(int)ordinal {
  return JreMemDebugAdd([super initWithNSString:name withInt:ordinal]);
}

+ (void)initialize {
  if (self == [OrgKxml2IoKXmlParser_ValueContextEnum class]) {
    OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"ATTRIBUTE" withInt:0];
    OrgKxml2IoKXmlParser_ValueContextEnum_TEXT = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"TEXT" withInt:1];
    OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION = [[OrgKxml2IoKXmlParser_ValueContextEnum alloc] initWithNSString:@"ENTITY_DECLARATION" withInt:2];
    OrgKxml2IoKXmlParser_ValueContextEnum_values = [[IOSObjectArray alloc] initWithObjects:(id[]){ OrgKxml2IoKXmlParser_ValueContextEnum_ATTRIBUTE, OrgKxml2IoKXmlParser_ValueContextEnum_TEXT, OrgKxml2IoKXmlParser_ValueContextEnum_ENTITY_DECLARATION, nil } count:3 type:[IOSClass classWithClass:[OrgKxml2IoKXmlParser_ValueContextEnum class]]];
  }
}

+ (IOSObjectArray *)values {
  return [IOSObjectArray arrayWithArray:OrgKxml2IoKXmlParser_ValueContextEnum_values];
}

+ (OrgKxml2IoKXmlParser_ValueContextEnum *)valueOfWithNSString:(NSString *)name {
  for (int i = 0; i < [OrgKxml2IoKXmlParser_ValueContextEnum_values count]; i++) {
    OrgKxml2IoKXmlParser_ValueContextEnum *e = [OrgKxml2IoKXmlParser_ValueContextEnum_values objectAtIndex:i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

@end
@implementation OrgKxml2IoKXmlParser_ContentSource

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (OrgKxml2IoKXmlParser_ContentSource *)next {
  return next_;
}
- (void)setNext:(OrgKxml2IoKXmlParser_ContentSource *)next {
  JreOperatorRetainedAssign(&next_, next);
}
@synthesize next = next_;
- (IOSCharArray *)buffer {
  return buffer_;
}
- (void)setBuffer:(IOSCharArray *)buffer {
  JreOperatorRetainedAssign(&buffer_, buffer);
}
@synthesize buffer = buffer_;
@synthesize position = position_;
@synthesize limit = limit_;

- (id)initWithOrgKxml2IoKXmlParser_ContentSource:(OrgKxml2IoKXmlParser_ContentSource *)next
                      withJavaLangCharacterArray:(IOSCharArray *)buffer
                                         withInt:(int)position
                                         withInt:(int)limit {
  if ((self = [super init])) {
    self.next = next;
    self.buffer = buffer;
    self.position = position;
    self.limit = limit;
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&buffer_, nil);
  JreOperatorRetainedAssign(&next_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgKxml2IoKXmlParser_ContentSource *typedCopy = (OrgKxml2IoKXmlParser_ContentSource *) copy;
  typedCopy.next = next_;
  typedCopy.buffer = buffer_;
  typedCopy.position = position_;
  typedCopy.limit = limit_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:next_ name:@"next"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:buffer_ name:@"buffer"]];
  return result;
}

@end
