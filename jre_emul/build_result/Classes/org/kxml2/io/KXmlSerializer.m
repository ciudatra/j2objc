//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/xml/src/main/java/org/kxml2/io/KXmlSerializer.java
//
//  Created by retechretech on 13-4-24.
//

#import "IOSBooleanArray.h"
#import "IOSCharArray.h"
#import "IOSIntArray.h"
#import "IOSObjectArray.h"
#import "java/io/BufferedWriter.h"
#import "java/io/IOException.h"
#import "java/io/OutputStream.h"
#import "java/io/OutputStreamWriter.h"
#import "java/io/Writer.h"
#import "java/lang/Boolean.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/IllegalStateException.h"
#import "java/lang/Integer.h"
#import "java/lang/RuntimeException.h"
#import "java/lang/System.h"
#import "java/util/Locale.h"
#import "org/kxml2/io/KXmlSerializer.h"
#import "org/xmlpull/v1/XmlSerializer.h"

@implementation OrgKxml2IoKXmlSerializer

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (JavaIoBufferedWriter *)writer {
  return writer_;
}
- (void)setWriter:(JavaIoBufferedWriter *)writer {
  JreOperatorRetainedAssign(&writer_, writer);
}
@synthesize writer = writer_;
@synthesize pending = pending_;
@synthesize auto_ = auto__;
@synthesize depth = depth_;
- (IOSObjectArray *)elementStack {
  return elementStack_;
}
- (void)setElementStack:(IOSObjectArray *)elementStack {
  JreOperatorRetainedAssign(&elementStack_, elementStack);
}
@synthesize elementStack = elementStack_;
- (IOSIntArray *)nspCounts {
  return nspCounts_;
}
- (void)setNspCounts:(IOSIntArray *)nspCounts {
  JreOperatorRetainedAssign(&nspCounts_, nspCounts);
}
@synthesize nspCounts = nspCounts_;
- (IOSObjectArray *)nspStack {
  return nspStack_;
}
- (void)setNspStack:(IOSObjectArray *)nspStack {
  JreOperatorRetainedAssign(&nspStack_, nspStack);
}
@synthesize nspStack = nspStack_;
- (IOSBooleanArray *)indent {
  return indent_;
}
- (void)setIndent:(IOSBooleanArray *)indent {
  JreOperatorRetainedAssign(&indent_, indent);
}
@synthesize indent = indent_;
@synthesize unicode = unicode_;
- (NSString *)encoding {
  return encoding_;
}
- (void)setEncoding:(NSString *)encoding {
  JreOperatorRetainedAssign(&encoding_, encoding);
}
@synthesize encoding = encoding_;

- (void)checkWithBOOL:(BOOL)close {
  if (!pending_) return;
  depth_++;
  pending_ = NO;
  if ((int) [((IOSBooleanArray *) NIL_CHK(indent_)) count] <= depth_) {
    IOSBooleanArray *hlp = [[[IOSBooleanArray alloc] initWithLength:depth_ + 4] autorelease];
    [JavaLangSystem arraycopyWithId:indent_ withInt:0 withId:hlp withInt:0 withInt:depth_];
    JreOperatorRetainedAssign(&indent_, hlp);
  }
  [((IOSBooleanArray *) NIL_CHK(indent_)) replaceBooleanAtIndex:depth_ withBoolean:[((IOSBooleanArray *) NIL_CHK(indent_)) booleanAtIndex:depth_ - 1]];
  for (int i = [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ - 1]; i < [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_]; i++) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:' '];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"xmlns"];
    if (![((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2]) isEmpty]) {
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:':'];
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2])];
    }
    else if ([[self getNamespace] isEmpty] && ![((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2 + 1]) isEmpty]) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot set default namespace for elements in no namespace"] autorelease];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"=\""];
    [self writeEscapedWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2 + 1]) withInt:'"'];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:'"'];
  }
  if ((int) [((IOSIntArray *) NIL_CHK(nspCounts_)) count] <= depth_ + 1) {
    IOSIntArray *hlp = [[[IOSIntArray alloc] initWithLength:depth_ + 8] autorelease];
    [JavaLangSystem arraycopyWithId:nspCounts_ withInt:0 withId:hlp withInt:0 withInt:depth_ + 1];
    JreOperatorRetainedAssign(&nspCounts_, hlp);
  }
  [((IOSIntArray *) NIL_CHK(nspCounts_)) replaceIntAtIndex:depth_ + 1 withInt:[((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_]];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:close ? @" />" : @">"];
}

- (void)writeEscapedWithNSString:(NSString *)s
                         withInt:(int)quot {
  for (int i = 0; i < [NIL_CHK(s) length]; i++) {
    unichar c = [NIL_CHK(s) charAtWithInt:i];
    switch (c) {
      BOOL valid;
      case 0x000a:
      case 0x000d:
      case 0x0009:
      if (quot == -1) [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:c];
      else [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:[NSString stringWithFormat:@"&#%d;", ((int) c)]];
      break;
      case '&':
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"&amp;"];
      break;
      case '>':
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"&gt;"];
      break;
      case '<':
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"&lt;"];
      break;
      default:
      if (c == quot) {
        [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:c == '"' ? @"&quot;" : @"&apos;"];
        break;
      }
      valid = (c >= (int) 0x20 && c <= (int) 0xd7ff) || (c >= (int) 0xe000 && c <= (int) 0xfffd);
      if (!valid) {
        [OrgKxml2IoKXmlSerializer reportInvalidCharacterWithUnichar:c];
      }
      if (unicode_ || c < 127) {
        [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:c];
      }
      else {
        [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:[NSString stringWithFormat:@"&#%d;", ((int) c)]];
      }
    }
  }
}

+ (void)reportInvalidCharacterWithUnichar:(unichar)ch {
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Illegal character (%@)", [JavaLangInteger toHexStringWithInt:(int) ch]]] autorelease];
}

- (void)docdeclWithNSString:(NSString *)dd {
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"<!DOCTYPE"];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:dd];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@">"];
}

- (void)endDocument {
  while (depth_ > 0) {
    [self endTagWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3 - 3]) withNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3 - 1])];
  }
  [self flush];
}

- (void)entityRefWithNSString:(NSString *)name {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:'&'];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:name];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:';'];
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  return ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) ? [((IOSBooleanArray *) NIL_CHK(indent_)) booleanAtIndex:depth_] : NO;
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                           withBOOL:(BOOL)create {
  @try {
    return [self getPrefixWithNSString:namespace_ withBOOL:NO withBOOL:create];
  }
  @catch (JavaIoIOException *e) {
    @throw [[[JavaLangRuntimeException alloc] initWithNSString:[((JavaIoIOException *) NIL_CHK(e)) description]] autorelease];
  }
}

- (NSString *)getPrefixWithNSString:(NSString *)namespace_
                           withBOOL:(BOOL)includeDefault
                           withBOOL:(BOOL)create {
  for (int i = [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ + 1] * 2 - 2; i >= 0; i -= 2) {
    if ([((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i + 1]) isEqual:namespace_] && (includeDefault || ![((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i]) isEmpty])) {
      NSString *cand = ((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i]);
      for (int j = i + 2; j < [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ + 1] * 2; j++) {
        if ([((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:j]) isEqual:cand]) {
          cand = nil;
          break;
        }
      }
      if (cand != nil) return cand;
    }
  }
  if (!create) return nil;
  NSString *prefix;
  if ([NIL_CHK(namespace_) isEmpty]) prefix = @"";
  else {
    do {
      prefix = [NSString stringWithFormat:@"n%d", (auto__++)];
      for (int i = [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ + 1] * 2 - 2; i >= 0; i -= 2) {
        if ([NIL_CHK(prefix) isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i])]) {
          prefix = nil;
          break;
        }
      }
    }
    while (prefix == nil);
  }
  BOOL p = pending_;
  pending_ = NO;
  [self setPrefixWithNSString:prefix withNSString:namespace_];
  pending_ = p;
  return prefix;
}

- (id)getPropertyWithNSString:(NSString *)name {
  @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Unsupported property"] autorelease];
}

- (void)ignorableWhitespaceWithNSString:(NSString *)s {
  [self textWithNSString:s];
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)value {
  if ([@"http://xmlpull.org/v1/doc/features.html#indent-output" isEqual:name]) {
    [((IOSBooleanArray *) NIL_CHK(indent_)) replaceBooleanAtIndex:depth_ withBoolean:value];
  }
  else @throw [[[JavaLangRuntimeException alloc] initWithNSString:@"Unsupported Feature"] autorelease];
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  @throw [[[JavaLangRuntimeException alloc] initWithNSString:[NSString stringWithFormat:@"Unsupported Property:%@", value]] autorelease];
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)namespace_ {
  [self checkWithBOOL:NO];
  if (prefix == nil) prefix = @"";
  if (namespace_ == nil) namespace_ = @"";
  NSString *defined = [self getPrefixWithNSString:namespace_ withBOOL:YES withBOOL:NO];
  if ([NIL_CHK(prefix) isEqual:defined]) return;
  int pos = ([((IOSIntArray *) NIL_CHK(nspCounts_)) postIncr:depth_ + 1]) << 1;
  if ((int) [((IOSObjectArray *) NIL_CHK(nspStack_)) count] < pos + 1) {
    IOSObjectArray *hlp = [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(nspStack_)) count] + 16 type:[IOSClass classWithClass:[NSString class]]] autorelease];
    [JavaLangSystem arraycopyWithId:nspStack_ withInt:0 withId:hlp withInt:0 withInt:pos];
    JreOperatorRetainedAssign(&nspStack_, hlp);
  }
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:pos++ withObject:prefix];
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:pos withObject:namespace_];
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  if ([writer isKindOfClass:[JavaIoBufferedWriter class]]) {
    self.writer = (JavaIoBufferedWriter *) writer;
  }
  else {
    self.writer = [[[JavaIoBufferedWriter alloc] initWithJavaIoWriter:writer withInt:OrgKxml2IoKXmlSerializer_WRITE_BUFFER_SIZE] autorelease];
  }
  [((IOSIntArray *) NIL_CHK(nspCounts_)) replaceIntAtIndex:0 withInt:2];
  [((IOSIntArray *) NIL_CHK(nspCounts_)) replaceIntAtIndex:1 withInt:2];
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:0 withObject:@""];
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:1 withObject:@""];
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:2 withObject:@"xml"];
  [((IOSObjectArray *) NIL_CHK(nspStack_)) replaceObjectAtIndex:3 withObject:@"http://www.w3.org/XML/1998/namespace"];
  pending_ = NO;
  auto__ = 0;
  depth_ = 0;
  unicode_ = NO;
}

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)os
                           withNSString:(NSString *)encoding {
  if (os == nil) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:@"os == null"] autorelease];
  [self setOutputWithJavaIoWriter:encoding == nil ? [[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:os] autorelease] : [[[JavaIoOutputStreamWriter alloc] initWithJavaIoOutputStream:os withNSString:encoding] autorelease]];
  self.encoding = encoding;
  if (encoding != nil && [[NIL_CHK(encoding) lowercaseStringWithJRELocale:[JavaUtilLocale US]] hasPrefix:@"utf"]) {
    unicode_ = YES;
  }
}

- (void)startDocumentWithNSString:(NSString *)encoding
              withJavaLangBoolean:(JavaLangBoolean *)standalone {
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"<?xml version='1.0' "];
  if (encoding != nil) {
    self.encoding = encoding;
    if ([[encoding lowercaseStringWithJRELocale:[JavaUtilLocale US]] hasPrefix:@"utf"]) {
      unicode_ = YES;
    }
  }
  if (self.encoding != nil) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"encoding='"];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:self.encoding];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"' "];
  }
  if (standalone != nil) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"standalone='"];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:[standalone booleanValue] ? @"yes" : @"no"];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"' "];
  }
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"?>"];
}

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  [self checkWithBOOL:NO];
  if ([((IOSBooleanArray *) NIL_CHK(indent_)) booleanAtIndex:depth_]) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"\r\n"];
    for (int i = 0; i < depth_; i++) [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"  "];
  }
  int esp = depth_ * 3;
  if ((int) [((IOSObjectArray *) NIL_CHK(elementStack_)) count] < esp + 3) {
    IOSObjectArray *hlp = [[[IOSObjectArray alloc] initWithLength:(int) [((IOSObjectArray *) NIL_CHK(elementStack_)) count] + 12 type:[IOSClass classWithClass:[NSString class]]] autorelease];
    [JavaLangSystem arraycopyWithId:elementStack_ withInt:0 withId:hlp withInt:0 withInt:esp];
    JreOperatorRetainedAssign(&elementStack_, hlp);
  }
  NSString *prefix = namespace_ == nil ? @"" : [self getPrefixWithNSString:namespace_ withBOOL:YES withBOOL:YES];
  if (namespace_ != nil && [NIL_CHK(namespace_) isEmpty]) {
    for (int i = [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_]; i < [((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_ + 1]; i++) {
      if ([((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2]) isEmpty] && ![((NSString *) [((IOSObjectArray *) NIL_CHK(nspStack_)) objectAtIndex:i * 2 + 1]) isEmpty]) {
        @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"Cannot set default namespace for elements in no namespace"] autorelease];
      }
    }
  }
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:esp++ withObject:namespace_];
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:esp++ withObject:prefix];
  [((IOSObjectArray *) NIL_CHK(elementStack_)) replaceObjectAtIndex:esp withObject:name];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:'<'];
  if (![NIL_CHK(prefix) isEmpty]) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:prefix];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:':'];
  }
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:name];
  pending_ = YES;
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value {
  if (!pending_) @throw [[[JavaLangIllegalStateException alloc] initWithNSString:@"illegal position for attribute"] autorelease];
  if (namespace_ == nil) namespace_ = @"";
  NSString *prefix = [NIL_CHK(namespace_) isEmpty] ? @"" : [self getPrefixWithNSString:namespace_ withBOOL:NO withBOOL:YES];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:' '];
  if (![NIL_CHK(prefix) isEmpty]) {
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:prefix];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:':'];
  }
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:name];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:'='];
  unichar q = [NIL_CHK(value) indexOf:'"'] == -1 ? '"' : '\'';
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:q];
  [self writeEscapedWithNSString:value withInt:q];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:q];
  return self;
}

- (void)flush {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) flush];
}

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name {
  if (!pending_) depth_--;
  if ((namespace_ == nil && ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3]) != nil) || (namespace_ != nil && ![NIL_CHK(namespace_) isEqual:((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3])]) || ![((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3 + 2]) isEqual:name]) @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"</{%@}%@> does not match start", namespace_, name]] autorelease];
  if (pending_) {
    [self checkWithBOOL:YES];
    depth_--;
  }
  else {
    if ([((IOSBooleanArray *) NIL_CHK(indent_)) booleanAtIndex:depth_ + 1]) {
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"\r\n"];
      for (int i = 0; i < depth_; i++) [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"  "];
    }
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"</"];
    NSString *prefix = ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:depth_ * 3 + 1]);
    if (![NIL_CHK(prefix) isEmpty]) {
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:prefix];
      [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:':'];
    }
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:name];
    [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithInt:'>'];
  }
  [((IOSIntArray *) NIL_CHK(nspCounts_)) replaceIntAtIndex:depth_ + 1 withInt:[((IOSIntArray *) NIL_CHK(nspCounts_)) intAtIndex:depth_]];
  return self;
}

- (NSString *)getNamespace {
  return [self getDepth] == 0 ? nil : ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:[self getDepth] * 3 - 3]);
}

- (NSString *)getName {
  return [self getDepth] == 0 ? nil : ((NSString *) [((IOSObjectArray *) NIL_CHK(elementStack_)) objectAtIndex:[self getDepth] * 3 - 1]);
}

- (int)getDepth {
  return pending_ ? depth_ + 1 : depth_;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text {
  [self checkWithBOOL:NO];
  [((IOSBooleanArray *) NIL_CHK(indent_)) replaceBooleanAtIndex:depth_ withBoolean:NO];
  [self writeEscapedWithNSString:text withInt:-1];
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithJavaLangCharacterArray:(IOSCharArray *)text
                                                        withInt:(int)start
                                                        withInt:(int)len {
  [self textWithNSString:[NSString stringWithCharacters:text offset:start length:len]];
  return self;
}

- (void)cdsectWithNSString:(NSString *)data {
  [self checkWithBOOL:NO];
  data = [NIL_CHK(data) replace:@"]]>" withSequence:@"]]]]><![CDATA[>"];
  IOSCharArray *chars = [NIL_CHK(data) toCharArray];
  {
    IOSCharArray *a__ = chars;
    int n__ = (int) [((IOSCharArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      unichar ch = [((IOSCharArray *) NIL_CHK(a__)) charAtIndex:i__];
      BOOL valid = (ch >= (int) 0x20 && ch <= (int) 0xd7ff) || (ch == 0x0009 || ch == 0x000a || ch == 0x000d) || (ch >= (int) 0xe000 && ch <= (int) 0xfffd);
      if (!valid) {
        [OrgKxml2IoKXmlSerializer reportInvalidCharacterWithUnichar:ch];
      }
    }
  }
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"<![CDATA["];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithJavaLangCharacterArray:chars withInt:0 withInt:(int) [((IOSCharArray *) NIL_CHK(chars)) count]];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"]]>"];
}

- (void)commentWithNSString:(NSString *)comment {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"<!--"];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:comment];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"-->"];
}

- (void)processingInstructionWithNSString:(NSString *)pi {
  [self checkWithBOOL:NO];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"<?"];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:pi];
  [((JavaIoBufferedWriter *) NIL_CHK(writer_)) writeWithNSString:@"?>"];
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&elementStack_, [[[IOSObjectArray alloc] initWithLength:12 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    JreOperatorRetainedAssign(&nspCounts_, [[[IOSIntArray alloc] initWithLength:4] autorelease]);
    JreOperatorRetainedAssign(&nspStack_, [[[IOSObjectArray alloc] initWithLength:8 type:[IOSClass classWithClass:[NSString class]]] autorelease]);
    JreOperatorRetainedAssign(&indent_, [[[IOSBooleanArray alloc] initWithLength:4] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&encoding_, nil);
  JreOperatorRetainedAssign(&indent_, nil);
  JreOperatorRetainedAssign(&nspStack_, nil);
  JreOperatorRetainedAssign(&nspCounts_, nil);
  JreOperatorRetainedAssign(&elementStack_, nil);
  JreOperatorRetainedAssign(&writer_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgKxml2IoKXmlSerializer *typedCopy = (OrgKxml2IoKXmlSerializer *) copy;
  typedCopy.writer = writer_;
  typedCopy.pending = pending_;
  typedCopy.auto_ = auto__;
  typedCopy.depth = depth_;
  typedCopy.elementStack = elementStack_;
  typedCopy.nspCounts = nspCounts_;
  typedCopy.nspStack = nspStack_;
  typedCopy.indent = indent_;
  typedCopy.unicode = unicode_;
  typedCopy.encoding = encoding_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:writer_ name:@"writer"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:elementStack_ name:@"elementStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspCounts_ name:@"nspCounts"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:nspStack_ name:@"nspStack"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:indent_ name:@"indent"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:encoding_ name:@"encoding"]];
  return result;
}

@end
