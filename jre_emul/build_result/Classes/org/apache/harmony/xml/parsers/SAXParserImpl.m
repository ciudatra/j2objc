//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/apache/harmony/xml/parsers/SAXParserImpl.java
//
//  Created by retechretech on 13-4-26.
//

#import "java/lang/AssertionError.h"
#import "java/lang/Boolean.h"
#import "java/util/Collections.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/Map.h"
#import "java/util/Set.h"
#import "org/apache/harmony/xml/parsers/SAXParserImpl.h"
#import "org/xml/sax/Parser.h"
#import "org/xml/sax/SAXException.h"
#import "org/xml/sax/SAXNotRecognizedException.h"
#import "org/xml/sax/SAXNotSupportedException.h"
#import "org/xml/sax/XMLReader.h"
#import "org/xml/sax/helpers/XMLReaderAdapter.h"
#import "org/xmlpull/v1/XmlPullParserException.h"
#import "org/xmlpull/v1/sax2/Driver.h"

@implementation OrgApacheHarmonyXmlParsersSAXParserImpl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  return result;
}

- (id<JavaUtilMap>)initialFeatures {
  return initialFeatures_;
}
- (void)setInitialFeatures:(id<JavaUtilMap>)initialFeatures {
  JreOperatorRetainedAssign(&initialFeatures_, initialFeatures);
}
@synthesize initialFeatures = initialFeatures_;
- (id<OrgXmlSaxXMLReader>)reader {
  return reader_;
}
- (void)setReader:(id<OrgXmlSaxXMLReader>)reader {
  JreOperatorRetainedAssign(&reader_, reader);
}
@synthesize reader = reader_;
- (id<OrgXmlSaxParser>)parser {
  return parser_;
}
- (void)setParser:(id<OrgXmlSaxParser>)parser {
  JreOperatorRetainedAssign(&parser_, parser);
}
@synthesize parser = parser_;

- (id)initWithJavaUtilMap:(id<JavaUtilMap>)initialFeatures {
  if ((self = [super init])) {
    self.initialFeatures = [((id<JavaUtilMap>) NIL_CHK(initialFeatures)) isEmpty] ? ((id<JavaUtilMap>) ((id<JavaUtilMap>) [JavaUtilCollections emptyMap])) : ((id<JavaUtilMap>) [[[JavaUtilHashMap alloc] initWithJavaUtilMap:initialFeatures] autorelease]);
    [self resetInternal];
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)resetInternal {
  @try {
    JreOperatorRetainedAssign(&reader_, [[[OrgXmlpullV1Sax2Driver alloc] init] autorelease]);
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilSet>) [((id<JavaUtilMap>) NIL_CHK(initialFeatures_)) entrySet]) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        id<JavaUtilMap_Entry> entry = ((id<JavaUtilMap_Entry>) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader_)) setFeatureWithNSString:((NSString *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getKey]) withBOOL:[((JavaLangBoolean *) [((id<JavaUtilMap_Entry>) NIL_CHK(entry)) getValue]) booleanValue]];
      }
    }
  }
  @catch (OrgXmlpullV1XmlPullParserException *e) {
    @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:[((OrgXmlpullV1XmlPullParserException *) NIL_CHK(e)) description]] autorelease];
  }
}

- (void)reset {
  @try {
    [self resetInternal];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *e) {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
  @catch (OrgXmlSaxSAXNotSupportedException *e) {
    @throw [[[JavaLangAssertionError alloc] init] autorelease];
  }
}

- (id<OrgXmlSaxParser>)getParser {
  if (parser_ == nil) {
    JreOperatorRetainedAssign(&parser_, [[[OrgXmlSaxHelpersXMLReaderAdapter alloc] initWithOrgXmlSaxXMLReader:reader_] autorelease]);
  }
  return parser_;
}

- (id)getPropertyWithNSString:(NSString *)name {
  return [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader_)) getPropertyWithNSString:name];
}

- (id<OrgXmlSaxXMLReader>)getXMLReader {
  return reader_;
}

- (BOOL)isNamespaceAware {
  @try {
    return [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader_)) getFeatureWithNSString:@"http://xml.org/sax/features/namespaces"];
  }
  @catch (OrgXmlSaxSAXException *ex) {
    return NO;
  }
}

- (BOOL)isValidating {
  return NO;
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  [((id<OrgXmlSaxXMLReader>) NIL_CHK(reader_)) setPropertyWithNSString:name withId:value];
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&parser_, nil);
  JreOperatorRetainedAssign(&reader_, nil);
  JreOperatorRetainedAssign(&initialFeatures_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgApacheHarmonyXmlParsersSAXParserImpl *typedCopy = (OrgApacheHarmonyXmlParsersSAXParserImpl *) copy;
  typedCopy.initialFeatures = initialFeatures_;
  typedCopy.reader = reader_;
  typedCopy.parser = parser_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:initialFeatures_ name:@"initialFeatures"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:reader_ name:@"reader"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:parser_ name:@"parser"]];
  return result;
}

@end
