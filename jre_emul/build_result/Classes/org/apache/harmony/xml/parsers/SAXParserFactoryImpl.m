//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: android/libcore/luni/src/main/java/org/apache/harmony/xml/parsers/SAXParserFactoryImpl.java
//
//  Created by retechretech on 13-4-24.
//

#import "java/lang/AssertionError.h"
#import "java/lang/Boolean.h"
#import "java/lang/Exception.h"
#import "java/lang/NullPointerException.h"
#import "java/util/HashMap.h"
#import "java/util/Map.h"
#import "javax/xml/parsers/ParserConfigurationException.h"
#import "javax/xml/parsers/SAXParser.h"
#import "org/apache/harmony/xml/parsers/SAXParserFactoryImpl.h"
#import "org/apache/harmony/xml/parsers/SAXParserImpl.h"
#import "org/xml/sax/SAXNotRecognizedException.h"

@implementation OrgApacheHarmonyXmlParsersSAXParserFactoryImpl

+ (NSArray *)memDebugStaticReferences {
  NSMutableArray *result = [NSMutableArray array];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_ name:@"OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_"]];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_ name:@"OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_"]];
  return result;
}

static NSString * OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_ = @"http://xml.org/sax/features/namespaces";
static NSString * OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_ = @"http://xml.org/sax/features/validation";

- (id<JavaUtilMap>)features {
  return features_;
}
- (void)setFeatures:(id<JavaUtilMap>)features {
  JreOperatorRetainedAssign(&features_, features);
}
@synthesize features = features_;

+ (NSString *)NAMESPACES {
  return OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_;
}

+ (NSString *)VALIDATION {
  return OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_;
}

- (BOOL)getFeatureWithNSString:(NSString *)name {
  if (name == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"name == null"] autorelease];
  }
  if (![NIL_CHK(name) hasPrefix:@"http://xml.org/sax/features/"]) {
    @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name] autorelease];
  }
  return [((JavaLangBoolean *) NIL_CHK([JavaLangBoolean getTRUE])) isEqual:((JavaLangBoolean *) [((id<JavaUtilMap>) NIL_CHK(features_)) getWithId:name])];
}

- (BOOL)isNamespaceAware {
  @try {
    return [self getFeatureWithNSString:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *ex) {
    @throw [[[JavaLangAssertionError alloc] initWithId:ex] autorelease];
  }
}

- (BOOL)isValidating {
  @try {
    return [self getFeatureWithNSString:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *ex) {
    @throw [[[JavaLangAssertionError alloc] initWithId:ex] autorelease];
  }
}

- (JavaxXmlParsersSAXParser *)newSAXParser OBJC_METHOD_FAMILY_NONE {
  if ([self isValidating]) {
    @throw [[[JavaxXmlParsersParserConfigurationException alloc] initWithNSString:@"No validating SAXParser implementation available"] autorelease];
  }
  @try {
    return [[[OrgApacheHarmonyXmlParsersSAXParserImpl alloc] initWithJavaUtilMap:features_] autorelease];
  }
  @catch (JavaLangException *ex) {
    @throw [[[JavaxXmlParsersParserConfigurationException alloc] initWithNSString:[((JavaLangException *) NIL_CHK(ex)) description]] autorelease];
  }
}

- (void)setFeatureWithNSString:(NSString *)name
                      withBOOL:(BOOL)value {
  if (name == nil) {
    @throw [[[JavaLangNullPointerException alloc] initWithNSString:@"name == null"] autorelease];
  }
  if (![NIL_CHK(name) hasPrefix:@"http://xml.org/sax/features/"]) {
    @throw [[[OrgXmlSaxSAXNotRecognizedException alloc] initWithNSString:name] autorelease];
  }
  if (value) {
    [((id<JavaUtilMap>) NIL_CHK(features_)) putWithId:name withId:[JavaLangBoolean getTRUE]];
  }
  else {
    [((id<JavaUtilMap>) NIL_CHK(features_)) putWithId:name withId:[JavaLangBoolean getFALSE]];
  }
}

- (void)setNamespaceAwareWithBOOL:(BOOL)value {
  @try {
    [self setFeatureWithNSString:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_NAMESPACES_ withBOOL:value];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *ex) {
    @throw [[[JavaLangAssertionError alloc] initWithId:ex] autorelease];
  }
}

- (void)setValidatingWithBOOL:(BOOL)value {
  @try {
    [self setFeatureWithNSString:OrgApacheHarmonyXmlParsersSAXParserFactoryImpl_VALIDATION_ withBOOL:value];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *ex) {
    @throw [[[JavaLangAssertionError alloc] initWithId:ex] autorelease];
  }
}

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&features_, [[[JavaUtilHashMap alloc] init] autorelease]);
    JreMemDebugAdd(self);
  }
  return self;
}

- (void)dealloc {
  JreMemDebugRemove(self);
  JreOperatorRetainedAssign(&features_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  OrgApacheHarmonyXmlParsersSAXParserFactoryImpl *typedCopy = (OrgApacheHarmonyXmlParsersSAXParserFactoryImpl *) copy;
  typedCopy.features = features_;
}

- (NSArray *)memDebugStrongReferences {
  NSMutableArray *result =
      [[[super memDebugStrongReferences] mutableCopy] autorelease];
  [result addObject:[JreMemDebugStrongReference strongReferenceWithObject:features_ name:@"features"]];
  return result;
}

@end
